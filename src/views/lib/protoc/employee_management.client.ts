// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "employee_management.proto" (package "employee_management", syntax proto3)
// tslint:disable
import { TaskCommentService } from "./employee_management";
import type { DeleteTaskCommentRequest } from "./employee_management";
import type { UpdateTaskCommentRequest } from "./employee_management";
import type { GetTaskCommentRequest } from "./employee_management";
import type { TaskComment } from "./employee_management";
import type { InsertTaskCommentRequest } from "./employee_management";
import { TaskService } from "./employee_management";
import type { DeleteTaskRequest } from "./employee_management";
import type { UpdateTaskRequest } from "./employee_management";
import type { GetTaskRequest } from "./employee_management";
import type { Task } from "./employee_management";
import type { InsertTaskRequest } from "./employee_management";
import { EmployeeService } from "./employee_management";
import type { DeleteEmployeeRequest } from "./employee_management";
import type { UpdateEmployeeRequest } from "./employee_management";
import type { GetEmployeeRequest } from "./employee_management";
import type { Employee } from "./employee_management";
import type { InsertEmployeeRequest } from "./employee_management";
import { FileService } from "./employee_management";
import type { DeleteFileRequest } from "./employee_management";
import type { UpdateFileRequest } from "./employee_management";
import type { GetFileRequest } from "./employee_management";
import type { File } from "./employee_management";
import type { InsertFileRequest } from "./employee_management";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserService } from "./employee_management";
import type { Empty } from "./employee_management";
import type { DeleteUserRequest } from "./employee_management";
import type { UpdateUserRoleRequest } from "./employee_management";
import type { UpdateUserPasswordRequest } from "./employee_management";
import type { UpdateUserEmailRequest } from "./employee_management";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { GetUserRequest } from "./employee_management";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { User } from "./employee_management";
import type { InsertUserRequest } from "./employee_management";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service employee_management.UserService
 */
export interface IUserServiceClient {
	/**
	 * @generated from protobuf rpc: InsertUser(employee_management.InsertUserRequest) returns (employee_management.User);
	 */
	insertUser(
		input: InsertUserRequest,
		options?: RpcOptions,
	): UnaryCall<InsertUserRequest, User>;
	/**
	 * @generated from protobuf rpc: GetUser(employee_management.GetUserRequest) returns (employee_management.User);
	 */
	getUser(
		input: GetUserRequest,
		options?: RpcOptions,
	): UnaryCall<GetUserRequest, User>;
	/**
	 * @generated from protobuf rpc: GetUsers(employee_management.GetUserRequest) returns (stream employee_management.User);
	 */
	getUsers(
		input: GetUserRequest,
		options?: RpcOptions,
	): ServerStreamingCall<GetUserRequest, User>;
	/**
	 * @generated from protobuf rpc: UpdateUserEmail(employee_management.UpdateUserEmailRequest) returns (employee_management.User);
	 */
	updateUserEmail(
		input: UpdateUserEmailRequest,
		options?: RpcOptions,
	): UnaryCall<UpdateUserEmailRequest, User>;
	/**
	 * @generated from protobuf rpc: UpdateUserPassword(employee_management.UpdateUserPasswordRequest) returns (employee_management.User);
	 */
	updateUserPassword(
		input: UpdateUserPasswordRequest,
		options?: RpcOptions,
	): UnaryCall<UpdateUserPasswordRequest, User>;
	/**
	 * @generated from protobuf rpc: UpdateUserRole(employee_management.UpdateUserRoleRequest) returns (employee_management.User);
	 */
	updateUserRole(
		input: UpdateUserRoleRequest,
		options?: RpcOptions,
	): UnaryCall<UpdateUserRoleRequest, User>;
	/**
	 * @generated from protobuf rpc: DeleteUser(employee_management.DeleteUserRequest) returns (employee_management.Empty);
	 */
	deleteUser(
		input: DeleteUserRequest,
		options?: RpcOptions,
	): UnaryCall<DeleteUserRequest, Empty>;
}
/**
 * @generated from protobuf service employee_management.UserService
 */
export class UserServiceClient implements IUserServiceClient, ServiceInfo {
	typeName = UserService.typeName;
	methods = UserService.methods;
	options = UserService.options;
	constructor(private readonly _transport: RpcTransport) {}
	/**
	 * @generated from protobuf rpc: InsertUser(employee_management.InsertUserRequest) returns (employee_management.User);
	 */
	insertUser(
		input: InsertUserRequest,
		options?: RpcOptions,
	): UnaryCall<InsertUserRequest, User> {
		const method = this.methods[0],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<InsertUserRequest, User>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: GetUser(employee_management.GetUserRequest) returns (employee_management.User);
	 */
	getUser(
		input: GetUserRequest,
		options?: RpcOptions,
	): UnaryCall<GetUserRequest, User> {
		const method = this.methods[1],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<GetUserRequest, User>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: GetUsers(employee_management.GetUserRequest) returns (stream employee_management.User);
	 */
	getUsers(
		input: GetUserRequest,
		options?: RpcOptions,
	): ServerStreamingCall<GetUserRequest, User> {
		const method = this.methods[2],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<GetUserRequest, User>(
			"serverStreaming",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: UpdateUserEmail(employee_management.UpdateUserEmailRequest) returns (employee_management.User);
	 */
	updateUserEmail(
		input: UpdateUserEmailRequest,
		options?: RpcOptions,
	): UnaryCall<UpdateUserEmailRequest, User> {
		const method = this.methods[3],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<UpdateUserEmailRequest, User>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: UpdateUserPassword(employee_management.UpdateUserPasswordRequest) returns (employee_management.User);
	 */
	updateUserPassword(
		input: UpdateUserPasswordRequest,
		options?: RpcOptions,
	): UnaryCall<UpdateUserPasswordRequest, User> {
		const method = this.methods[4],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<UpdateUserPasswordRequest, User>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: UpdateUserRole(employee_management.UpdateUserRoleRequest) returns (employee_management.User);
	 */
	updateUserRole(
		input: UpdateUserRoleRequest,
		options?: RpcOptions,
	): UnaryCall<UpdateUserRoleRequest, User> {
		const method = this.methods[5],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<UpdateUserRoleRequest, User>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: DeleteUser(employee_management.DeleteUserRequest) returns (employee_management.Empty);
	 */
	deleteUser(
		input: DeleteUserRequest,
		options?: RpcOptions,
	): UnaryCall<DeleteUserRequest, Empty> {
		const method = this.methods[6],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<DeleteUserRequest, Empty>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
}
/**
 * @generated from protobuf service employee_management.FileService
 */
export interface IFileServiceClient {
	/**
	 * @generated from protobuf rpc: InsertFile(employee_management.InsertFileRequest) returns (employee_management.File);
	 */
	insertFile(
		input: InsertFileRequest,
		options?: RpcOptions,
	): UnaryCall<InsertFileRequest, File>;
	/**
	 * @generated from protobuf rpc: GetFile(employee_management.GetFileRequest) returns (employee_management.File);
	 */
	getFile(
		input: GetFileRequest,
		options?: RpcOptions,
	): UnaryCall<GetFileRequest, File>;
	/**
	 * @generated from protobuf rpc: UpdateFile(employee_management.UpdateFileRequest) returns (employee_management.File);
	 */
	updateFile(
		input: UpdateFileRequest,
		options?: RpcOptions,
	): UnaryCall<UpdateFileRequest, File>;
	/**
	 * @generated from protobuf rpc: DeleteFile(employee_management.DeleteFileRequest) returns (employee_management.Empty);
	 */
	deleteFile(
		input: DeleteFileRequest,
		options?: RpcOptions,
	): UnaryCall<DeleteFileRequest, Empty>;
}
/**
 * @generated from protobuf service employee_management.FileService
 */
export class FileServiceClient implements IFileServiceClient, ServiceInfo {
	typeName = FileService.typeName;
	methods = FileService.methods;
	options = FileService.options;
	constructor(private readonly _transport: RpcTransport) {}
	/**
	 * @generated from protobuf rpc: InsertFile(employee_management.InsertFileRequest) returns (employee_management.File);
	 */
	insertFile(
		input: InsertFileRequest,
		options?: RpcOptions,
	): UnaryCall<InsertFileRequest, File> {
		const method = this.methods[0],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<InsertFileRequest, File>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: GetFile(employee_management.GetFileRequest) returns (employee_management.File);
	 */
	getFile(
		input: GetFileRequest,
		options?: RpcOptions,
	): UnaryCall<GetFileRequest, File> {
		const method = this.methods[1],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<GetFileRequest, File>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: UpdateFile(employee_management.UpdateFileRequest) returns (employee_management.File);
	 */
	updateFile(
		input: UpdateFileRequest,
		options?: RpcOptions,
	): UnaryCall<UpdateFileRequest, File> {
		const method = this.methods[2],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<UpdateFileRequest, File>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: DeleteFile(employee_management.DeleteFileRequest) returns (employee_management.Empty);
	 */
	deleteFile(
		input: DeleteFileRequest,
		options?: RpcOptions,
	): UnaryCall<DeleteFileRequest, Empty> {
		const method = this.methods[3],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<DeleteFileRequest, Empty>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
}
/**
 * @generated from protobuf service employee_management.EmployeeService
 */
export interface IEmployeeServiceClient {
	/**
	 * @generated from protobuf rpc: InsertEmployee(employee_management.InsertEmployeeRequest) returns (employee_management.Employee);
	 */
	insertEmployee(
		input: InsertEmployeeRequest,
		options?: RpcOptions,
	): UnaryCall<InsertEmployeeRequest, Employee>;
	/**
	 * @generated from protobuf rpc: GetEmployee(employee_management.GetEmployeeRequest) returns (employee_management.Employee);
	 */
	getEmployee(
		input: GetEmployeeRequest,
		options?: RpcOptions,
	): UnaryCall<GetEmployeeRequest, Employee>;
	/**
	 * @generated from protobuf rpc: UpdateEmployee(employee_management.UpdateEmployeeRequest) returns (employee_management.Employee);
	 */
	updateEmployee(
		input: UpdateEmployeeRequest,
		options?: RpcOptions,
	): UnaryCall<UpdateEmployeeRequest, Employee>;
	/**
	 * @generated from protobuf rpc: DeleteEmployee(employee_management.DeleteEmployeeRequest) returns (employee_management.Empty);
	 */
	deleteEmployee(
		input: DeleteEmployeeRequest,
		options?: RpcOptions,
	): UnaryCall<DeleteEmployeeRequest, Empty>;
}
/**
 * @generated from protobuf service employee_management.EmployeeService
 */
export class EmployeeServiceClient
	implements IEmployeeServiceClient, ServiceInfo
{
	typeName = EmployeeService.typeName;
	methods = EmployeeService.methods;
	options = EmployeeService.options;
	constructor(private readonly _transport: RpcTransport) {}
	/**
	 * @generated from protobuf rpc: InsertEmployee(employee_management.InsertEmployeeRequest) returns (employee_management.Employee);
	 */
	insertEmployee(
		input: InsertEmployeeRequest,
		options?: RpcOptions,
	): UnaryCall<InsertEmployeeRequest, Employee> {
		const method = this.methods[0],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<InsertEmployeeRequest, Employee>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: GetEmployee(employee_management.GetEmployeeRequest) returns (employee_management.Employee);
	 */
	getEmployee(
		input: GetEmployeeRequest,
		options?: RpcOptions,
	): UnaryCall<GetEmployeeRequest, Employee> {
		const method = this.methods[1],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<GetEmployeeRequest, Employee>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: UpdateEmployee(employee_management.UpdateEmployeeRequest) returns (employee_management.Employee);
	 */
	updateEmployee(
		input: UpdateEmployeeRequest,
		options?: RpcOptions,
	): UnaryCall<UpdateEmployeeRequest, Employee> {
		const method = this.methods[2],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<UpdateEmployeeRequest, Employee>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: DeleteEmployee(employee_management.DeleteEmployeeRequest) returns (employee_management.Empty);
	 */
	deleteEmployee(
		input: DeleteEmployeeRequest,
		options?: RpcOptions,
	): UnaryCall<DeleteEmployeeRequest, Empty> {
		const method = this.methods[3],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<DeleteEmployeeRequest, Empty>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
}
/**
 * @generated from protobuf service employee_management.TaskService
 */
export interface ITaskServiceClient {
	/**
	 * @generated from protobuf rpc: InsertTask(employee_management.InsertTaskRequest) returns (employee_management.Task);
	 */
	insertTask(
		input: InsertTaskRequest,
		options?: RpcOptions,
	): UnaryCall<InsertTaskRequest, Task>;
	/**
	 * @generated from protobuf rpc: GetTask(employee_management.GetTaskRequest) returns (employee_management.Task);
	 */
	getTask(
		input: GetTaskRequest,
		options?: RpcOptions,
	): UnaryCall<GetTaskRequest, Task>;
	/**
	 * @generated from protobuf rpc: UpdateTask(employee_management.UpdateTaskRequest) returns (employee_management.Task);
	 */
	updateTask(
		input: UpdateTaskRequest,
		options?: RpcOptions,
	): UnaryCall<UpdateTaskRequest, Task>;
	/**
	 * @generated from protobuf rpc: DeleteTask(employee_management.DeleteTaskRequest) returns (employee_management.Empty);
	 */
	deleteTask(
		input: DeleteTaskRequest,
		options?: RpcOptions,
	): UnaryCall<DeleteTaskRequest, Empty>;
}
/**
 * @generated from protobuf service employee_management.TaskService
 */
export class TaskServiceClient implements ITaskServiceClient, ServiceInfo {
	typeName = TaskService.typeName;
	methods = TaskService.methods;
	options = TaskService.options;
	constructor(private readonly _transport: RpcTransport) {}
	/**
	 * @generated from protobuf rpc: InsertTask(employee_management.InsertTaskRequest) returns (employee_management.Task);
	 */
	insertTask(
		input: InsertTaskRequest,
		options?: RpcOptions,
	): UnaryCall<InsertTaskRequest, Task> {
		const method = this.methods[0],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<InsertTaskRequest, Task>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: GetTask(employee_management.GetTaskRequest) returns (employee_management.Task);
	 */
	getTask(
		input: GetTaskRequest,
		options?: RpcOptions,
	): UnaryCall<GetTaskRequest, Task> {
		const method = this.methods[1],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<GetTaskRequest, Task>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: UpdateTask(employee_management.UpdateTaskRequest) returns (employee_management.Task);
	 */
	updateTask(
		input: UpdateTaskRequest,
		options?: RpcOptions,
	): UnaryCall<UpdateTaskRequest, Task> {
		const method = this.methods[2],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<UpdateTaskRequest, Task>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: DeleteTask(employee_management.DeleteTaskRequest) returns (employee_management.Empty);
	 */
	deleteTask(
		input: DeleteTaskRequest,
		options?: RpcOptions,
	): UnaryCall<DeleteTaskRequest, Empty> {
		const method = this.methods[3],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<DeleteTaskRequest, Empty>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
}
/**
 * @generated from protobuf service employee_management.TaskCommentService
 */
export interface ITaskCommentServiceClient {
	/**
	 * @generated from protobuf rpc: InsertTaskComment(employee_management.InsertTaskCommentRequest) returns (employee_management.TaskComment);
	 */
	insertTaskComment(
		input: InsertTaskCommentRequest,
		options?: RpcOptions,
	): UnaryCall<InsertTaskCommentRequest, TaskComment>;
	/**
	 * @generated from protobuf rpc: GetTaskComment(employee_management.GetTaskCommentRequest) returns (employee_management.TaskComment);
	 */
	getTaskComment(
		input: GetTaskCommentRequest,
		options?: RpcOptions,
	): UnaryCall<GetTaskCommentRequest, TaskComment>;
	/**
	 * @generated from protobuf rpc: UpdateTaskComment(employee_management.UpdateTaskCommentRequest) returns (employee_management.TaskComment);
	 */
	updateTaskComment(
		input: UpdateTaskCommentRequest,
		options?: RpcOptions,
	): UnaryCall<UpdateTaskCommentRequest, TaskComment>;
	/**
	 * @generated from protobuf rpc: DeleteTaskComment(employee_management.DeleteTaskCommentRequest) returns (employee_management.Empty);
	 */
	deleteTaskComment(
		input: DeleteTaskCommentRequest,
		options?: RpcOptions,
	): UnaryCall<DeleteTaskCommentRequest, Empty>;
}
/**
 * @generated from protobuf service employee_management.TaskCommentService
 */
export class TaskCommentServiceClient
	implements ITaskCommentServiceClient, ServiceInfo
{
	typeName = TaskCommentService.typeName;
	methods = TaskCommentService.methods;
	options = TaskCommentService.options;
	constructor(private readonly _transport: RpcTransport) {}
	/**
	 * @generated from protobuf rpc: InsertTaskComment(employee_management.InsertTaskCommentRequest) returns (employee_management.TaskComment);
	 */
	insertTaskComment(
		input: InsertTaskCommentRequest,
		options?: RpcOptions,
	): UnaryCall<InsertTaskCommentRequest, TaskComment> {
		const method = this.methods[0],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<InsertTaskCommentRequest, TaskComment>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: GetTaskComment(employee_management.GetTaskCommentRequest) returns (employee_management.TaskComment);
	 */
	getTaskComment(
		input: GetTaskCommentRequest,
		options?: RpcOptions,
	): UnaryCall<GetTaskCommentRequest, TaskComment> {
		const method = this.methods[1],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<GetTaskCommentRequest, TaskComment>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: UpdateTaskComment(employee_management.UpdateTaskCommentRequest) returns (employee_management.TaskComment);
	 */
	updateTaskComment(
		input: UpdateTaskCommentRequest,
		options?: RpcOptions,
	): UnaryCall<UpdateTaskCommentRequest, TaskComment> {
		const method = this.methods[2],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<UpdateTaskCommentRequest, TaskComment>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
	/**
	 * @generated from protobuf rpc: DeleteTaskComment(employee_management.DeleteTaskCommentRequest) returns (employee_management.Empty);
	 */
	deleteTaskComment(
		input: DeleteTaskCommentRequest,
		options?: RpcOptions,
	): UnaryCall<DeleteTaskCommentRequest, Empty> {
		const method = this.methods[3],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<DeleteTaskCommentRequest, Empty>(
			"unary",
			this._transport,
			method,
			opt,
			input,
		);
	}
}
