// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "employee_management.proto" (package "employee_management", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message employee_management.User
 */
export interface User {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string email = 2;
     */
    email: string;
    /**
     * @generated from protobuf field: employee_management.Role role = 3;
     */
    role: Role;
    /**
     * @generated from protobuf field: string created_at = 4;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 5;
     */
    updatedAt: string;
}
/**
 * @generated from protobuf message employee_management.InsertUserRequest
 */
export interface InsertUserRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: employee_management.Role role = 3;
     */
    role: Role;
}
/**
 * @generated from protobuf message employee_management.GetUserRequest
 */
export interface GetUserRequest {
    /**
     * @generated from protobuf oneof: identifier
     */
    identifier: {
        oneofKind: "id";
        /**
         * @generated from protobuf field: string id = 1;
         */
        id: string; // optional
    } | {
        oneofKind: "email";
        /**
         * @generated from protobuf field: string email = 2;
         */
        email: string; // optional
    } | {
        oneofKind: "role";
        /**
         * @generated from protobuf field: employee_management.Role role = 3;
         */
        role: Role; // optional
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message employee_management.UpdateUserEmailRequest
 */
export interface UpdateUserEmailRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string current_email = 2;
     */
    currentEmail: string;
    /**
     * @generated from protobuf field: string new_email = 3;
     */
    newEmail: string;
}
/**
 * @generated from protobuf message employee_management.UpdateUserPasswordRequest
 */
export interface UpdateUserPasswordRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string current_password = 2;
     */
    currentPassword: string;
    /**
     * @generated from protobuf field: string new_password = 3;
     */
    newPassword: string;
}
/**
 * @generated from protobuf message employee_management.UpdateUserRoleRequest
 */
export interface UpdateUserRoleRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: employee_management.Role role = 2;
     */
    role: Role;
}
/**
 * @generated from protobuf message employee_management.DeleteUserRequest
 */
export interface DeleteUserRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message employee_management.Empty
 */
export interface Empty {
}
/**
 * -- File --
 *
 * @generated from protobuf message employee_management.File
 */
export interface File {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string path = 3;
     */
    path: string;
    /**
     * @generated from protobuf field: employee_management.User owner = 4;
     */
    owner?: User;
    /**
     * @generated from protobuf field: string created_at = 5;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 6;
     */
    updatedAt: string;
}
/**
 * @generated from protobuf message employee_management.GetFileRequest
 */
export interface GetFileRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message employee_management.UpdateFileRequest
 */
export interface UpdateFileRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf oneof: identifier
     */
    identifier: {
        oneofKind: "name";
        /**
         * @generated from protobuf field: string name = 2;
         */
        name: string;
    } | {
        oneofKind: "ownerId";
        /**
         * @generated from protobuf field: string owner_id = 3;
         */
        ownerId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message employee_management.DeleteFileRequest
 */
export interface DeleteFileRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message employee_management.Employee
 */
export interface Employee {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: employee_management.User user = 2;
     */
    user?: User;
    /**
     * @generated from protobuf field: string first_name = 3;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string middle_name = 4;
     */
    middleName: string;
    /**
     * @generated from protobuf field: string last_name = 5;
     */
    lastName: string;
    /**
     * @generated from protobuf field: employee_management.Sex sex = 6;
     */
    sex: Sex;
    /**
     * @generated from protobuf field: string address = 7;
     */
    address: string;
    /**
     * @generated from protobuf field: string position = 8;
     */
    position: string;
    /**
     * @generated from protobuf field: string contact_number = 9;
     */
    contactNumber: string;
    /**
     * @generated from protobuf field: employee_management.ContractType contract_type = 10;
     */
    contractType: ContractType; // "fulltime, parttime"
    /**
     * @generated from protobuf field: string birthday = 11;
     */
    birthday: string;
    /**
     * @generated from protobuf field: string created_at = 12;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 13;
     */
    updatedAt: string;
}
/**
 * @generated from protobuf message employee_management.InsertEmployeeRequest
 */
export interface InsertEmployeeRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string first_name = 2;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string middle_name = 3;
     */
    middleName: string;
    /**
     * @generated from protobuf field: string last_name = 4;
     */
    lastName: string;
    /**
     * @generated from protobuf field: employee_management.Sex sex = 5;
     */
    sex: Sex;
    /**
     * @generated from protobuf field: string address = 6;
     */
    address: string;
    /**
     * @generated from protobuf field: string position = 7;
     */
    position: string;
    /**
     * @generated from protobuf field: string contact_number = 8;
     */
    contactNumber: string;
    /**
     * @generated from protobuf field: employee_management.ContractType contract_type = 9;
     */
    contractType: ContractType;
    /**
     * @generated from protobuf field: string birthday = 10;
     */
    birthday: string;
}
/**
 * @generated from protobuf message employee_management.GetEmployeeRequest
 */
export interface GetEmployeeRequest {
    /**
     * @generated from protobuf oneof: identifier
     */
    identifier: {
        oneofKind: "id";
        /**
         * @generated from protobuf field: string id = 1;
         */
        id: string;
    } | {
        oneofKind: "userId";
        /**
         * @generated from protobuf field: string user_id = 2;
         */
        userId: string;
    } | {
        oneofKind: "contactNumber";
        /**
         * @generated from protobuf field: string contact_number = 3;
         */
        contactNumber: string;
    } | {
        oneofKind: "contractType";
        /**
         * @generated from protobuf field: employee_management.ContractType contract_type = 4;
         */
        contractType: ContractType;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message employee_management.UpdateEmployeeRequest
 */
export interface UpdateEmployeeRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf oneof: identifier
     */
    identifier: {
        oneofKind: "newFirstName";
        /**
         * @generated from protobuf field: string new_first_name = 2;
         */
        newFirstName: string;
    } | {
        oneofKind: "newMiddleName";
        /**
         * @generated from protobuf field: string new_middle_name = 3;
         */
        newMiddleName: string;
    } | {
        oneofKind: "newLastName";
        /**
         * @generated from protobuf field: string new_last_name = 4;
         */
        newLastName: string;
    } | {
        oneofKind: "newSex";
        /**
         * @generated from protobuf field: employee_management.Sex new_sex = 5;
         */
        newSex: Sex;
    } | {
        oneofKind: "newAddress";
        /**
         * @generated from protobuf field: string new_address = 6;
         */
        newAddress: string;
    } | {
        oneofKind: "newPosition";
        /**
         * @generated from protobuf field: string new_position = 7;
         */
        newPosition: string;
    } | {
        oneofKind: "newContactNumber";
        /**
         * @generated from protobuf field: string new_contact_number = 8;
         */
        newContactNumber: string;
    } | {
        oneofKind: "newContractType";
        /**
         * @generated from protobuf field: employee_management.ContractType new_contract_type = 9;
         */
        newContractType: ContractType;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message employee_management.DeleteEmployeeRequest
 */
export interface DeleteEmployeeRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message employee_management.Task
 */
export interface Task {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: employee_management.TaskStatus status = 4;
     */
    status: TaskStatus;
    /**
     * @generated from protobuf field: employee_management.Employee issued_by_user = 5;
     */
    issuedByUser?: Employee;
    /**
     * @generated from protobuf field: repeated employee_management.Employee assigned_to = 6;
     */
    assignedTo: Employee[];
    /**
     * @generated from protobuf field: repeated employee_management.TaskComment comments = 7;
     */
    comments: TaskComment[];
    /**
     * @generated from protobuf field: string deadline = 8;
     */
    deadline: string;
    /**
     * @generated from protobuf field: string created_at = 9;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 10;
     */
    updatedAt: string;
}
/**
 * @generated from protobuf message employee_management.InsertTaskRequest
 */
export interface InsertTaskRequest {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: employee_management.TaskStatus status = 3;
     */
    status: TaskStatus;
    /**
     * @generated from protobuf field: string issued_by_user = 4;
     */
    issuedByUser: string;
    /**
     * @generated from protobuf field: string deadline = 5;
     */
    deadline: string;
}
/**
 * @generated from protobuf message employee_management.GetTaskRequest
 */
export interface GetTaskRequest {
    /**
     * @generated from protobuf oneof: identifier
     */
    identifier: {
        oneofKind: "id";
        /**
         * @generated from protobuf field: string id = 1;
         */
        id: string;
    } | {
        oneofKind: "title";
        /**
         * @generated from protobuf field: string title = 2;
         */
        title: string;
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: employee_management.TaskStatus status = 3;
         */
        status: TaskStatus;
    } | {
        oneofKind: "issuedByUser";
        /**
         * @generated from protobuf field: string issued_by_user = 4;
         */
        issuedByUser: string;
    } | {
        oneofKind: "deadline";
        /**
         * @generated from protobuf field: string deadline = 5;
         */
        deadline: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message employee_management.UpdateTaskRequest
 */
export interface UpdateTaskRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf oneof: identifier
     */
    identifier: {
        oneofKind: "newTitle";
        /**
         * @generated from protobuf field: string new_title = 2;
         */
        newTitle: string;
    } | {
        oneofKind: "newDescription";
        /**
         * @generated from protobuf field: string new_description = 3;
         */
        newDescription: string;
    } | {
        oneofKind: "newStatus";
        /**
         * @generated from protobuf field: employee_management.TaskStatus new_status = 4;
         */
        newStatus: TaskStatus;
    } | {
        oneofKind: "newIssuedByUser";
        /**
         * @generated from protobuf field: string new_issued_by_user = 5;
         */
        newIssuedByUser: string;
    } | {
        oneofKind: "newDeadline";
        /**
         * @generated from protobuf field: string new_deadline = 6;
         */
        newDeadline: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message employee_management.DeleteTaskRequest
 */
export interface DeleteTaskRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
// -- Task Comment --

/**
 * @generated from protobuf message employee_management.TaskComment
 */
export interface TaskComment {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: employee_management.Task task = 2;
     */
    task?: Task;
    /**
     * @generated from protobuf field: employee_management.Employee employee = 3;
     */
    employee?: Employee;
    /**
     * @generated from protobuf field: string comment = 4;
     */
    comment: string;
    /**
     * @generated from protobuf field: employee_management.File attachment = 5;
     */
    attachment?: File;
    /**
     * @generated from protobuf field: string created_at = 6;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 7;
     */
    updatedAt: string;
}
/**
 * @generated from protobuf message employee_management.InsertTaskCommentRequest
 */
export interface InsertTaskCommentRequest {
    /**
     * @generated from protobuf field: string task_id = 1;
     */
    taskId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: string comment = 3;
     */
    comment: string;
}
/**
 * @generated from protobuf message employee_management.GetTaskCommentRequest
 */
export interface GetTaskCommentRequest {
    /**
     * @generated from protobuf oneof: identifier
     */
    identifier: {
        oneofKind: "id";
        /**
         * @generated from protobuf field: string id = 1;
         */
        id: string;
    } | {
        oneofKind: "taskId";
        /**
         * @generated from protobuf field: string task_id = 2;
         */
        taskId: string;
    } | {
        oneofKind: "userId";
        /**
         * @generated from protobuf field: string user_id = 3;
         */
        userId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message employee_management.UpdateTaskCommentRequest
 */
export interface UpdateTaskCommentRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string new_comment = 2;
     */
    newComment: string;
}
/**
 * @generated from protobuf message employee_management.DeleteTaskCommentRequest
 */
export interface DeleteTaskCommentRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf enum employee_management.Role
 */
export enum Role {
    /**
     * @generated from protobuf enum value: SUPER_ADMIN = 0;
     */
    SUPER_ADMIN = 0,
    /**
     * @generated from protobuf enum value: ADMIN = 1;
     */
    ADMIN = 1,
    /**
     * @generated from protobuf enum value: EMPLOYEE = 2;
     */
    EMPLOYEE = 2,
    /**
     * @generated from protobuf enum value: CLIENT = 3;
     */
    CLIENT = 3
}
// -- Employee --

/**
 * @generated from protobuf enum employee_management.ContractType
 */
export enum ContractType {
    /**
     * @generated from protobuf enum value: FULLTIME = 0;
     */
    FULLTIME = 0,
    /**
     * @generated from protobuf enum value: PARTTIME = 1;
     */
    PARTTIME = 1
}
/**
 * @generated from protobuf enum employee_management.Sex
 */
export enum Sex {
    /**
     * @generated from protobuf enum value: MALE = 0;
     */
    MALE = 0,
    /**
     * @generated from protobuf enum value: FEMALE = 1;
     */
    FEMALE = 1
}
// -- Task --

/**
 * @generated from protobuf enum employee_management.TaskStatus
 */
export enum TaskStatus {
    /**
     * @generated from protobuf enum value: UNASSIGNED = 0;
     */
    UNASSIGNED = 0,
    /**
     * @generated from protobuf enum value: IN_PROGRESS = 1;
     */
    IN_PROGRESS = 1,
    /**
     * @generated from protobuf enum value: REVIEW = 2;
     */
    REVIEW = 2,
    /**
     * @generated from protobuf enum value: DONE = 3;
     */
    DONE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("employee_management.User", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "role", kind: "enum", T: () => ["employee_management.Role", Role] },
            { no: 4, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.email = "";
        message.role = 0;
        message.createdAt = "";
        message.updatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                case /* employee_management.Role role */ 3:
                    message.role = reader.int32();
                    break;
                case /* string created_at */ 4:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 5:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* employee_management.Role role = 3; */
        if (message.role !== 0)
            writer.tag(3, WireType.Varint).int32(message.role);
        /* string created_at = 4; */
        if (message.createdAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 5; */
        if (message.updatedAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.User
 */
export const User = new User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InsertUserRequest$Type extends MessageType<InsertUserRequest> {
    constructor() {
        super("employee_management.InsertUserRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "role", kind: "enum", T: () => ["employee_management.Role", Role] }
        ]);
    }
    create(value?: PartialMessage<InsertUserRequest>): InsertUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.password = "";
        message.role = 0;
        if (value !== undefined)
            reflectionMergePartial<InsertUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InsertUserRequest): InsertUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* employee_management.Role role */ 3:
                    message.role = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InsertUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* employee_management.Role role = 3; */
        if (message.role !== 0)
            writer.tag(3, WireType.Varint).int32(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.InsertUserRequest
 */
export const InsertUserRequest = new InsertUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserRequest$Type extends MessageType<GetUserRequest> {
    constructor() {
        super("employee_management.GetUserRequest", [
            { no: 1, name: "id", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "role", kind: "enum", oneof: "identifier", T: () => ["employee_management.Role", Role] }
        ]);
    }
    create(value?: PartialMessage<GetUserRequest>): GetUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.identifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserRequest): GetUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.identifier = {
                        oneofKind: "id",
                        id: reader.string()
                    };
                    break;
                case /* string email */ 2:
                    message.identifier = {
                        oneofKind: "email",
                        email: reader.string()
                    };
                    break;
                case /* employee_management.Role role */ 3:
                    message.identifier = {
                        oneofKind: "role",
                        role: reader.int32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.identifier.oneofKind === "id")
            writer.tag(1, WireType.LengthDelimited).string(message.identifier.id);
        /* string email = 2; */
        if (message.identifier.oneofKind === "email")
            writer.tag(2, WireType.LengthDelimited).string(message.identifier.email);
        /* employee_management.Role role = 3; */
        if (message.identifier.oneofKind === "role")
            writer.tag(3, WireType.Varint).int32(message.identifier.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.GetUserRequest
 */
export const GetUserRequest = new GetUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserEmailRequest$Type extends MessageType<UpdateUserEmailRequest> {
    constructor() {
        super("employee_management.UpdateUserEmailRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "current_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateUserEmailRequest>): UpdateUserEmailRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.currentEmail = "";
        message.newEmail = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateUserEmailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserEmailRequest): UpdateUserEmailRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string current_email */ 2:
                    message.currentEmail = reader.string();
                    break;
                case /* string new_email */ 3:
                    message.newEmail = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserEmailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string current_email = 2; */
        if (message.currentEmail !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.currentEmail);
        /* string new_email = 3; */
        if (message.newEmail !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.newEmail);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.UpdateUserEmailRequest
 */
export const UpdateUserEmailRequest = new UpdateUserEmailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserPasswordRequest$Type extends MessageType<UpdateUserPasswordRequest> {
    constructor() {
        super("employee_management.UpdateUserPasswordRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "current_password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateUserPasswordRequest>): UpdateUserPasswordRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.currentPassword = "";
        message.newPassword = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateUserPasswordRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserPasswordRequest): UpdateUserPasswordRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string current_password */ 2:
                    message.currentPassword = reader.string();
                    break;
                case /* string new_password */ 3:
                    message.newPassword = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserPasswordRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string current_password = 2; */
        if (message.currentPassword !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.currentPassword);
        /* string new_password = 3; */
        if (message.newPassword !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.newPassword);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.UpdateUserPasswordRequest
 */
export const UpdateUserPasswordRequest = new UpdateUserPasswordRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserRoleRequest$Type extends MessageType<UpdateUserRoleRequest> {
    constructor() {
        super("employee_management.UpdateUserRoleRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "role", kind: "enum", T: () => ["employee_management.Role", Role] }
        ]);
    }
    create(value?: PartialMessage<UpdateUserRoleRequest>): UpdateUserRoleRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.role = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateUserRoleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserRoleRequest): UpdateUserRoleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* employee_management.Role role */ 2:
                    message.role = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserRoleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* employee_management.Role role = 2; */
        if (message.role !== 0)
            writer.tag(2, WireType.Varint).int32(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.UpdateUserRoleRequest
 */
export const UpdateUserRoleRequest = new UpdateUserRoleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUserRequest$Type extends MessageType<DeleteUserRequest> {
    constructor() {
        super("employee_management.DeleteUserRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteUserRequest>): DeleteUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUserRequest): DeleteUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.DeleteUserRequest
 */
export const DeleteUserRequest = new DeleteUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("employee_management.Empty", []);
    }
    create(value?: PartialMessage<Empty>): Empty {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Empty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Empty): Empty {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Empty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.Empty
 */
export const Empty = new Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class File$Type extends MessageType<File> {
    constructor() {
        super("employee_management.File", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "owner", kind: "message", T: () => User },
            { no: 5, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<File>): File {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.path = "";
        message.createdAt = "";
        message.updatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<File>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: File): File {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string path */ 3:
                    message.path = reader.string();
                    break;
                case /* employee_management.User owner */ 4:
                    message.owner = User.internalBinaryRead(reader, reader.uint32(), options, message.owner);
                    break;
                case /* string created_at */ 5:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 6:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: File, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string path = 3; */
        if (message.path !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.path);
        /* employee_management.User owner = 4; */
        if (message.owner)
            User.internalBinaryWrite(message.owner, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string created_at = 5; */
        if (message.createdAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 6; */
        if (message.updatedAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.File
 */
export const File = new File$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFileRequest$Type extends MessageType<GetFileRequest> {
    constructor() {
        super("employee_management.GetFileRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetFileRequest>): GetFileRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetFileRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFileRequest): GetFileRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFileRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.GetFileRequest
 */
export const GetFileRequest = new GetFileRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateFileRequest$Type extends MessageType<UpdateFileRequest> {
    constructor() {
        super("employee_management.UpdateFileRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "owner_id", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateFileRequest>): UpdateFileRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.identifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UpdateFileRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateFileRequest): UpdateFileRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.identifier = {
                        oneofKind: "name",
                        name: reader.string()
                    };
                    break;
                case /* string owner_id */ 3:
                    message.identifier = {
                        oneofKind: "ownerId",
                        ownerId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateFileRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.identifier.oneofKind === "name")
            writer.tag(2, WireType.LengthDelimited).string(message.identifier.name);
        /* string owner_id = 3; */
        if (message.identifier.oneofKind === "ownerId")
            writer.tag(3, WireType.LengthDelimited).string(message.identifier.ownerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.UpdateFileRequest
 */
export const UpdateFileRequest = new UpdateFileRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteFileRequest$Type extends MessageType<DeleteFileRequest> {
    constructor() {
        super("employee_management.DeleteFileRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteFileRequest>): DeleteFileRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteFileRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteFileRequest): DeleteFileRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteFileRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.DeleteFileRequest
 */
export const DeleteFileRequest = new DeleteFileRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Employee$Type extends MessageType<Employee> {
    constructor() {
        super("employee_management.Employee", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user", kind: "message", T: () => User },
            { no: 3, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "middle_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "sex", kind: "enum", T: () => ["employee_management.Sex", Sex] },
            { no: 7, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "contact_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "contract_type", kind: "enum", T: () => ["employee_management.ContractType", ContractType] },
            { no: 11, name: "birthday", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Employee>): Employee {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.firstName = "";
        message.middleName = "";
        message.lastName = "";
        message.sex = 0;
        message.address = "";
        message.position = "";
        message.contactNumber = "";
        message.contractType = 0;
        message.birthday = "";
        message.createdAt = "";
        message.updatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<Employee>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Employee): Employee {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* employee_management.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string first_name */ 3:
                    message.firstName = reader.string();
                    break;
                case /* string middle_name */ 4:
                    message.middleName = reader.string();
                    break;
                case /* string last_name */ 5:
                    message.lastName = reader.string();
                    break;
                case /* employee_management.Sex sex */ 6:
                    message.sex = reader.int32();
                    break;
                case /* string address */ 7:
                    message.address = reader.string();
                    break;
                case /* string position */ 8:
                    message.position = reader.string();
                    break;
                case /* string contact_number */ 9:
                    message.contactNumber = reader.string();
                    break;
                case /* employee_management.ContractType contract_type */ 10:
                    message.contractType = reader.int32();
                    break;
                case /* string birthday */ 11:
                    message.birthday = reader.string();
                    break;
                case /* string created_at */ 12:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 13:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Employee, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* employee_management.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string first_name = 3; */
        if (message.firstName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.firstName);
        /* string middle_name = 4; */
        if (message.middleName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.middleName);
        /* string last_name = 5; */
        if (message.lastName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.lastName);
        /* employee_management.Sex sex = 6; */
        if (message.sex !== 0)
            writer.tag(6, WireType.Varint).int32(message.sex);
        /* string address = 7; */
        if (message.address !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.address);
        /* string position = 8; */
        if (message.position !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.position);
        /* string contact_number = 9; */
        if (message.contactNumber !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.contactNumber);
        /* employee_management.ContractType contract_type = 10; */
        if (message.contractType !== 0)
            writer.tag(10, WireType.Varint).int32(message.contractType);
        /* string birthday = 11; */
        if (message.birthday !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.birthday);
        /* string created_at = 12; */
        if (message.createdAt !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 13; */
        if (message.updatedAt !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.Employee
 */
export const Employee = new Employee$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InsertEmployeeRequest$Type extends MessageType<InsertEmployeeRequest> {
    constructor() {
        super("employee_management.InsertEmployeeRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "middle_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "sex", kind: "enum", T: () => ["employee_management.Sex", Sex] },
            { no: 6, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "contact_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "contract_type", kind: "enum", T: () => ["employee_management.ContractType", ContractType] },
            { no: 10, name: "birthday", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InsertEmployeeRequest>): InsertEmployeeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.firstName = "";
        message.middleName = "";
        message.lastName = "";
        message.sex = 0;
        message.address = "";
        message.position = "";
        message.contactNumber = "";
        message.contractType = 0;
        message.birthday = "";
        if (value !== undefined)
            reflectionMergePartial<InsertEmployeeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InsertEmployeeRequest): InsertEmployeeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string first_name */ 2:
                    message.firstName = reader.string();
                    break;
                case /* string middle_name */ 3:
                    message.middleName = reader.string();
                    break;
                case /* string last_name */ 4:
                    message.lastName = reader.string();
                    break;
                case /* employee_management.Sex sex */ 5:
                    message.sex = reader.int32();
                    break;
                case /* string address */ 6:
                    message.address = reader.string();
                    break;
                case /* string position */ 7:
                    message.position = reader.string();
                    break;
                case /* string contact_number */ 8:
                    message.contactNumber = reader.string();
                    break;
                case /* employee_management.ContractType contract_type */ 9:
                    message.contractType = reader.int32();
                    break;
                case /* string birthday */ 10:
                    message.birthday = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InsertEmployeeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string first_name = 2; */
        if (message.firstName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.firstName);
        /* string middle_name = 3; */
        if (message.middleName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.middleName);
        /* string last_name = 4; */
        if (message.lastName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lastName);
        /* employee_management.Sex sex = 5; */
        if (message.sex !== 0)
            writer.tag(5, WireType.Varint).int32(message.sex);
        /* string address = 6; */
        if (message.address !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.address);
        /* string position = 7; */
        if (message.position !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.position);
        /* string contact_number = 8; */
        if (message.contactNumber !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.contactNumber);
        /* employee_management.ContractType contract_type = 9; */
        if (message.contractType !== 0)
            writer.tag(9, WireType.Varint).int32(message.contractType);
        /* string birthday = 10; */
        if (message.birthday !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.birthday);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.InsertEmployeeRequest
 */
export const InsertEmployeeRequest = new InsertEmployeeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetEmployeeRequest$Type extends MessageType<GetEmployeeRequest> {
    constructor() {
        super("employee_management.GetEmployeeRequest", [
            { no: 1, name: "id", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contact_number", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "contract_type", kind: "enum", oneof: "identifier", T: () => ["employee_management.ContractType", ContractType] }
        ]);
    }
    create(value?: PartialMessage<GetEmployeeRequest>): GetEmployeeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.identifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetEmployeeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetEmployeeRequest): GetEmployeeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.identifier = {
                        oneofKind: "id",
                        id: reader.string()
                    };
                    break;
                case /* string user_id */ 2:
                    message.identifier = {
                        oneofKind: "userId",
                        userId: reader.string()
                    };
                    break;
                case /* string contact_number */ 3:
                    message.identifier = {
                        oneofKind: "contactNumber",
                        contactNumber: reader.string()
                    };
                    break;
                case /* employee_management.ContractType contract_type */ 4:
                    message.identifier = {
                        oneofKind: "contractType",
                        contractType: reader.int32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetEmployeeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.identifier.oneofKind === "id")
            writer.tag(1, WireType.LengthDelimited).string(message.identifier.id);
        /* string user_id = 2; */
        if (message.identifier.oneofKind === "userId")
            writer.tag(2, WireType.LengthDelimited).string(message.identifier.userId);
        /* string contact_number = 3; */
        if (message.identifier.oneofKind === "contactNumber")
            writer.tag(3, WireType.LengthDelimited).string(message.identifier.contactNumber);
        /* employee_management.ContractType contract_type = 4; */
        if (message.identifier.oneofKind === "contractType")
            writer.tag(4, WireType.Varint).int32(message.identifier.contractType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.GetEmployeeRequest
 */
export const GetEmployeeRequest = new GetEmployeeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateEmployeeRequest$Type extends MessageType<UpdateEmployeeRequest> {
    constructor() {
        super("employee_management.UpdateEmployeeRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "new_first_name", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_middle_name", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "new_last_name", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "new_sex", kind: "enum", oneof: "identifier", T: () => ["employee_management.Sex", Sex] },
            { no: 6, name: "new_address", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "new_position", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "new_contact_number", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "new_contract_type", kind: "enum", oneof: "identifier", T: () => ["employee_management.ContractType", ContractType] }
        ]);
    }
    create(value?: PartialMessage<UpdateEmployeeRequest>): UpdateEmployeeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.identifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UpdateEmployeeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateEmployeeRequest): UpdateEmployeeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string new_first_name */ 2:
                    message.identifier = {
                        oneofKind: "newFirstName",
                        newFirstName: reader.string()
                    };
                    break;
                case /* string new_middle_name */ 3:
                    message.identifier = {
                        oneofKind: "newMiddleName",
                        newMiddleName: reader.string()
                    };
                    break;
                case /* string new_last_name */ 4:
                    message.identifier = {
                        oneofKind: "newLastName",
                        newLastName: reader.string()
                    };
                    break;
                case /* employee_management.Sex new_sex */ 5:
                    message.identifier = {
                        oneofKind: "newSex",
                        newSex: reader.int32()
                    };
                    break;
                case /* string new_address */ 6:
                    message.identifier = {
                        oneofKind: "newAddress",
                        newAddress: reader.string()
                    };
                    break;
                case /* string new_position */ 7:
                    message.identifier = {
                        oneofKind: "newPosition",
                        newPosition: reader.string()
                    };
                    break;
                case /* string new_contact_number */ 8:
                    message.identifier = {
                        oneofKind: "newContactNumber",
                        newContactNumber: reader.string()
                    };
                    break;
                case /* employee_management.ContractType new_contract_type */ 9:
                    message.identifier = {
                        oneofKind: "newContractType",
                        newContractType: reader.int32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateEmployeeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string new_first_name = 2; */
        if (message.identifier.oneofKind === "newFirstName")
            writer.tag(2, WireType.LengthDelimited).string(message.identifier.newFirstName);
        /* string new_middle_name = 3; */
        if (message.identifier.oneofKind === "newMiddleName")
            writer.tag(3, WireType.LengthDelimited).string(message.identifier.newMiddleName);
        /* string new_last_name = 4; */
        if (message.identifier.oneofKind === "newLastName")
            writer.tag(4, WireType.LengthDelimited).string(message.identifier.newLastName);
        /* employee_management.Sex new_sex = 5; */
        if (message.identifier.oneofKind === "newSex")
            writer.tag(5, WireType.Varint).int32(message.identifier.newSex);
        /* string new_address = 6; */
        if (message.identifier.oneofKind === "newAddress")
            writer.tag(6, WireType.LengthDelimited).string(message.identifier.newAddress);
        /* string new_position = 7; */
        if (message.identifier.oneofKind === "newPosition")
            writer.tag(7, WireType.LengthDelimited).string(message.identifier.newPosition);
        /* string new_contact_number = 8; */
        if (message.identifier.oneofKind === "newContactNumber")
            writer.tag(8, WireType.LengthDelimited).string(message.identifier.newContactNumber);
        /* employee_management.ContractType new_contract_type = 9; */
        if (message.identifier.oneofKind === "newContractType")
            writer.tag(9, WireType.Varint).int32(message.identifier.newContractType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.UpdateEmployeeRequest
 */
export const UpdateEmployeeRequest = new UpdateEmployeeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteEmployeeRequest$Type extends MessageType<DeleteEmployeeRequest> {
    constructor() {
        super("employee_management.DeleteEmployeeRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteEmployeeRequest>): DeleteEmployeeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteEmployeeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteEmployeeRequest): DeleteEmployeeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteEmployeeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.DeleteEmployeeRequest
 */
export const DeleteEmployeeRequest = new DeleteEmployeeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Task$Type extends MessageType<Task> {
    constructor() {
        super("employee_management.Task", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "status", kind: "enum", T: () => ["employee_management.TaskStatus", TaskStatus] },
            { no: 5, name: "issued_by_user", kind: "message", T: () => Employee },
            { no: 6, name: "assigned_to", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Employee },
            { no: 7, name: "comments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TaskComment },
            { no: 8, name: "deadline", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Task>): Task {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.title = "";
        message.description = "";
        message.status = 0;
        message.assignedTo = [];
        message.comments = [];
        message.deadline = "";
        message.createdAt = "";
        message.updatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<Task>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Task): Task {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* employee_management.TaskStatus status */ 4:
                    message.status = reader.int32();
                    break;
                case /* employee_management.Employee issued_by_user */ 5:
                    message.issuedByUser = Employee.internalBinaryRead(reader, reader.uint32(), options, message.issuedByUser);
                    break;
                case /* repeated employee_management.Employee assigned_to */ 6:
                    message.assignedTo.push(Employee.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated employee_management.TaskComment comments */ 7:
                    message.comments.push(TaskComment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string deadline */ 8:
                    message.deadline = reader.string();
                    break;
                case /* string created_at */ 9:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 10:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Task, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* employee_management.TaskStatus status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* employee_management.Employee issued_by_user = 5; */
        if (message.issuedByUser)
            Employee.internalBinaryWrite(message.issuedByUser, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated employee_management.Employee assigned_to = 6; */
        for (let i = 0; i < message.assignedTo.length; i++)
            Employee.internalBinaryWrite(message.assignedTo[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated employee_management.TaskComment comments = 7; */
        for (let i = 0; i < message.comments.length; i++)
            TaskComment.internalBinaryWrite(message.comments[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string deadline = 8; */
        if (message.deadline !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.deadline);
        /* string created_at = 9; */
        if (message.createdAt !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 10; */
        if (message.updatedAt !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.Task
 */
export const Task = new Task$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InsertTaskRequest$Type extends MessageType<InsertTaskRequest> {
    constructor() {
        super("employee_management.InsertTaskRequest", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "enum", T: () => ["employee_management.TaskStatus", TaskStatus] },
            { no: 4, name: "issued_by_user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "deadline", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InsertTaskRequest>): InsertTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.description = "";
        message.status = 0;
        message.issuedByUser = "";
        message.deadline = "";
        if (value !== undefined)
            reflectionMergePartial<InsertTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InsertTaskRequest): InsertTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* employee_management.TaskStatus status */ 3:
                    message.status = reader.int32();
                    break;
                case /* string issued_by_user */ 4:
                    message.issuedByUser = reader.string();
                    break;
                case /* string deadline */ 5:
                    message.deadline = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InsertTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* employee_management.TaskStatus status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* string issued_by_user = 4; */
        if (message.issuedByUser !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.issuedByUser);
        /* string deadline = 5; */
        if (message.deadline !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.deadline);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.InsertTaskRequest
 */
export const InsertTaskRequest = new InsertTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskRequest$Type extends MessageType<GetTaskRequest> {
    constructor() {
        super("employee_management.GetTaskRequest", [
            { no: 1, name: "id", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "enum", oneof: "identifier", T: () => ["employee_management.TaskStatus", TaskStatus] },
            { no: 4, name: "issued_by_user", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "deadline", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTaskRequest>): GetTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.identifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskRequest): GetTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.identifier = {
                        oneofKind: "id",
                        id: reader.string()
                    };
                    break;
                case /* string title */ 2:
                    message.identifier = {
                        oneofKind: "title",
                        title: reader.string()
                    };
                    break;
                case /* employee_management.TaskStatus status */ 3:
                    message.identifier = {
                        oneofKind: "status",
                        status: reader.int32()
                    };
                    break;
                case /* string issued_by_user */ 4:
                    message.identifier = {
                        oneofKind: "issuedByUser",
                        issuedByUser: reader.string()
                    };
                    break;
                case /* string deadline */ 5:
                    message.identifier = {
                        oneofKind: "deadline",
                        deadline: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.identifier.oneofKind === "id")
            writer.tag(1, WireType.LengthDelimited).string(message.identifier.id);
        /* string title = 2; */
        if (message.identifier.oneofKind === "title")
            writer.tag(2, WireType.LengthDelimited).string(message.identifier.title);
        /* employee_management.TaskStatus status = 3; */
        if (message.identifier.oneofKind === "status")
            writer.tag(3, WireType.Varint).int32(message.identifier.status);
        /* string issued_by_user = 4; */
        if (message.identifier.oneofKind === "issuedByUser")
            writer.tag(4, WireType.LengthDelimited).string(message.identifier.issuedByUser);
        /* string deadline = 5; */
        if (message.identifier.oneofKind === "deadline")
            writer.tag(5, WireType.LengthDelimited).string(message.identifier.deadline);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.GetTaskRequest
 */
export const GetTaskRequest = new GetTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTaskRequest$Type extends MessageType<UpdateTaskRequest> {
    constructor() {
        super("employee_management.UpdateTaskRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "new_title", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_description", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "new_status", kind: "enum", oneof: "identifier", T: () => ["employee_management.TaskStatus", TaskStatus] },
            { no: 5, name: "new_issued_by_user", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "new_deadline", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateTaskRequest>): UpdateTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.identifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UpdateTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTaskRequest): UpdateTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string new_title */ 2:
                    message.identifier = {
                        oneofKind: "newTitle",
                        newTitle: reader.string()
                    };
                    break;
                case /* string new_description */ 3:
                    message.identifier = {
                        oneofKind: "newDescription",
                        newDescription: reader.string()
                    };
                    break;
                case /* employee_management.TaskStatus new_status */ 4:
                    message.identifier = {
                        oneofKind: "newStatus",
                        newStatus: reader.int32()
                    };
                    break;
                case /* string new_issued_by_user */ 5:
                    message.identifier = {
                        oneofKind: "newIssuedByUser",
                        newIssuedByUser: reader.string()
                    };
                    break;
                case /* string new_deadline */ 6:
                    message.identifier = {
                        oneofKind: "newDeadline",
                        newDeadline: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string new_title = 2; */
        if (message.identifier.oneofKind === "newTitle")
            writer.tag(2, WireType.LengthDelimited).string(message.identifier.newTitle);
        /* string new_description = 3; */
        if (message.identifier.oneofKind === "newDescription")
            writer.tag(3, WireType.LengthDelimited).string(message.identifier.newDescription);
        /* employee_management.TaskStatus new_status = 4; */
        if (message.identifier.oneofKind === "newStatus")
            writer.tag(4, WireType.Varint).int32(message.identifier.newStatus);
        /* string new_issued_by_user = 5; */
        if (message.identifier.oneofKind === "newIssuedByUser")
            writer.tag(5, WireType.LengthDelimited).string(message.identifier.newIssuedByUser);
        /* string new_deadline = 6; */
        if (message.identifier.oneofKind === "newDeadline")
            writer.tag(6, WireType.LengthDelimited).string(message.identifier.newDeadline);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.UpdateTaskRequest
 */
export const UpdateTaskRequest = new UpdateTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTaskRequest$Type extends MessageType<DeleteTaskRequest> {
    constructor() {
        super("employee_management.DeleteTaskRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteTaskRequest>): DeleteTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTaskRequest): DeleteTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.DeleteTaskRequest
 */
export const DeleteTaskRequest = new DeleteTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskComment$Type extends MessageType<TaskComment> {
    constructor() {
        super("employee_management.TaskComment", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "task", kind: "message", T: () => Task },
            { no: 3, name: "employee", kind: "message", T: () => Employee },
            { no: 4, name: "comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "attachment", kind: "message", T: () => File },
            { no: 6, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TaskComment>): TaskComment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.comment = "";
        message.createdAt = "";
        message.updatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<TaskComment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskComment): TaskComment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* employee_management.Task task */ 2:
                    message.task = Task.internalBinaryRead(reader, reader.uint32(), options, message.task);
                    break;
                case /* employee_management.Employee employee */ 3:
                    message.employee = Employee.internalBinaryRead(reader, reader.uint32(), options, message.employee);
                    break;
                case /* string comment */ 4:
                    message.comment = reader.string();
                    break;
                case /* employee_management.File attachment */ 5:
                    message.attachment = File.internalBinaryRead(reader, reader.uint32(), options, message.attachment);
                    break;
                case /* string created_at */ 6:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 7:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskComment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* employee_management.Task task = 2; */
        if (message.task)
            Task.internalBinaryWrite(message.task, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* employee_management.Employee employee = 3; */
        if (message.employee)
            Employee.internalBinaryWrite(message.employee, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string comment = 4; */
        if (message.comment !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.comment);
        /* employee_management.File attachment = 5; */
        if (message.attachment)
            File.internalBinaryWrite(message.attachment, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string created_at = 6; */
        if (message.createdAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 7; */
        if (message.updatedAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.TaskComment
 */
export const TaskComment = new TaskComment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InsertTaskCommentRequest$Type extends MessageType<InsertTaskCommentRequest> {
    constructor() {
        super("employee_management.InsertTaskCommentRequest", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InsertTaskCommentRequest>): InsertTaskCommentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = "";
        message.userId = "";
        message.comment = "";
        if (value !== undefined)
            reflectionMergePartial<InsertTaskCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InsertTaskCommentRequest): InsertTaskCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* string comment */ 3:
                    message.comment = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InsertTaskCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* string comment = 3; */
        if (message.comment !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.comment);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.InsertTaskCommentRequest
 */
export const InsertTaskCommentRequest = new InsertTaskCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskCommentRequest$Type extends MessageType<GetTaskCommentRequest> {
    constructor() {
        super("employee_management.GetTaskCommentRequest", [
            { no: 1, name: "id", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "task_id", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_id", kind: "scalar", oneof: "identifier", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTaskCommentRequest>): GetTaskCommentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.identifier = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetTaskCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskCommentRequest): GetTaskCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.identifier = {
                        oneofKind: "id",
                        id: reader.string()
                    };
                    break;
                case /* string task_id */ 2:
                    message.identifier = {
                        oneofKind: "taskId",
                        taskId: reader.string()
                    };
                    break;
                case /* string user_id */ 3:
                    message.identifier = {
                        oneofKind: "userId",
                        userId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.identifier.oneofKind === "id")
            writer.tag(1, WireType.LengthDelimited).string(message.identifier.id);
        /* string task_id = 2; */
        if (message.identifier.oneofKind === "taskId")
            writer.tag(2, WireType.LengthDelimited).string(message.identifier.taskId);
        /* string user_id = 3; */
        if (message.identifier.oneofKind === "userId")
            writer.tag(3, WireType.LengthDelimited).string(message.identifier.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.GetTaskCommentRequest
 */
export const GetTaskCommentRequest = new GetTaskCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTaskCommentRequest$Type extends MessageType<UpdateTaskCommentRequest> {
    constructor() {
        super("employee_management.UpdateTaskCommentRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "new_comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateTaskCommentRequest>): UpdateTaskCommentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.newComment = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateTaskCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTaskCommentRequest): UpdateTaskCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string new_comment */ 2:
                    message.newComment = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTaskCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string new_comment = 2; */
        if (message.newComment !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.newComment);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.UpdateTaskCommentRequest
 */
export const UpdateTaskCommentRequest = new UpdateTaskCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTaskCommentRequest$Type extends MessageType<DeleteTaskCommentRequest> {
    constructor() {
        super("employee_management.DeleteTaskCommentRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteTaskCommentRequest>): DeleteTaskCommentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteTaskCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTaskCommentRequest): DeleteTaskCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteTaskCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message employee_management.DeleteTaskCommentRequest
 */
export const DeleteTaskCommentRequest = new DeleteTaskCommentRequest$Type();
/**
 * @generated ServiceType for protobuf service employee_management.UserService
 */
export const UserService = new ServiceType("employee_management.UserService", [
    { name: "InsertUser", options: {}, I: InsertUserRequest, O: User },
    { name: "GetUser", options: {}, I: GetUserRequest, O: User },
    { name: "GetUsers", serverStreaming: true, options: {}, I: GetUserRequest, O: User },
    { name: "UpdateUserEmail", options: {}, I: UpdateUserEmailRequest, O: User },
    { name: "UpdateUserPassword", options: {}, I: UpdateUserPasswordRequest, O: User },
    { name: "UpdateUserRole", options: {}, I: UpdateUserRoleRequest, O: User },
    { name: "DeleteUser", options: {}, I: DeleteUserRequest, O: Empty }
]);
/**
 * @generated ServiceType for protobuf service employee_management.FileService
 */
export const FileService = new ServiceType("employee_management.FileService", [
    { name: "GetFile", options: {}, I: GetFileRequest, O: File },
    { name: "UpdateFile", options: {}, I: UpdateFileRequest, O: File },
    { name: "DeleteFile", options: {}, I: DeleteFileRequest, O: Empty }
]);
/**
 * @generated ServiceType for protobuf service employee_management.EmployeeService
 */
export const EmployeeService = new ServiceType("employee_management.EmployeeService", [
    { name: "InsertEmployee", options: {}, I: InsertEmployeeRequest, O: Employee },
    { name: "GetEmployee", options: {}, I: GetEmployeeRequest, O: Employee },
    { name: "UpdateEmployee", options: {}, I: UpdateEmployeeRequest, O: Employee },
    { name: "DeleteEmployee", options: {}, I: DeleteEmployeeRequest, O: Empty }
]);
/**
 * @generated ServiceType for protobuf service employee_management.TaskService
 */
export const TaskService = new ServiceType("employee_management.TaskService", [
    { name: "InsertTask", options: {}, I: InsertTaskRequest, O: Task },
    { name: "GetTask", options: {}, I: GetTaskRequest, O: Task },
    { name: "UpdateTask", options: {}, I: UpdateTaskRequest, O: Task },
    { name: "DeleteTask", options: {}, I: DeleteTaskRequest, O: Empty }
]);
/**
 * @generated ServiceType for protobuf service employee_management.TaskCommentService
 */
export const TaskCommentService = new ServiceType("employee_management.TaskCommentService", [
    { name: "InsertTaskComment", options: {}, I: InsertTaskCommentRequest, O: TaskComment },
    { name: "GetTaskComment", options: {}, I: GetTaskCommentRequest, O: TaskComment },
    { name: "UpdateTaskComment", options: {}, I: UpdateTaskCommentRequest, O: TaskComment },
    { name: "DeleteTaskComment", options: {}, I: DeleteTaskCommentRequest, O: Empty }
]);
