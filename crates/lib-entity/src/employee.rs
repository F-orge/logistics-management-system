//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.6

use super::sea_orm_active_enums::EmployeeContractType;
use super::sea_orm_active_enums::EmployeeRole;
use super::sea_orm_active_enums::EmployeeStatus;
use sea_orm::entity::prelude::*;
use crate::department;
use crate::emergency_information;
use crate::job_information;

impl Into<lib_proto::Department> for department::Model{
    fn into(self) -> lib_proto::Department {
        lib_proto::Department {
            id: self.id.to_string(),
            name: self.name.to_string(),
            description: self.description,
            employee_ids: self.employee_ids.iter().map(|id| id.to_string()).collect(),
        }
    }
}

impl Into<lib_proto::JobInformation> for job_information::Model{
    fn into(self) -> lib_proto::JobInformation {
        lib_proto::JobInformation {
            id: self.id.to_string(),
            title: self.title.to_string(),
            employee_id: self.employee_id.to_string(),
            department_id: self.department_id.to_string(),
            supervisor_id: self.supervisor_id.to_string(),
            work_location: self.work_location.to_string(),
            start_date: self.start_date.to_string(),
            salary: self.salary.to_string(),
            currency: self.currency.to_string(),
        }
    }
}

impl Into<lib_proto::EmployeeEmergencyInformation> for emergency_information::Model{
    fn into(self) -> lib_proto::EmployeeEmergencyInformation {
        lib_proto::EmployeeEmergencyInformation {
            id: self.id.to_string(),
            employee_id: self.employee_id.to_string(),
            address: self.address.unwrap_or_default(),
            tel_number: self.tel_number,
            mobile_number: self.mobile_number,
            contact_name: self.contact_name,
            health_conditions: self.health_conditions.unwrap_or_default(),
        }
    }
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(schema_name = "logistics", table_name = "employee")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub avatar_id: Option<Uuid>,
    pub cover_photo_id: Option<Uuid>,
    pub first_name: String,
    pub middle_name: String,
    pub last_name: String,
    pub tel_number: Option<String>,
    pub mobile_number: Option<String>,
    #[sea_orm(unique)]
    pub email: Option<String>,
    pub role: EmployeeRole,
    pub status: EmployeeStatus,
    pub contract_type: EmployeeContractType,
    pub phil_nat_id: String,
    pub birth_date: Date,
    pub special_interests: Option<Vec<String>>,
    pub learning_institutions: Vec<String>,
    pub auth_user_id: Option<Uuid>,
    pub spouse_first_name: Option<String>,
    pub spouse_middle_name: Option<String>,
    pub spouse_last_name: Option<String>,
    pub spouse_employer: Option<String>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::department_employees::Entity")]
    DepartmentEmployees,
    #[sea_orm(has_many = "super::emergency_information::Entity")]
    EmergencyInformation,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::AuthUserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::department_employees::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DepartmentEmployees.def()
    }
}

impl Related<super::emergency_information::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EmergencyInformation.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::department::Entity> for Entity {
    fn to() -> RelationDef {
        super::department_employees::Relation::Department.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::department_employees::Relation::Employee.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
