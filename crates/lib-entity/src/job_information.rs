//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.6

use sea_orm::entity::prelude::*;


#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(schema_name = "logistics", table_name = "job_information")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub title: String,
    pub employee_id: Uuid,
    pub department_id: Uuid,
    pub supervisor_id: Uuid,
    pub work_location: String,
    pub start_date: Date,
    pub salary: Decimal,
    pub currency: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::department::Entity",
        from = "Column::DepartmentId",
        to = "super::department::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Department,
    #[sea_orm(
        belongs_to = "super::employee::Entity",
        from = "Column::EmployeeId",
        to = "super::employee::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Employee2,
    #[sea_orm(
        belongs_to = "super::employee::Entity",
        from = "Column::SupervisorId",
        to = "super::employee::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Employee1,
}

impl Related<super::department::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Department.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
