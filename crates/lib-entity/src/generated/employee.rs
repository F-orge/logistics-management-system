//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.6

use super::sea_orm_active_enums::EmployeeContractType;
use super::sea_orm_active_enums::EmployeeStatus;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa :: ToSchema,
)]
#[sea_orm(schema_name = "logistics", table_name = "employee")]
#[schema(as = EmployeeModel)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub first_name: String,
    pub last_name: String,
    #[sea_orm(unique)]
    pub email: String,
    #[sea_orm(unique)]
    pub phone: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub address: Option<String>,
    pub status: EmployeeStatus,
    pub cotract_type: EmployeeContractType,
    pub hire_date: Date,
    pub department_id: Uuid,
    pub position_id: Uuid,
    pub supervisor_id: Option<Uuid>,
    pub created: DateTime,
    pub updated: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::department::Entity",
        from = "Column::DepartmentId",
        to = "super::department::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Department,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::SupervisorId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::position::Entity",
        from = "Column::PositionId",
        to = "super::position::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Position,
    #[sea_orm(has_many = "super::task_messages::Entity")]
    TaskMessages,
}

impl Related<super::department::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Department.def()
    }
}

impl Related<super::position::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Position.def()
    }
}

impl Related<super::task_messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TaskMessages.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
