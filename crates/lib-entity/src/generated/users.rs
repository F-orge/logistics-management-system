//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.6

use super::sea_orm_active_enums::AuthType;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa :: ToSchema,
)]
#[sea_orm(schema_name = "logistics", table_name = "users")]
#[schema(as = FileModel)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub auth_type: AuthType,
    #[sea_orm(unique)]
    pub email: String,
    #[sea_orm(column_name = "_password")]
    #[serde(skip)]
    pub password: String,
    pub created: DateTime,
    pub updated: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::department::Entity")]
    Department,
    #[sea_orm(has_many = "super::file::Entity")]
    File,
    #[sea_orm(has_many = "super::permissions::Entity")]
    Permissions,
}

impl Related<super::department::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Department.def()
    }
}

impl Related<super::file::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::File.def()
    }
}

impl Related<super::permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Permissions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
