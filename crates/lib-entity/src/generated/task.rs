//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa :: ToSchema,
)]
#[sea_orm(schema_name = "logistics", table_name = "task")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub task_name: String,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    pub assigned_by: Uuid,
    pub assigned_to: Uuid,
    pub start_date: Date,
    pub due_date: Date,
    pub priority: String,
    pub status: String,
    pub created: DateTime,
    pub updated: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::employee::Entity",
        from = "Column::AssignedBy",
        to = "super::employee::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Employee2,
    #[sea_orm(
        belongs_to = "super::employee::Entity",
        from = "Column::AssignedTo",
        to = "super::employee::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Employee1,
    #[sea_orm(has_many = "super::task_messages::Entity")]
    TaskMessages,
}

impl Related<super::task_messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TaskMessages.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
