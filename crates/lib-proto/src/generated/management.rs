// This file is @generated by prost-build.
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Employee {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub avatar_photo: ::core::option::Option<super::storage::FileMetadata>,
    #[prost(message, optional, tag = "3")]
    pub cover_photo: ::core::option::Option<super::storage::FileMetadata>,
    #[prost(string, tag = "4")]
    pub first_name: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub middle_name: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub last_name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "7")]
    pub tel_number: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub mobile_number: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "9")]
    pub email: ::prost::alloc::string::String,
    #[prost(enumeration = "EmployeeRole", tag = "10")]
    pub role: i32,
    #[prost(enumeration = "EmployeeStatus", tag = "11")]
    pub status: i32,
    #[prost(enumeration = "EmployeeContractType", tag = "12")]
    pub contract_type: i32,
    #[prost(string, tag = "13")]
    pub phil_nat_id: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub birth_date: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "15")]
    pub special_interests: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "16")]
    pub learning_institutions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "17")]
    pub auth_user_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "18")]
    pub spouse_first_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "19")]
    pub spouse_middle_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "20")]
    pub spouse_last_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "21")]
    pub spouse_employer: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Department {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "4")]
    pub employee_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JobInformation {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub employee_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub department_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub supervisor_id: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub work_location: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub start_date: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub salary: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub currency: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmployeeEmergencyInformation {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub address: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "4")]
    pub tel_number: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub mobile_number: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "6")]
    pub health_conditions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "7")]
    pub contact_name: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PersonnelAction {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
    #[prost(enumeration = "EmployeePanActionType", tag = "3")]
    pub action_type: i32,
    #[prost(string, tag = "4")]
    pub old_value: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub new_value: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub effective_date: ::prost::alloc::string::String,
    #[prost(enumeration = "EmployeePanActionStatus", tag = "7")]
    pub status: i32,
    #[prost(string, tag = "8")]
    pub requested_by: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub approved_by: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateEmployeeRequest {
    #[prost(message, optional, tag = "1")]
    pub avatar_photo: ::core::option::Option<super::storage::FileMetadata>,
    #[prost(message, optional, tag = "2")]
    pub cover_photo: ::core::option::Option<super::storage::FileMetadata>,
    #[prost(string, tag = "3")]
    pub first_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub middle_name: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub last_name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "6")]
    pub tel_number: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub mobile_number: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "8")]
    pub email: ::prost::alloc::string::String,
    #[prost(enumeration = "EmployeeStatus", tag = "9")]
    pub status: i32,
    #[prost(enumeration = "EmployeeContractType", tag = "10")]
    pub contract_type: i32,
    #[prost(string, tag = "11")]
    pub phil_nat_id: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub birth_date: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "13")]
    pub special_interests: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "14")]
    pub learning_institutions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "15")]
    pub spouse_first_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "16")]
    pub spouse_middle_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "17")]
    pub spouse_last_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "18")]
    pub spouse_employer: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEmployeeRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEmployeesByDepartmentRequest {
    #[prost(string, tag = "1")]
    pub department_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmployeeAvatarRequest {
    #[prost(message, optional, tag = "1")]
    pub avatar_photo: ::core::option::Option<super::storage::FileMetadata>,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmployeeCoverPhotoRequest {
    #[prost(message, optional, tag = "1")]
    pub cover_photo: ::core::option::Option<super::storage::FileMetadata>,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmployeeFirstNameRequest {
    #[prost(string, tag = "1")]
    pub first_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmployeeMiddleNameRequest {
    #[prost(string, tag = "1")]
    pub middle_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmployeeLastNameRequest {
    #[prost(string, tag = "1")]
    pub last_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmployeeTelNumberRequest {
    #[prost(string, tag = "1")]
    pub tel_number: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmployeeMobileNumberRequest {
    #[prost(string, tag = "1")]
    pub mobile_number: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmployeeEmailRequest {
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmployeeRoleRequest {
    #[prost(enumeration = "EmployeeRole", tag = "1")]
    pub role: i32,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmployeeStatusRequest {
    #[prost(enumeration = "EmployeeStatus", tag = "1")]
    pub status: i32,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmployeeContractTypeRequest {
    #[prost(enumeration = "EmployeeContractType", tag = "1")]
    pub contract_type: i32,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangePhilNatIdRequest {
    #[prost(string, tag = "1")]
    pub phil_nat_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeBirthDateRequest {
    #[prost(string, tag = "1")]
    pub birth_date: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddSpecialInterestRequest {
    #[prost(string, tag = "1")]
    pub special_interest: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveSpecialInterestRequest {
    #[prost(string, tag = "1")]
    pub special_interest: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddLearningInstitutionRequest {
    #[prost(string, tag = "1")]
    pub learning_institution: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveLearningInstitutionRequest {
    #[prost(string, tag = "1")]
    pub learning_institution: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeSpouseFirstNameRequest {
    #[prost(string, tag = "1")]
    pub spouse_first_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeSpouseMiddleNameRequest {
    #[prost(string, tag = "1")]
    pub spouse_middle_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeSpouseLastNameRequest {
    #[prost(string, tag = "1")]
    pub spouse_last_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeSpouseEmployerRequest {
    #[prost(string, tag = "1")]
    pub spouse_employer: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveEmployeeRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateDepartmentRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddEmployeeToDepartmentRequest {
    #[prost(string, tag = "1")]
    pub employee_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub department_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveEmployeeFromDepartmentRequest {
    #[prost(string, tag = "1")]
    pub employee_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub department_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDepartmentRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateDepartmentNameRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateDepartmentDescriptionRequest {
    #[prost(string, tag = "1")]
    pub description: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveDepartmentRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateJobInformationRequest {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub employee_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub department_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub supervisor_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub work_location: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub start_date: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub salary: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub currency: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetJobInformationRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeJobTitleRequest {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeJobDepartmentRequest {
    #[prost(string, tag = "1")]
    pub department_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeJobSupervisorRequest {
    #[prost(string, tag = "1")]
    pub supervisor_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeJobWorkLocationRequest {
    #[prost(string, tag = "1")]
    pub work_location: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeJobStartDateRequest {
    #[prost(string, tag = "1")]
    pub start_date: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeJobSalaryRequest {
    #[prost(string, tag = "1")]
    pub salary: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeJobCurrencyRequest {
    #[prost(string, tag = "1")]
    pub currency: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveJobInformationRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateEmergencyInformationRequest {
    #[prost(string, tag = "1")]
    pub employee_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub tel_number: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub mobile_number: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "5")]
    pub health_conditions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "6")]
    pub contact_name: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEmergencyInformationRequest {
    #[prost(string, tag = "1")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmergencyInformationAddressRequest {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmergencyInformationTelNumberRequest {
    #[prost(string, tag = "1")]
    pub tel_number: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmergencyInformationMobileNumberRequest {
    #[prost(string, tag = "1")]
    pub mobile_number: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeEmergencyInformationContactNameRequest {
    #[prost(string, tag = "1")]
    pub contact_name: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveEmergencyInformationRequest {
    #[prost(string, tag = "1")]
    pub employee_id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddEmergencyInformationHealthConditionRequest {
    #[prost(string, tag = "1")]
    pub health_condition: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveEmergencyInformationHealthConditionRequest {
    #[prost(string, tag = "1")]
    pub health_condition: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePanRequest {
    #[prost(string, tag = "1")]
    pub employee_id: ::prost::alloc::string::String,
    #[prost(enumeration = "EmployeePanActionType", tag = "2")]
    pub action_type: i32,
    #[prost(string, tag = "3")]
    pub old_value: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub new_value: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub effective_date: ::prost::alloc::string::String,
    #[prost(enumeration = "EmployeePanActionStatus", tag = "6")]
    pub status: i32,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPanInformationRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangePanActionTypeRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(enumeration = "EmployeePanActionType", tag = "2")]
    pub action_type: i32,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangePanOldValueRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub old_value: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangePanNewValueRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub new_value: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangePanEffectiveDateRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub effective_date: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApprovePanRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RejectPanRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(sqlx::FromRow)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemovePanInformationRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EmployeeMaritalStatus {
    MaritAlStatusSingle = 0,
    MaritAlStatusMarried = 1,
    MaritAlStatusDivorced = 2,
    MaritAlStatusWidowed = 3,
    MaritAlStatusSeperated = 4,
}
impl EmployeeMaritalStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MaritAlStatusSingle => "MARITAl_STATUS_SINGLE",
            Self::MaritAlStatusMarried => "MARITAl_STATUS_MARRIED",
            Self::MaritAlStatusDivorced => "MARITAl_STATUS_DIVORCED",
            Self::MaritAlStatusWidowed => "MARITAl_STATUS_WIDOWED",
            Self::MaritAlStatusSeperated => "MARITAl_STATUS_SEPERATED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MARITAl_STATUS_SINGLE" => Some(Self::MaritAlStatusSingle),
            "MARITAl_STATUS_MARRIED" => Some(Self::MaritAlStatusMarried),
            "MARITAl_STATUS_DIVORCED" => Some(Self::MaritAlStatusDivorced),
            "MARITAl_STATUS_WIDOWED" => Some(Self::MaritAlStatusWidowed),
            "MARITAl_STATUS_SEPERATED" => Some(Self::MaritAlStatusSeperated),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EmployeeRole {
    RoleSuperAdmin = 0,
    RoleManager = 1,
    RoleEmployee = 2,
}
impl EmployeeRole {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RoleSuperAdmin => "ROLE_SUPER_ADMIN",
            Self::RoleManager => "ROLE_MANAGER",
            Self::RoleEmployee => "ROLE_EMPLOYEE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROLE_SUPER_ADMIN" => Some(Self::RoleSuperAdmin),
            "ROLE_MANAGER" => Some(Self::RoleManager),
            "ROLE_EMPLOYEE" => Some(Self::RoleEmployee),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EmployeePanActionType {
    Hire = 0,
    Promotion = 1,
    SalaryAdjustment = 2,
    Termination = 3,
    Leave = 4,
    Transfer = 5,
}
impl EmployeePanActionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Hire => "EMPLOYEE_PAN_ACTION_TYPE_HIRE",
            Self::Promotion => "EMPLOYEE_PAN_ACTION_TYPE_PROMOTION",
            Self::SalaryAdjustment => "EMPLOYEE_PAN_ACTION_TYPE_SALARY_ADJUSTMENT",
            Self::Termination => "EMPLOYEE_PAN_ACTION_TYPE_TERMINATION",
            Self::Leave => "EMPLOYEE_PAN_ACTION_TYPE_LEAVE",
            Self::Transfer => "EMPLOYEE_PAN_ACTION_TYPE_TRANSFER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EMPLOYEE_PAN_ACTION_TYPE_HIRE" => Some(Self::Hire),
            "EMPLOYEE_PAN_ACTION_TYPE_PROMOTION" => Some(Self::Promotion),
            "EMPLOYEE_PAN_ACTION_TYPE_SALARY_ADJUSTMENT" => Some(Self::SalaryAdjustment),
            "EMPLOYEE_PAN_ACTION_TYPE_TERMINATION" => Some(Self::Termination),
            "EMPLOYEE_PAN_ACTION_TYPE_LEAVE" => Some(Self::Leave),
            "EMPLOYEE_PAN_ACTION_TYPE_TRANSFER" => Some(Self::Transfer),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EmployeePanActionStatus {
    Pending = 0,
    Approved = 1,
    Rejected = 2,
}
impl EmployeePanActionStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Pending => "EMPLOYEE_PAN_ACTION_STATUS_PENDING",
            Self::Approved => "EMPLOYEE_PAN_ACTION_STATUS_APPROVED",
            Self::Rejected => "EMPLOYEE_PAN_ACTION_STATUS_REJECTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EMPLOYEE_PAN_ACTION_STATUS_PENDING" => Some(Self::Pending),
            "EMPLOYEE_PAN_ACTION_STATUS_APPROVED" => Some(Self::Approved),
            "EMPLOYEE_PAN_ACTION_STATUS_REJECTED" => Some(Self::Rejected),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EmployeeStatus {
    Active = 0,
    Inactive = 1,
}
impl EmployeeStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Active => "EMPLOYEE_STATUS_ACTIVE",
            Self::Inactive => "EMPLOYEE_STATUS_INACTIVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EMPLOYEE_STATUS_ACTIVE" => Some(Self::Active),
            "EMPLOYEE_STATUS_INACTIVE" => Some(Self::Inactive),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EmployeeContractType {
    ContractTypeFullTime = 0,
    ContractTypePartTime = 1,
}
impl EmployeeContractType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ContractTypeFullTime => "CONTRACT_TYPE_FULL_TIME",
            Self::ContractTypePartTime => "CONTRACT_TYPE_PART_TIME",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CONTRACT_TYPE_FULL_TIME" => Some(Self::ContractTypeFullTime),
            "CONTRACT_TYPE_PART_TIME" => Some(Self::ContractTypePartTime),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod human_resource_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct HumanResourceServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl HumanResourceServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> HumanResourceServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> HumanResourceServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            HumanResourceServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// -- insert
        pub async fn create_employee(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateEmployeeRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/CreateEmployee",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("management.HumanResourceService", "CreateEmployee"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_manager(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateEmployeeRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/CreateManager",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("management.HumanResourceService", "CreateManager"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_admin(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateEmployeeRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/CreateAdmin",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("management.HumanResourceService", "CreateAdmin"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn add_special_interest(
            &mut self,
            request: impl tonic::IntoRequest<super::AddSpecialInterestRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/AddSpecialInterest",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "AddSpecialInterest",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn add_learning_institution(
            &mut self,
            request: impl tonic::IntoRequest<super::AddLearningInstitutionRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/AddLearningInstitution",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "AddLearningInstitution",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// -- read
        pub async fn get_employee(
            &mut self,
            request: impl tonic::IntoRequest<super::GetEmployeeRequest>,
        ) -> std::result::Result<tonic::Response<super::Employee>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/GetEmployee",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("management.HumanResourceService", "GetEmployee"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_employees_by_department(
            &mut self,
            request: impl tonic::IntoRequest<super::GetEmployeesByDepartmentRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::Employee>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/GetEmployeesByDepartment",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "GetEmployeesByDepartment",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// -- update
        pub async fn change_employee_avatar(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeEmployeeAvatarRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeEmployeeAvatar",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeEmployeeAvatar",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_employee_cover_photo(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeEmployeeCoverPhotoRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeEmployeeCoverPhoto",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeEmployeeCoverPhoto",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_employee_first_name(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeEmployeeFirstNameRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeEmployeeFirstName",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeEmployeeFirstName",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_employee_middle_name(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeEmployeeMiddleNameRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeEmployeeMiddleName",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeEmployeeMiddleName",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_employee_last_name(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeEmployeeLastNameRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeEmployeeLastName",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeEmployeeLastName",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_employee_tel_number(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeEmployeeTelNumberRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeEmployeeTelNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeEmployeeTelNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_employee_mobile_number(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeEmployeeMobileNumberRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeEmployeeMobileNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeEmployeeMobileNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_employee_email(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeEmployeeEmailRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeEmployeeEmail",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeEmployeeEmail",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_employee_role(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeEmployeeRoleRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeEmployeeRole",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeEmployeeRole",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_employee_status(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeEmployeeStatusRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeEmployeeStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeEmployeeStatus",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_employee_contract_type(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeEmployeeContractTypeRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeEmployeeContractType",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeEmployeeContractType",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_phil_nat_id(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangePhilNatIdRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangePhilNatID",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("management.HumanResourceService", "ChangePhilNatID"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_birth_date(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeBirthDateRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeBirthDate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("management.HumanResourceService", "ChangeBirthDate"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_spouse_first_name(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeSpouseFirstNameRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeSpouseFirstName",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeSpouseFirstName",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_spouse_middle_name(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeSpouseMiddleNameRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeSpouseMiddleName",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeSpouseMiddleName",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_spouse_last_name(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeSpouseLastNameRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeSpouseLastName",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeSpouseLastName",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_spouse_employer(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeSpouseEmployerRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeSpouseEmployer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeSpouseEmployer",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// -- delete
        pub async fn remove_employee(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveEmployeeRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/RemoveEmployee",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("management.HumanResourceService", "RemoveEmployee"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn remove_special_interest(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveSpecialInterestRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/RemoveSpecialInterest",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "RemoveSpecialInterest",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn remove_learning_institition(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveLearningInstitutionRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/RemoveLearningInstitition",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "RemoveLearningInstitition",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// -- insert
        pub async fn create_department(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateDepartmentRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/CreateDepartment",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "CreateDepartment",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn add_employee_to_department(
            &mut self,
            request: impl tonic::IntoRequest<super::AddEmployeeToDepartmentRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/AddEmployeeToDepartment",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "AddEmployeeToDepartment",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// -- read
        pub async fn get_department(
            &mut self,
            request: impl tonic::IntoRequest<super::GetDepartmentRequest>,
        ) -> std::result::Result<tonic::Response<super::Department>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/GetDepartment",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("management.HumanResourceService", "GetDepartment"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// -- update
        pub async fn update_department_name(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateDepartmentNameRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/UpdateDepartmentName",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "UpdateDepartmentName",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_department_description(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateDepartmentDescriptionRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/UpdateDepartmentDescription",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "UpdateDepartmentDescription",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// -- delete
        pub async fn remove_department(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveDepartmentRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/RemoveDepartment",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "RemoveDepartment",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn remove_employee_to_department(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveEmployeeFromDepartmentRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/RemoveEmployeeToDepartment",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "RemoveEmployeeToDepartment",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// job information
        /// -- insert
        pub async fn create_job_information(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateJobInformationRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/CreateJobInformation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "CreateJobInformation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// -- read
        pub async fn get_job_information(
            &mut self,
            request: impl tonic::IntoRequest<super::GetJobInformationRequest>,
        ) -> std::result::Result<tonic::Response<super::JobInformation>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/GetJobInformation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "GetJobInformation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// -- update
        pub async fn change_job_title(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeJobTitleRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeJobTitle",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("management.HumanResourceService", "ChangeJobTitle"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_job_department(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeJobDepartmentRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeJobDepartment",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeJobDepartment",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_job_supervisor(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeJobSupervisorRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeJobSupervisor",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeJobSupervisor",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_job_work_location(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeJobWorkLocationRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeJobWorkLocation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeJobWorkLocation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_job_start_date(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeJobStartDateRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeJobStartDate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeJobStartDate",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_job_salary(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeJobSalaryRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeJobSalary",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("management.HumanResourceService", "ChangeJobSalary"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_job_currency(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangeJobCurrencyRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeJobCurrency",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeJobCurrency",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// -- delete
        pub async fn remove_job_information(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveJobInformationRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/RemoveJobInformation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "RemoveJobInformation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// -- insert
        pub async fn create_emergency_information(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateEmergencyInformationRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/CreateEmergencyInformation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "CreateEmergencyInformation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn add_emergency_information_health_condition(
            &mut self,
            request: impl tonic::IntoRequest<
                super::AddEmergencyInformationHealthConditionRequest,
            >,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/AddEmergencyInformationHealthCondition",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "AddEmergencyInformationHealthCondition",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// -- read
        pub async fn get_emergency_information(
            &mut self,
            request: impl tonic::IntoRequest<super::GetEmergencyInformationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::EmployeeEmergencyInformation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/GetEmergencyInformation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "GetEmergencyInformation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// -- update
        pub async fn change_emergency_information_address(
            &mut self,
            request: impl tonic::IntoRequest<
                super::ChangeEmergencyInformationAddressRequest,
            >,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeEmergencyInformationAddress",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeEmergencyInformationAddress",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_emergency_information_tel_number(
            &mut self,
            request: impl tonic::IntoRequest<
                super::ChangeEmergencyInformationTelNumberRequest,
            >,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeEmergencyInformationTelNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeEmergencyInformationTelNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_emergency_information_mobile_number(
            &mut self,
            request: impl tonic::IntoRequest<
                super::ChangeEmergencyInformationMobileNumberRequest,
            >,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeEmergencyInformationMobileNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeEmergencyInformationMobileNumber",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_emergency_information_contact_name(
            &mut self,
            request: impl tonic::IntoRequest<
                super::ChangeEmergencyInformationContactNameRequest,
            >,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangeEmergencyInformationContactName",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangeEmergencyInformationContactName",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// -- delete
        pub async fn remove_emergency_information(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveEmergencyInformationRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/RemoveEmergencyInformation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "RemoveEmergencyInformation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn remove_emergency_information_health_condition(
            &mut self,
            request: impl tonic::IntoRequest<
                super::RemoveEmergencyInformationHealthConditionRequest,
            >,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/RemoveEmergencyInformationHealthCondition",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "RemoveEmergencyInformationHealthCondition",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// -- insert
        pub async fn create_pan_employee_request(
            &mut self,
            request: impl tonic::IntoRequest<super::CreatePanRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/CreatePANEmployeeRequest",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "CreatePANEmployeeRequest",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// -- read
        pub async fn get_pan_information(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPanInformationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PersonnelAction>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/GetPANInformation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "GetPANInformation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// -- update
        pub async fn change_pan_action_type(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangePanActionTypeRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangePANActionType",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangePANActionType",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_pan_old_value(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangePanOldValueRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangePANOldValue",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangePANOldValue",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_pan_new_value(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangePanNewValueRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangePANNewValue",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangePANNewValue",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn change_pan_effective_date(
            &mut self,
            request: impl tonic::IntoRequest<super::ChangePanEffectiveDateRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ChangePANEffectiveDate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "ChangePANEffectiveDate",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn approve_pan(
            &mut self,
            request: impl tonic::IntoRequest<super::ApprovePanRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/ApprovePAN",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("management.HumanResourceService", "ApprovePAN"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn reject_pan(
            &mut self,
            request: impl tonic::IntoRequest<super::RejectPanRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/RejectPAN",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("management.HumanResourceService", "RejectPAN"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn remove_pan_information(
            &mut self,
            request: impl tonic::IntoRequest<super::RemovePanInformationRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/management.HumanResourceService/RemovePANInformation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "management.HumanResourceService",
                        "RemovePANInformation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod human_resource_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with HumanResourceServiceServer.
    #[async_trait]
    pub trait HumanResourceService: std::marker::Send + std::marker::Sync + 'static {
        /// -- insert
        async fn create_employee(
            &self,
            request: tonic::Request<super::CreateEmployeeRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn create_manager(
            &self,
            request: tonic::Request<super::CreateEmployeeRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn create_admin(
            &self,
            request: tonic::Request<super::CreateEmployeeRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn add_special_interest(
            &self,
            request: tonic::Request<super::AddSpecialInterestRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn add_learning_institution(
            &self,
            request: tonic::Request<super::AddLearningInstitutionRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// -- read
        async fn get_employee(
            &self,
            request: tonic::Request<super::GetEmployeeRequest>,
        ) -> std::result::Result<tonic::Response<super::Employee>, tonic::Status>;
        /// Server streaming response type for the GetEmployeesByDepartment method.
        type GetEmployeesByDepartmentStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::Employee, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn get_employees_by_department(
            &self,
            request: tonic::Request<super::GetEmployeesByDepartmentRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::GetEmployeesByDepartmentStream>,
            tonic::Status,
        >;
        /// -- update
        async fn change_employee_avatar(
            &self,
            request: tonic::Request<super::ChangeEmployeeAvatarRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_employee_cover_photo(
            &self,
            request: tonic::Request<super::ChangeEmployeeCoverPhotoRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_employee_first_name(
            &self,
            request: tonic::Request<super::ChangeEmployeeFirstNameRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_employee_middle_name(
            &self,
            request: tonic::Request<super::ChangeEmployeeMiddleNameRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_employee_last_name(
            &self,
            request: tonic::Request<super::ChangeEmployeeLastNameRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_employee_tel_number(
            &self,
            request: tonic::Request<super::ChangeEmployeeTelNumberRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_employee_mobile_number(
            &self,
            request: tonic::Request<super::ChangeEmployeeMobileNumberRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_employee_email(
            &self,
            request: tonic::Request<super::ChangeEmployeeEmailRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_employee_role(
            &self,
            request: tonic::Request<super::ChangeEmployeeRoleRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_employee_status(
            &self,
            request: tonic::Request<super::ChangeEmployeeStatusRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_employee_contract_type(
            &self,
            request: tonic::Request<super::ChangeEmployeeContractTypeRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_phil_nat_id(
            &self,
            request: tonic::Request<super::ChangePhilNatIdRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_birth_date(
            &self,
            request: tonic::Request<super::ChangeBirthDateRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_spouse_first_name(
            &self,
            request: tonic::Request<super::ChangeSpouseFirstNameRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_spouse_middle_name(
            &self,
            request: tonic::Request<super::ChangeSpouseMiddleNameRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_spouse_last_name(
            &self,
            request: tonic::Request<super::ChangeSpouseLastNameRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_spouse_employer(
            &self,
            request: tonic::Request<super::ChangeSpouseEmployerRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// -- delete
        async fn remove_employee(
            &self,
            request: tonic::Request<super::RemoveEmployeeRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn remove_special_interest(
            &self,
            request: tonic::Request<super::RemoveSpecialInterestRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn remove_learning_institition(
            &self,
            request: tonic::Request<super::RemoveLearningInstitutionRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// -- insert
        async fn create_department(
            &self,
            request: tonic::Request<super::CreateDepartmentRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn add_employee_to_department(
            &self,
            request: tonic::Request<super::AddEmployeeToDepartmentRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// -- read
        async fn get_department(
            &self,
            request: tonic::Request<super::GetDepartmentRequest>,
        ) -> std::result::Result<tonic::Response<super::Department>, tonic::Status>;
        /// -- update
        async fn update_department_name(
            &self,
            request: tonic::Request<super::UpdateDepartmentNameRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn update_department_description(
            &self,
            request: tonic::Request<super::UpdateDepartmentDescriptionRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// -- delete
        async fn remove_department(
            &self,
            request: tonic::Request<super::RemoveDepartmentRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn remove_employee_to_department(
            &self,
            request: tonic::Request<super::RemoveEmployeeFromDepartmentRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// job information
        /// -- insert
        async fn create_job_information(
            &self,
            request: tonic::Request<super::CreateJobInformationRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// -- read
        async fn get_job_information(
            &self,
            request: tonic::Request<super::GetJobInformationRequest>,
        ) -> std::result::Result<tonic::Response<super::JobInformation>, tonic::Status>;
        /// -- update
        async fn change_job_title(
            &self,
            request: tonic::Request<super::ChangeJobTitleRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_job_department(
            &self,
            request: tonic::Request<super::ChangeJobDepartmentRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_job_supervisor(
            &self,
            request: tonic::Request<super::ChangeJobSupervisorRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_job_work_location(
            &self,
            request: tonic::Request<super::ChangeJobWorkLocationRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_job_start_date(
            &self,
            request: tonic::Request<super::ChangeJobStartDateRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_job_salary(
            &self,
            request: tonic::Request<super::ChangeJobSalaryRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_job_currency(
            &self,
            request: tonic::Request<super::ChangeJobCurrencyRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// -- delete
        async fn remove_job_information(
            &self,
            request: tonic::Request<super::RemoveJobInformationRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// -- insert
        async fn create_emergency_information(
            &self,
            request: tonic::Request<super::CreateEmergencyInformationRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn add_emergency_information_health_condition(
            &self,
            request: tonic::Request<super::AddEmergencyInformationHealthConditionRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// -- read
        async fn get_emergency_information(
            &self,
            request: tonic::Request<super::GetEmergencyInformationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::EmployeeEmergencyInformation>,
            tonic::Status,
        >;
        /// -- update
        async fn change_emergency_information_address(
            &self,
            request: tonic::Request<super::ChangeEmergencyInformationAddressRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_emergency_information_tel_number(
            &self,
            request: tonic::Request<super::ChangeEmergencyInformationTelNumberRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_emergency_information_mobile_number(
            &self,
            request: tonic::Request<super::ChangeEmergencyInformationMobileNumberRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_emergency_information_contact_name(
            &self,
            request: tonic::Request<super::ChangeEmergencyInformationContactNameRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// -- delete
        async fn remove_emergency_information(
            &self,
            request: tonic::Request<super::RemoveEmergencyInformationRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn remove_emergency_information_health_condition(
            &self,
            request: tonic::Request<
                super::RemoveEmergencyInformationHealthConditionRequest,
            >,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// -- insert
        async fn create_pan_employee_request(
            &self,
            request: tonic::Request<super::CreatePanRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// -- read
        async fn get_pan_information(
            &self,
            request: tonic::Request<super::GetPanInformationRequest>,
        ) -> std::result::Result<tonic::Response<super::PersonnelAction>, tonic::Status>;
        /// -- update
        async fn change_pan_action_type(
            &self,
            request: tonic::Request<super::ChangePanActionTypeRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_pan_old_value(
            &self,
            request: tonic::Request<super::ChangePanOldValueRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_pan_new_value(
            &self,
            request: tonic::Request<super::ChangePanNewValueRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn change_pan_effective_date(
            &self,
            request: tonic::Request<super::ChangePanEffectiveDateRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn approve_pan(
            &self,
            request: tonic::Request<super::ApprovePanRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn reject_pan(
            &self,
            request: tonic::Request<super::RejectPanRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn remove_pan_information(
            &self,
            request: tonic::Request<super::RemovePanInformationRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct HumanResourceServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> HumanResourceServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for HumanResourceServiceServer<T>
    where
        T: HumanResourceService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/management.HumanResourceService/CreateEmployee" => {
                    #[allow(non_camel_case_types)]
                    struct CreateEmployeeSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::CreateEmployeeRequest>
                    for CreateEmployeeSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateEmployeeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::create_employee(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateEmployeeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/CreateManager" => {
                    #[allow(non_camel_case_types)]
                    struct CreateManagerSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::CreateEmployeeRequest>
                    for CreateManagerSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateEmployeeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::create_manager(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateManagerSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/CreateAdmin" => {
                    #[allow(non_camel_case_types)]
                    struct CreateAdminSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::CreateEmployeeRequest>
                    for CreateAdminSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateEmployeeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::create_admin(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateAdminSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/AddSpecialInterest" => {
                    #[allow(non_camel_case_types)]
                    struct AddSpecialInterestSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::AddSpecialInterestRequest>
                    for AddSpecialInterestSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddSpecialInterestRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::add_special_interest(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddSpecialInterestSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/AddLearningInstitution" => {
                    #[allow(non_camel_case_types)]
                    struct AddLearningInstitutionSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::AddLearningInstitutionRequest>
                    for AddLearningInstitutionSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddLearningInstitutionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::add_learning_institution(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddLearningInstitutionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/GetEmployee" => {
                    #[allow(non_camel_case_types)]
                    struct GetEmployeeSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::GetEmployeeRequest>
                    for GetEmployeeSvc<T> {
                        type Response = super::Employee;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetEmployeeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::get_employee(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetEmployeeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/GetEmployeesByDepartment" => {
                    #[allow(non_camel_case_types)]
                    struct GetEmployeesByDepartmentSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::ServerStreamingService<
                        super::GetEmployeesByDepartmentRequest,
                    > for GetEmployeesByDepartmentSvc<T> {
                        type Response = super::Employee;
                        type ResponseStream = T::GetEmployeesByDepartmentStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetEmployeesByDepartmentRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::get_employees_by_department(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetEmployeesByDepartmentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeEmployeeAvatar" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmployeeAvatarSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeEmployeeAvatarRequest>
                    for ChangeEmployeeAvatarSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeEmployeeAvatarRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_employee_avatar(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmployeeAvatarSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeEmployeeCoverPhoto" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmployeeCoverPhotoSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeEmployeeCoverPhotoRequest>
                    for ChangeEmployeeCoverPhotoSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ChangeEmployeeCoverPhotoRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_employee_cover_photo(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmployeeCoverPhotoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeEmployeeFirstName" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmployeeFirstNameSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeEmployeeFirstNameRequest>
                    for ChangeEmployeeFirstNameSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ChangeEmployeeFirstNameRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_employee_first_name(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmployeeFirstNameSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeEmployeeMiddleName" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmployeeMiddleNameSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeEmployeeMiddleNameRequest>
                    for ChangeEmployeeMiddleNameSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ChangeEmployeeMiddleNameRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_employee_middle_name(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmployeeMiddleNameSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeEmployeeLastName" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmployeeLastNameSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeEmployeeLastNameRequest>
                    for ChangeEmployeeLastNameSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeEmployeeLastNameRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_employee_last_name(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmployeeLastNameSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeEmployeeTelNumber" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmployeeTelNumberSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeEmployeeTelNumberRequest>
                    for ChangeEmployeeTelNumberSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ChangeEmployeeTelNumberRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_employee_tel_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmployeeTelNumberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeEmployeeMobileNumber" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmployeeMobileNumberSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<
                        super::ChangeEmployeeMobileNumberRequest,
                    > for ChangeEmployeeMobileNumberSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ChangeEmployeeMobileNumberRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_employee_mobile_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmployeeMobileNumberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeEmployeeEmail" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmployeeEmailSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeEmployeeEmailRequest>
                    for ChangeEmployeeEmailSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeEmployeeEmailRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_employee_email(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmployeeEmailSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeEmployeeRole" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmployeeRoleSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeEmployeeRoleRequest>
                    for ChangeEmployeeRoleSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeEmployeeRoleRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_employee_role(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmployeeRoleSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeEmployeeStatus" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmployeeStatusSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeEmployeeStatusRequest>
                    for ChangeEmployeeStatusSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeEmployeeStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_employee_status(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmployeeStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeEmployeeContractType" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmployeeContractTypeSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<
                        super::ChangeEmployeeContractTypeRequest,
                    > for ChangeEmployeeContractTypeSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ChangeEmployeeContractTypeRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_employee_contract_type(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmployeeContractTypeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangePhilNatID" => {
                    #[allow(non_camel_case_types)]
                    struct ChangePhilNatIDSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangePhilNatIdRequest>
                    for ChangePhilNatIDSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangePhilNatIdRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_phil_nat_id(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangePhilNatIDSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeBirthDate" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeBirthDateSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeBirthDateRequest>
                    for ChangeBirthDateSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeBirthDateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_birth_date(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeBirthDateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeSpouseFirstName" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeSpouseFirstNameSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeSpouseFirstNameRequest>
                    for ChangeSpouseFirstNameSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeSpouseFirstNameRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_spouse_first_name(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeSpouseFirstNameSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeSpouseMiddleName" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeSpouseMiddleNameSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeSpouseMiddleNameRequest>
                    for ChangeSpouseMiddleNameSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeSpouseMiddleNameRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_spouse_middle_name(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeSpouseMiddleNameSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeSpouseLastName" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeSpouseLastNameSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeSpouseLastNameRequest>
                    for ChangeSpouseLastNameSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeSpouseLastNameRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_spouse_last_name(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeSpouseLastNameSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeSpouseEmployer" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeSpouseEmployerSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeSpouseEmployerRequest>
                    for ChangeSpouseEmployerSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeSpouseEmployerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_spouse_employer(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeSpouseEmployerSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/RemoveEmployee" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveEmployeeSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::RemoveEmployeeRequest>
                    for RemoveEmployeeSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemoveEmployeeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::remove_employee(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveEmployeeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/RemoveSpecialInterest" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveSpecialInterestSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::RemoveSpecialInterestRequest>
                    for RemoveSpecialInterestSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemoveSpecialInterestRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::remove_special_interest(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveSpecialInterestSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/RemoveLearningInstitition" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveLearningInstititionSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<
                        super::RemoveLearningInstitutionRequest,
                    > for RemoveLearningInstititionSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::RemoveLearningInstitutionRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::remove_learning_institition(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveLearningInstititionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/CreateDepartment" => {
                    #[allow(non_camel_case_types)]
                    struct CreateDepartmentSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::CreateDepartmentRequest>
                    for CreateDepartmentSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateDepartmentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::create_department(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateDepartmentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/AddEmployeeToDepartment" => {
                    #[allow(non_camel_case_types)]
                    struct AddEmployeeToDepartmentSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::AddEmployeeToDepartmentRequest>
                    for AddEmployeeToDepartmentSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::AddEmployeeToDepartmentRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::add_employee_to_department(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddEmployeeToDepartmentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/GetDepartment" => {
                    #[allow(non_camel_case_types)]
                    struct GetDepartmentSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::GetDepartmentRequest>
                    for GetDepartmentSvc<T> {
                        type Response = super::Department;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetDepartmentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::get_department(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetDepartmentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/UpdateDepartmentName" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateDepartmentNameSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::UpdateDepartmentNameRequest>
                    for UpdateDepartmentNameSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateDepartmentNameRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::update_department_name(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateDepartmentNameSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/UpdateDepartmentDescription" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateDepartmentDescriptionSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<
                        super::UpdateDepartmentDescriptionRequest,
                    > for UpdateDepartmentDescriptionSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::UpdateDepartmentDescriptionRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::update_department_description(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateDepartmentDescriptionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/RemoveDepartment" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveDepartmentSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::RemoveDepartmentRequest>
                    for RemoveDepartmentSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemoveDepartmentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::remove_department(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveDepartmentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/RemoveEmployeeToDepartment" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveEmployeeToDepartmentSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<
                        super::RemoveEmployeeFromDepartmentRequest,
                    > for RemoveEmployeeToDepartmentSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::RemoveEmployeeFromDepartmentRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::remove_employee_to_department(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveEmployeeToDepartmentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/CreateJobInformation" => {
                    #[allow(non_camel_case_types)]
                    struct CreateJobInformationSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::CreateJobInformationRequest>
                    for CreateJobInformationSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateJobInformationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::create_job_information(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateJobInformationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/GetJobInformation" => {
                    #[allow(non_camel_case_types)]
                    struct GetJobInformationSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::GetJobInformationRequest>
                    for GetJobInformationSvc<T> {
                        type Response = super::JobInformation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetJobInformationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::get_job_information(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetJobInformationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeJobTitle" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeJobTitleSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeJobTitleRequest>
                    for ChangeJobTitleSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeJobTitleRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_job_title(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeJobTitleSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeJobDepartment" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeJobDepartmentSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeJobDepartmentRequest>
                    for ChangeJobDepartmentSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeJobDepartmentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_job_department(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeJobDepartmentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeJobSupervisor" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeJobSupervisorSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeJobSupervisorRequest>
                    for ChangeJobSupervisorSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeJobSupervisorRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_job_supervisor(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeJobSupervisorSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeJobWorkLocation" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeJobWorkLocationSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeJobWorkLocationRequest>
                    for ChangeJobWorkLocationSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeJobWorkLocationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_job_work_location(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeJobWorkLocationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeJobStartDate" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeJobStartDateSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeJobStartDateRequest>
                    for ChangeJobStartDateSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeJobStartDateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_job_start_date(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeJobStartDateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeJobSalary" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeJobSalarySvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeJobSalaryRequest>
                    for ChangeJobSalarySvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeJobSalaryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_job_salary(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeJobSalarySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeJobCurrency" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeJobCurrencySvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangeJobCurrencyRequest>
                    for ChangeJobCurrencySvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangeJobCurrencyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_job_currency(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeJobCurrencySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/RemoveJobInformation" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveJobInformationSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::RemoveJobInformationRequest>
                    for RemoveJobInformationSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemoveJobInformationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::remove_job_information(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveJobInformationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/CreateEmergencyInformation" => {
                    #[allow(non_camel_case_types)]
                    struct CreateEmergencyInformationSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<
                        super::CreateEmergencyInformationRequest,
                    > for CreateEmergencyInformationSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::CreateEmergencyInformationRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::create_emergency_information(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateEmergencyInformationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/AddEmergencyInformationHealthCondition" => {
                    #[allow(non_camel_case_types)]
                    struct AddEmergencyInformationHealthConditionSvc<
                        T: HumanResourceService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<
                        super::AddEmergencyInformationHealthConditionRequest,
                    > for AddEmergencyInformationHealthConditionSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::AddEmergencyInformationHealthConditionRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::add_emergency_information_health_condition(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddEmergencyInformationHealthConditionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/GetEmergencyInformation" => {
                    #[allow(non_camel_case_types)]
                    struct GetEmergencyInformationSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::GetEmergencyInformationRequest>
                    for GetEmergencyInformationSvc<T> {
                        type Response = super::EmployeeEmergencyInformation;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetEmergencyInformationRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::get_emergency_information(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetEmergencyInformationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeEmergencyInformationAddress" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmergencyInformationAddressSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<
                        super::ChangeEmergencyInformationAddressRequest,
                    > for ChangeEmergencyInformationAddressSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ChangeEmergencyInformationAddressRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_emergency_information_address(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmergencyInformationAddressSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeEmergencyInformationTelNumber" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmergencyInformationTelNumberSvc<
                        T: HumanResourceService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<
                        super::ChangeEmergencyInformationTelNumberRequest,
                    > for ChangeEmergencyInformationTelNumberSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ChangeEmergencyInformationTelNumberRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_emergency_information_tel_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmergencyInformationTelNumberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeEmergencyInformationMobileNumber" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmergencyInformationMobileNumberSvc<
                        T: HumanResourceService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<
                        super::ChangeEmergencyInformationMobileNumberRequest,
                    > for ChangeEmergencyInformationMobileNumberSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ChangeEmergencyInformationMobileNumberRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_emergency_information_mobile_number(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmergencyInformationMobileNumberSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangeEmergencyInformationContactName" => {
                    #[allow(non_camel_case_types)]
                    struct ChangeEmergencyInformationContactNameSvc<
                        T: HumanResourceService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<
                        super::ChangeEmergencyInformationContactNameRequest,
                    > for ChangeEmergencyInformationContactNameSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::ChangeEmergencyInformationContactNameRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_emergency_information_contact_name(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangeEmergencyInformationContactNameSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/RemoveEmergencyInformation" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveEmergencyInformationSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<
                        super::RemoveEmergencyInformationRequest,
                    > for RemoveEmergencyInformationSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::RemoveEmergencyInformationRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::remove_emergency_information(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveEmergencyInformationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/RemoveEmergencyInformationHealthCondition" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveEmergencyInformationHealthConditionSvc<
                        T: HumanResourceService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<
                        super::RemoveEmergencyInformationHealthConditionRequest,
                    > for RemoveEmergencyInformationHealthConditionSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::RemoveEmergencyInformationHealthConditionRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::remove_emergency_information_health_condition(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveEmergencyInformationHealthConditionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/CreatePANEmployeeRequest" => {
                    #[allow(non_camel_case_types)]
                    struct CreatePANEmployeeRequestSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::CreatePanRequest>
                    for CreatePANEmployeeRequestSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreatePanRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::create_pan_employee_request(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreatePANEmployeeRequestSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/GetPANInformation" => {
                    #[allow(non_camel_case_types)]
                    struct GetPANInformationSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::GetPanInformationRequest>
                    for GetPANInformationSvc<T> {
                        type Response = super::PersonnelAction;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPanInformationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::get_pan_information(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPANInformationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangePANActionType" => {
                    #[allow(non_camel_case_types)]
                    struct ChangePANActionTypeSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangePanActionTypeRequest>
                    for ChangePANActionTypeSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangePanActionTypeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_pan_action_type(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangePANActionTypeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangePANOldValue" => {
                    #[allow(non_camel_case_types)]
                    struct ChangePANOldValueSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangePanOldValueRequest>
                    for ChangePANOldValueSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangePanOldValueRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_pan_old_value(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangePANOldValueSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangePANNewValue" => {
                    #[allow(non_camel_case_types)]
                    struct ChangePANNewValueSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangePanNewValueRequest>
                    for ChangePANNewValueSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangePanNewValueRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_pan_new_value(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangePANNewValueSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ChangePANEffectiveDate" => {
                    #[allow(non_camel_case_types)]
                    struct ChangePANEffectiveDateSvc<T: HumanResourceService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ChangePanEffectiveDateRequest>
                    for ChangePANEffectiveDateSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChangePanEffectiveDateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::change_pan_effective_date(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChangePANEffectiveDateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/ApprovePAN" => {
                    #[allow(non_camel_case_types)]
                    struct ApprovePANSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::ApprovePanRequest>
                    for ApprovePANSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ApprovePanRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::approve_pan(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ApprovePANSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/RejectPAN" => {
                    #[allow(non_camel_case_types)]
                    struct RejectPANSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::RejectPanRequest>
                    for RejectPANSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RejectPanRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::reject_pan(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RejectPANSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/management.HumanResourceService/RemovePANInformation" => {
                    #[allow(non_camel_case_types)]
                    struct RemovePANInformationSvc<T: HumanResourceService>(pub Arc<T>);
                    impl<
                        T: HumanResourceService,
                    > tonic::server::UnaryService<super::RemovePanInformationRequest>
                    for RemovePANInformationSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemovePanInformationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HumanResourceService>::remove_pan_information(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemovePANInformationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for HumanResourceServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "management.HumanResourceService";
    impl<T> tonic::server::NamedService for HumanResourceServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
