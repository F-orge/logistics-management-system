// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "management.proto" (package "management", syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FileMetadata } from "./storage";
/**
 * @generated from protobuf message management.Employee
 */
export interface Employee {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: management.Role role = 3;
     */
    role: Role;
    /**
     * @generated from protobuf field: string full_name = 4;
     */
    fullName: string;
    /**
     * @generated from protobuf field: string address = 5;
     */
    address: string;
    /**
     * @generated from protobuf field: string position = 6;
     */
    position: string;
    /**
     * @generated from protobuf field: storage.FileMetadata avatar_file_id = 7;
     */
    avatarFileId?: FileMetadata;
    /**
     * @generated from protobuf field: storage.FileMetadata cover_photo_file_id = 8;
     */
    coverPhotoFileId?: FileMetadata;
}
/**
 * @generated from protobuf message management.Team
 */
export interface Team {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: string leader_id = 4;
     */
    leaderId: string;
    /**
     * @generated from protobuf field: repeated string member_ids = 5;
     */
    memberIds: string[];
}
/**
 * @generated from protobuf message management.Board
 */
export interface Board {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string team_id = 3;
     */
    teamId: string;
}
/**
 * @generated from protobuf message management.BoardSection
 */
export interface BoardSection {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string color = 3;
     */
    color: string;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * @generated from protobuf field: bool hidden = 5;
     */
    hidden: boolean;
    /**
     * @generated from protobuf field: int32 task_limit = 6;
     */
    taskLimit: number;
    /**
     * @generated from protobuf field: string task_board_id = 7;
     */
    taskBoardId: string;
    /**
     * @generated from protobuf field: int32 order = 8;
     */
    order: number;
    /**
     * @generated from protobuf field: repeated string task_ids = 9;
     */
    taskIds: string[];
}
/**
 * @generated from protobuf message management.Task
 */
export interface Task {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: string board_section_id = 4;
     */
    boardSectionId: string;
    /**
     * @generated from protobuf field: int32 order = 5;
     */
    order: number;
    /**
     * @generated from protobuf field: repeated management.TaskField fields = 6;
     */
    fields: TaskField[];
    /**
     * @generated from protobuf field: repeated string label_ids = 7;
     */
    labelIds: string[];
    /**
     * @generated from protobuf field: repeated management.TaskComment comments = 8;
     */
    comments: TaskComment[];
    /**
     * @generated from protobuf field: string issuer_id = 9;
     */
    issuerId: string;
    /**
     * @generated from protobuf field: repeated string assignee_ids = 10;
     */
    assigneeIds: string[];
}
/**
 * @generated from protobuf message management.TaskField
 */
export interface TaskField {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: management.TaskFieldType type = 3;
     */
    type: TaskFieldType;
    /**
     * NOTE TO CLIENTS: please convert this into proper data type before using it.
     * you can check the type first before doing the conversion
     *
     * @generated from protobuf field: string value = 4;
     */
    value: string;
    /**
     * @generated from protobuf field: string team_id = 5;
     */
    teamId: string;
}
/**
 * @generated from protobuf message management.TaskLabel
 */
export interface TaskLabel {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: string color = 4;
     */
    color: string;
    /**
     * @generated from protobuf field: string team_id = 5;
     */
    teamId: string;
}
/**
 * @generated from protobuf message management.TaskComment
 */
export interface TaskComment {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * NOTE: this is a markdown compatible comment
     *
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: string sender_id = 3;
     */
    senderId: string;
    /**
     * @generated from protobuf field: string task_id = 4;
     */
    taskId: string;
    /**
     * @generated from protobuf field: repeated storage.FileMetadata attachments = 5;
     */
    attachments: FileMetadata[];
    /**
     * NOTE: this can be used to identify the order of the comments
     *
     * @generated from protobuf field: string timestamp = 6;
     */
    timestamp: string;
}
/**
 * @generated from protobuf message management.CreateEmployeeRequest
 */
export interface CreateEmployeeRequest {
    /**
     * @generated from protobuf field: string full_name = 1;
     */
    fullName: string;
    /**
     * @generated from protobuf field: string address = 2;
     */
    address: string;
    /**
     * @generated from protobuf field: management.Role role = 3;
     */
    role: Role;
    /**
     * @generated from protobuf field: string position = 4;
     */
    position: string;
    /**
     * @generated from protobuf field: string email = 5;
     */
    email: string;
    /**
     * @generated from protobuf field: optional string avatar_file_id = 6;
     */
    avatarFileId?: string;
    /**
     * @generated from protobuf field: optional string avatar_cover_photo_file_id = 7;
     */
    avatarCoverPhotoFileId?: string;
}
/**
 * @generated from protobuf message management.CreateEmployeeResponse
 */
export interface CreateEmployeeResponse {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * NOTE: this is a auto-generate password for new employees
     *
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message management.GetEmployeeRequest
 */
export interface GetEmployeeRequest {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "employeeId";
        /**
         * @generated from protobuf field: string employee_id = 1;
         */
        employeeId: string;
    } | {
        oneofKind: "userId";
        /**
         * @generated from protobuf field: string user_id = 2;
         */
        userId: string;
    } | {
        oneofKind: "role";
        /**
         * @generated from protobuf field: management.Role role = 3;
         */
        role: Role;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message management.BatchGetEmployeesRequest
 */
export interface BatchGetEmployeesRequest {
    /**
     * @generated from protobuf field: repeated string employee_ids = 1;
     */
    employeeIds: string[];
}
/**
 * @generated from protobuf message management.UpdateEmployeeRequest
 */
export interface UpdateEmployeeRequest {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "role";
        /**
         * @generated from protobuf field: management.Role role = 1;
         */
        role: Role;
    } | {
        oneofKind: "fullName";
        /**
         * @generated from protobuf field: string full_name = 2;
         */
        fullName: string;
    } | {
        oneofKind: "address";
        /**
         * @generated from protobuf field: string address = 3;
         */
        address: string;
    } | {
        oneofKind: "position";
        /**
         * @generated from protobuf field: string position = 4;
         */
        position: string;
    } | {
        oneofKind: "avatarFile";
        /**
         * @generated from protobuf field: storage.FileMetadata avatar_file = 5;
         */
        avatarFile: FileMetadata;
    } | {
        oneofKind: "converPhotoFile";
        /**
         * @generated from protobuf field: storage.FileMetadata conver_photo_file = 6;
         */
        converPhotoFile: FileMetadata;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message management.RemoveEmployeeRequest
 */
export interface RemoveEmployeeRequest {
    /**
     * @generated from protobuf field: string employee_id = 1;
     */
    employeeId: string;
}
/**
 * @generated from protobuf message management.CreateTeamRequest
 */
export interface CreateTeamRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: string leader_id = 3;
     */
    leaderId: string;
}
/**
 * @generated from protobuf message management.AddTeamMemberRequest
 */
export interface AddTeamMemberRequest {
    /**
     * @generated from protobuf field: string employee_id = 1;
     */
    employeeId: string;
}
/**
 * @generated from protobuf message management.RemoveTeamMemberRequest
 */
export interface RemoveTeamMemberRequest {
    /**
     * @generated from protobuf field: string employee_id = 1;
     */
    employeeId: string;
}
/**
 * @generated from protobuf message management.GetTeamRequest
 */
export interface GetTeamRequest {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "id";
        /**
         * @generated from protobuf field: string id = 1;
         */
        id: string;
    } | {
        oneofKind: "name";
        /**
         * @generated from protobuf field: string name = 2;
         */
        name: string;
    } | {
        oneofKind: "leaderId";
        /**
         * @generated from protobuf field: string leader_id = 3;
         */
        leaderId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message management.UpdateTeamRequest
 */
export interface UpdateTeamRequest {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "name";
        /**
         * @generated from protobuf field: string name = 1;
         */
        name: string;
    } | {
        oneofKind: "description";
        /**
         * @generated from protobuf field: string description = 2;
         */
        description: string;
    } | {
        oneofKind: "leaderId";
        /**
         * @generated from protobuf field: string leader_id = 3;
         */
        leaderId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message management.RemoveTeamRequest
 */
export interface RemoveTeamRequest {
    /**
     * @generated from protobuf field: string team_id = 1;
     */
    teamId: string;
}
/**
 * @generated from protobuf message management.CreateBoardRequest
 */
export interface CreateBoardRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string team_id = 2;
     */
    teamId: string;
}
/**
 * @generated from protobuf message management.GetBoardRequest
 */
export interface GetBoardRequest {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "name";
        /**
         * @generated from protobuf field: string name = 1;
         */
        name: string;
    } | {
        oneofKind: "teamId";
        /**
         * @generated from protobuf field: string team_id = 2;
         */
        teamId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message management.UpdateBoardRequest
 */
export interface UpdateBoardRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message management.RemoveBoardRequest
 */
export interface RemoveBoardRequest {
    /**
     * @generated from protobuf field: string board_id = 1;
     */
    boardId: string;
}
/**
 * @generated from protobuf message management.CreateBoardSectionRequest
 */
export interface CreateBoardSectionRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string color = 2;
     */
    color: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: int32 task_limit = 4;
     */
    taskLimit: number;
    /**
     * @generated from protobuf field: string task_board_id = 5;
     */
    taskBoardId: string;
}
/**
 * @generated from protobuf message management.GetBoardSectionRequest
 */
export interface GetBoardSectionRequest {
    /**
     * @generated from protobuf field: string board_id = 1;
     */
    boardId: string;
}
/**
 * @generated from protobuf message management.UpdateBoardSectionRequest
 */
export interface UpdateBoardSectionRequest {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "name";
        /**
         * @generated from protobuf field: string name = 1;
         */
        name: string;
    } | {
        oneofKind: "color";
        /**
         * @generated from protobuf field: string color = 2;
         */
        color: string;
    } | {
        oneofKind: "description";
        /**
         * @generated from protobuf field: string description = 3;
         */
        description: string;
    } | {
        oneofKind: "hidden";
        /**
         * @generated from protobuf field: bool hidden = 4;
         */
        hidden: boolean;
    } | {
        oneofKind: "taskLimit";
        /**
         * @generated from protobuf field: int32 task_limit = 5;
         */
        taskLimit: number;
    } | {
        oneofKind: "order";
        /**
         * @generated from protobuf field: int32 order = 6;
         */
        order: number;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message management.RemoveBoardSectionRequest
 */
export interface RemoveBoardSectionRequest {
    /**
     * @generated from protobuf field: string board_section_id = 1;
     */
    boardSectionId: string;
}
/**
 * @generated from protobuf message management.CreateTaskRequest
 */
export interface CreateTaskRequest {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: string board_section_id = 3;
     */
    boardSectionId: string;
    /**
     * @generated from protobuf field: string issuer_id = 4;
     */
    issuerId: string;
}
/**
 * @generated from protobuf message management.AssignTaskRequest
 */
export interface AssignTaskRequest {
    /**
     * @generated from protobuf field: string task_id = 1;
     */
    taskId: string;
    /**
     * @generated from protobuf field: string employee_id = 2;
     */
    employeeId: string;
}
/**
 * @generated from protobuf message management.RemoveAssignTaskRequest
 */
export interface RemoveAssignTaskRequest {
    /**
     * @generated from protobuf field: string task_id = 1;
     */
    taskId: string;
    /**
     * @generated from protobuf field: string employee_id = 2;
     */
    employeeId: string;
}
/**
 * @generated from protobuf message management.GetTaskFromSectionRequest
 */
export interface GetTaskFromSectionRequest {
    /**
     * @generated from protobuf field: string board_section_id = 1;
     */
    boardSectionId: string;
}
/**
 * @generated from protobuf message management.GetTaskRequest
 */
export interface GetTaskRequest {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "id";
        /**
         * @generated from protobuf field: string id = 1;
         */
        id: string;
    } | {
        oneofKind: "issuerId";
        /**
         * @generated from protobuf field: string issuer_id = 2;
         */
        issuerId: string;
    } | {
        oneofKind: "assigneeId";
        /**
         * @generated from protobuf field: string assignee_id = 3;
         */
        assigneeId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message management.MoveTaskToBoardRequest
 */
export interface MoveTaskToBoardRequest {
    /**
     * @generated from protobuf field: string task_id = 1;
     */
    taskId: string;
    /**
     * @generated from protobuf field: string board_section_id = 2;
     */
    boardSectionId: string;
}
/**
 * @generated from protobuf message management.UpdateTaskRequest
 */
export interface UpdateTaskRequest {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "title";
        /**
         * @generated from protobuf field: string title = 1;
         */
        title: string;
    } | {
        oneofKind: "description";
        /**
         * @generated from protobuf field: string description = 2;
         */
        description: string;
    } | {
        oneofKind: "boardSectionId";
        /**
         * @generated from protobuf field: string board_section_id = 3;
         */
        boardSectionId: string;
    } | {
        oneofKind: "issuerId";
        /**
         * @generated from protobuf field: string issuer_id = 4;
         */
        issuerId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message management.RemoveTaskRequest
 */
export interface RemoveTaskRequest {
    /**
     * @generated from protobuf field: string task_id = 1;
     */
    taskId: string;
}
/**
 * @generated from protobuf message management.CreateTaskLabelRequest
 */
export interface CreateTaskLabelRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: string color = 3;
     */
    color: string;
    /**
     * @generated from protobuf field: string team_id = 4;
     */
    teamId: string;
}
/**
 * @generated from protobuf message management.GetTaskLabelRequest
 */
export interface GetTaskLabelRequest {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "id";
        /**
         * @generated from protobuf field: string id = 1;
         */
        id: string;
    } | {
        oneofKind: "taskId";
        /**
         * @generated from protobuf field: string task_id = 2;
         */
        taskId: string;
    } | {
        oneofKind: "teamId";
        /**
         * @generated from protobuf field: string team_id = 3;
         */
        teamId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message management.UpdateTaskLabelRequest
 */
export interface UpdateTaskLabelRequest {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "name";
        /**
         * @generated from protobuf field: string name = 1;
         */
        name: string;
    } | {
        oneofKind: "description";
        /**
         * @generated from protobuf field: string description = 2;
         */
        description: string;
    } | {
        oneofKind: "color";
        /**
         * @generated from protobuf field: string color = 3;
         */
        color: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message management.RemoveTaskLabelRequest
 */
export interface RemoveTaskLabelRequest {
    /**
     * @generated from protobuf field: string task_label_id = 1;
     */
    taskLabelId: string;
}
/**
 * @generated from protobuf message management.CreateTaskFieldRequest
 */
export interface CreateTaskFieldRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: management.TaskFieldType type = 2;
     */
    type: TaskFieldType;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
    /**
     * @generated from protobuf field: string team_id = 4;
     */
    teamId: string;
}
/**
 * @generated from protobuf message management.GetTaskFieldRequest
 */
export interface GetTaskFieldRequest {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "id";
        /**
         * @generated from protobuf field: string id = 1;
         */
        id: string;
    } | {
        oneofKind: "teamId";
        /**
         * @generated from protobuf field: string team_id = 2;
         */
        teamId: string;
    } | {
        oneofKind: "taskId";
        /**
         * @generated from protobuf field: string task_id = 3;
         */
        taskId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message management.UpdateTaskFieldRequest
 */
export interface UpdateTaskFieldRequest {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "name";
        /**
         * @generated from protobuf field: string name = 1;
         */
        name: string;
    } | {
        oneofKind: "type";
        /**
         * @generated from protobuf field: management.TaskFieldType type = 2;
         */
        type: TaskFieldType;
    } | {
        oneofKind: "value";
        /**
         * @generated from protobuf field: string value = 3;
         */
        value: string;
    } | {
        oneofKind: "teamId";
        /**
         * @generated from protobuf field: string team_id = 4;
         */
        teamId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message management.RemoveTaskFieldRequest
 */
export interface RemoveTaskFieldRequest {
    /**
     * @generated from protobuf field: string task_field_id = 1;
     */
    taskFieldId: string;
}
/**
 * @generated from protobuf message management.CreateTaskCommentRequest
 */
export interface CreateTaskCommentRequest {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: string sender_id = 2;
     */
    senderId: string;
    /**
     * @generated from protobuf field: string task_id = 3;
     */
    taskId: string;
    /**
     * @generated from protobuf field: repeated storage.FileMetadata attachments = 4;
     */
    attachments: FileMetadata[];
}
/**
 * @generated from protobuf message management.GetTaskCommentsRequest
 */
export interface GetTaskCommentsRequest {
    /**
     * @generated from protobuf field: string task_id = 1;
     */
    taskId: string;
}
/**
 * @generated from protobuf enum management.Role
 */
export enum Role {
    /**
     * @generated from protobuf enum value: ROLE_SUPER_ADMIN = 0;
     */
    SUPER_ADMIN = 0,
    /**
     * @generated from protobuf enum value: ROLE_MANAGER = 1;
     */
    MANAGER = 1,
    /**
     * @generated from protobuf enum value: ROLE_EMPLOYEE = 2;
     */
    EMPLOYEE = 2
}
/**
 * @generated from protobuf enum management.ContractType
 */
export enum ContractType {
    /**
     * @generated from protobuf enum value: CONTRACT_TYPE_FULL_TIME = 0;
     */
    FULL_TIME = 0,
    /**
     * @generated from protobuf enum value: CONTRACT_TYPE_PART_TIME = 1;
     */
    PART_TIME = 1
}
/**
 * @generated from protobuf enum management.TaskFieldType
 */
export enum TaskFieldType {
    /**
     * @generated from protobuf enum value: TASK_FIELD_TYPE_TEXT = 0;
     */
    TEXT = 0,
    /**
     * @generated from protobuf enum value: TASK_FIELD_TYPE_NUMBER = 1;
     */
    NUMBER = 1,
    /**
     * @generated from protobuf enum value: TASK_FIELD_TYPE_DATE = 2;
     */
    DATE = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class Employee$Type extends MessageType<Employee> {
    constructor() {
        super("management.Employee", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "role", kind: "enum", T: () => ["management.Role", Role, "ROLE_"] },
            { no: 4, name: "full_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "avatar_file_id", kind: "message", T: () => FileMetadata },
            { no: 8, name: "cover_photo_file_id", kind: "message", T: () => FileMetadata }
        ]);
    }
    create(value?: PartialMessage<Employee>): Employee {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.userId = "";
        message.role = 0;
        message.fullName = "";
        message.address = "";
        message.position = "";
        if (value !== undefined)
            reflectionMergePartial<Employee>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Employee): Employee {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* management.Role role */ 3:
                    message.role = reader.int32();
                    break;
                case /* string full_name */ 4:
                    message.fullName = reader.string();
                    break;
                case /* string address */ 5:
                    message.address = reader.string();
                    break;
                case /* string position */ 6:
                    message.position = reader.string();
                    break;
                case /* storage.FileMetadata avatar_file_id */ 7:
                    message.avatarFileId = FileMetadata.internalBinaryRead(reader, reader.uint32(), options, message.avatarFileId);
                    break;
                case /* storage.FileMetadata cover_photo_file_id */ 8:
                    message.coverPhotoFileId = FileMetadata.internalBinaryRead(reader, reader.uint32(), options, message.coverPhotoFileId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Employee, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* management.Role role = 3; */
        if (message.role !== 0)
            writer.tag(3, WireType.Varint).int32(message.role);
        /* string full_name = 4; */
        if (message.fullName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.fullName);
        /* string address = 5; */
        if (message.address !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.address);
        /* string position = 6; */
        if (message.position !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.position);
        /* storage.FileMetadata avatar_file_id = 7; */
        if (message.avatarFileId)
            FileMetadata.internalBinaryWrite(message.avatarFileId, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* storage.FileMetadata cover_photo_file_id = 8; */
        if (message.coverPhotoFileId)
            FileMetadata.internalBinaryWrite(message.coverPhotoFileId, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.Employee
 */
export const Employee = new Employee$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Team$Type extends MessageType<Team> {
    constructor() {
        super("management.Team", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "leader_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "member_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Team>): Team {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.description = "";
        message.leaderId = "";
        message.memberIds = [];
        if (value !== undefined)
            reflectionMergePartial<Team>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Team): Team {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* string leader_id */ 4:
                    message.leaderId = reader.string();
                    break;
                case /* repeated string member_ids */ 5:
                    message.memberIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Team, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* string leader_id = 4; */
        if (message.leaderId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.leaderId);
        /* repeated string member_ids = 5; */
        for (let i = 0; i < message.memberIds.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.memberIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.Team
 */
export const Team = new Team$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Board$Type extends MessageType<Board> {
    constructor() {
        super("management.Board", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Board>): Board {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.teamId = "";
        if (value !== undefined)
            reflectionMergePartial<Board>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Board): Board {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string team_id */ 3:
                    message.teamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Board, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string team_id = 3; */
        if (message.teamId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.Board
 */
export const Board = new Board$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BoardSection$Type extends MessageType<BoardSection> {
    constructor() {
        super("management.BoardSection", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "hidden", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "task_limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "task_board_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "order", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "task_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BoardSection>): BoardSection {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.color = "";
        message.description = "";
        message.hidden = false;
        message.taskLimit = 0;
        message.taskBoardId = "";
        message.order = 0;
        message.taskIds = [];
        if (value !== undefined)
            reflectionMergePartial<BoardSection>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BoardSection): BoardSection {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string color */ 3:
                    message.color = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* bool hidden */ 5:
                    message.hidden = reader.bool();
                    break;
                case /* int32 task_limit */ 6:
                    message.taskLimit = reader.int32();
                    break;
                case /* string task_board_id */ 7:
                    message.taskBoardId = reader.string();
                    break;
                case /* int32 order */ 8:
                    message.order = reader.int32();
                    break;
                case /* repeated string task_ids */ 9:
                    message.taskIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BoardSection, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string color = 3; */
        if (message.color !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.color);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* bool hidden = 5; */
        if (message.hidden !== false)
            writer.tag(5, WireType.Varint).bool(message.hidden);
        /* int32 task_limit = 6; */
        if (message.taskLimit !== 0)
            writer.tag(6, WireType.Varint).int32(message.taskLimit);
        /* string task_board_id = 7; */
        if (message.taskBoardId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.taskBoardId);
        /* int32 order = 8; */
        if (message.order !== 0)
            writer.tag(8, WireType.Varint).int32(message.order);
        /* repeated string task_ids = 9; */
        for (let i = 0; i < message.taskIds.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.taskIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.BoardSection
 */
export const BoardSection = new BoardSection$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Task$Type extends MessageType<Task> {
    constructor() {
        super("management.Task", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "board_section_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "order", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "fields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TaskField },
            { no: 7, name: "label_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "comments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TaskComment },
            { no: 9, name: "issuer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "assignee_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Task>): Task {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.title = "";
        message.description = "";
        message.boardSectionId = "";
        message.order = 0;
        message.fields = [];
        message.labelIds = [];
        message.comments = [];
        message.issuerId = "";
        message.assigneeIds = [];
        if (value !== undefined)
            reflectionMergePartial<Task>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Task): Task {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* string board_section_id */ 4:
                    message.boardSectionId = reader.string();
                    break;
                case /* int32 order */ 5:
                    message.order = reader.int32();
                    break;
                case /* repeated management.TaskField fields */ 6:
                    message.fields.push(TaskField.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string label_ids */ 7:
                    message.labelIds.push(reader.string());
                    break;
                case /* repeated management.TaskComment comments */ 8:
                    message.comments.push(TaskComment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string issuer_id */ 9:
                    message.issuerId = reader.string();
                    break;
                case /* repeated string assignee_ids */ 10:
                    message.assigneeIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Task, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* string board_section_id = 4; */
        if (message.boardSectionId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.boardSectionId);
        /* int32 order = 5; */
        if (message.order !== 0)
            writer.tag(5, WireType.Varint).int32(message.order);
        /* repeated management.TaskField fields = 6; */
        for (let i = 0; i < message.fields.length; i++)
            TaskField.internalBinaryWrite(message.fields[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated string label_ids = 7; */
        for (let i = 0; i < message.labelIds.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.labelIds[i]);
        /* repeated management.TaskComment comments = 8; */
        for (let i = 0; i < message.comments.length; i++)
            TaskComment.internalBinaryWrite(message.comments[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string issuer_id = 9; */
        if (message.issuerId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.issuerId);
        /* repeated string assignee_ids = 10; */
        for (let i = 0; i < message.assigneeIds.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.assigneeIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.Task
 */
export const Task = new Task$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskField$Type extends MessageType<TaskField> {
    constructor() {
        super("management.TaskField", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["management.TaskFieldType", TaskFieldType, "TASK_FIELD_TYPE_"] },
            { no: 4, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TaskField>): TaskField {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.type = 0;
        message.value = "";
        message.teamId = "";
        if (value !== undefined)
            reflectionMergePartial<TaskField>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskField): TaskField {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* management.TaskFieldType type */ 3:
                    message.type = reader.int32();
                    break;
                case /* string value */ 4:
                    message.value = reader.string();
                    break;
                case /* string team_id */ 5:
                    message.teamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskField, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* management.TaskFieldType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* string value = 4; */
        if (message.value !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.value);
        /* string team_id = 5; */
        if (message.teamId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.TaskField
 */
export const TaskField = new TaskField$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskLabel$Type extends MessageType<TaskLabel> {
    constructor() {
        super("management.TaskLabel", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TaskLabel>): TaskLabel {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.description = "";
        message.color = "";
        message.teamId = "";
        if (value !== undefined)
            reflectionMergePartial<TaskLabel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskLabel): TaskLabel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* string color */ 4:
                    message.color = reader.string();
                    break;
                case /* string team_id */ 5:
                    message.teamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskLabel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* string color = 4; */
        if (message.color !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.color);
        /* string team_id = 5; */
        if (message.teamId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.TaskLabel
 */
export const TaskLabel = new TaskLabel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskComment$Type extends MessageType<TaskComment> {
    constructor() {
        super("management.TaskComment", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sender_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "attachments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FileMetadata },
            { no: 6, name: "timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TaskComment>): TaskComment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.message = "";
        message.senderId = "";
        message.taskId = "";
        message.attachments = [];
        message.timestamp = "";
        if (value !== undefined)
            reflectionMergePartial<TaskComment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskComment): TaskComment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* string sender_id */ 3:
                    message.senderId = reader.string();
                    break;
                case /* string task_id */ 4:
                    message.taskId = reader.string();
                    break;
                case /* repeated storage.FileMetadata attachments */ 5:
                    message.attachments.push(FileMetadata.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string timestamp */ 6:
                    message.timestamp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskComment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* string sender_id = 3; */
        if (message.senderId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.senderId);
        /* string task_id = 4; */
        if (message.taskId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.taskId);
        /* repeated storage.FileMetadata attachments = 5; */
        for (let i = 0; i < message.attachments.length; i++)
            FileMetadata.internalBinaryWrite(message.attachments[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string timestamp = 6; */
        if (message.timestamp !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.TaskComment
 */
export const TaskComment = new TaskComment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateEmployeeRequest$Type extends MessageType<CreateEmployeeRequest> {
    constructor() {
        super("management.CreateEmployeeRequest", [
            { no: 1, name: "full_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "role", kind: "enum", T: () => ["management.Role", Role, "ROLE_"] },
            { no: 4, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "avatar_file_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "avatar_cover_photo_file_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateEmployeeRequest>): CreateEmployeeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fullName = "";
        message.address = "";
        message.role = 0;
        message.position = "";
        message.email = "";
        if (value !== undefined)
            reflectionMergePartial<CreateEmployeeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateEmployeeRequest): CreateEmployeeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string full_name */ 1:
                    message.fullName = reader.string();
                    break;
                case /* string address */ 2:
                    message.address = reader.string();
                    break;
                case /* management.Role role */ 3:
                    message.role = reader.int32();
                    break;
                case /* string position */ 4:
                    message.position = reader.string();
                    break;
                case /* string email */ 5:
                    message.email = reader.string();
                    break;
                case /* optional string avatar_file_id */ 6:
                    message.avatarFileId = reader.string();
                    break;
                case /* optional string avatar_cover_photo_file_id */ 7:
                    message.avatarCoverPhotoFileId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateEmployeeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string full_name = 1; */
        if (message.fullName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fullName);
        /* string address = 2; */
        if (message.address !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.address);
        /* management.Role role = 3; */
        if (message.role !== 0)
            writer.tag(3, WireType.Varint).int32(message.role);
        /* string position = 4; */
        if (message.position !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.position);
        /* string email = 5; */
        if (message.email !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.email);
        /* optional string avatar_file_id = 6; */
        if (message.avatarFileId !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.avatarFileId);
        /* optional string avatar_cover_photo_file_id = 7; */
        if (message.avatarCoverPhotoFileId !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.avatarCoverPhotoFileId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.CreateEmployeeRequest
 */
export const CreateEmployeeRequest = new CreateEmployeeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateEmployeeResponse$Type extends MessageType<CreateEmployeeResponse> {
    constructor() {
        super("management.CreateEmployeeResponse", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateEmployeeResponse>): CreateEmployeeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<CreateEmployeeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateEmployeeResponse): CreateEmployeeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateEmployeeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.CreateEmployeeResponse
 */
export const CreateEmployeeResponse = new CreateEmployeeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetEmployeeRequest$Type extends MessageType<GetEmployeeRequest> {
    constructor() {
        super("management.GetEmployeeRequest", [
            { no: 1, name: "employee_id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "role", kind: "enum", oneof: "request", T: () => ["management.Role", Role, "ROLE_"] }
        ]);
    }
    create(value?: PartialMessage<GetEmployeeRequest>): GetEmployeeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetEmployeeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetEmployeeRequest): GetEmployeeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string employee_id */ 1:
                    message.request = {
                        oneofKind: "employeeId",
                        employeeId: reader.string()
                    };
                    break;
                case /* string user_id */ 2:
                    message.request = {
                        oneofKind: "userId",
                        userId: reader.string()
                    };
                    break;
                case /* management.Role role */ 3:
                    message.request = {
                        oneofKind: "role",
                        role: reader.int32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetEmployeeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string employee_id = 1; */
        if (message.request.oneofKind === "employeeId")
            writer.tag(1, WireType.LengthDelimited).string(message.request.employeeId);
        /* string user_id = 2; */
        if (message.request.oneofKind === "userId")
            writer.tag(2, WireType.LengthDelimited).string(message.request.userId);
        /* management.Role role = 3; */
        if (message.request.oneofKind === "role")
            writer.tag(3, WireType.Varint).int32(message.request.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.GetEmployeeRequest
 */
export const GetEmployeeRequest = new GetEmployeeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchGetEmployeesRequest$Type extends MessageType<BatchGetEmployeesRequest> {
    constructor() {
        super("management.BatchGetEmployeesRequest", [
            { no: 1, name: "employee_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BatchGetEmployeesRequest>): BatchGetEmployeesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.employeeIds = [];
        if (value !== undefined)
            reflectionMergePartial<BatchGetEmployeesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BatchGetEmployeesRequest): BatchGetEmployeesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string employee_ids */ 1:
                    message.employeeIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BatchGetEmployeesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string employee_ids = 1; */
        for (let i = 0; i < message.employeeIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.employeeIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.BatchGetEmployeesRequest
 */
export const BatchGetEmployeesRequest = new BatchGetEmployeesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateEmployeeRequest$Type extends MessageType<UpdateEmployeeRequest> {
    constructor() {
        super("management.UpdateEmployeeRequest", [
            { no: 1, name: "role", kind: "enum", oneof: "request", T: () => ["management.Role", Role, "ROLE_"] },
            { no: 2, name: "full_name", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "address", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "position", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "avatar_file", kind: "message", oneof: "request", T: () => FileMetadata },
            { no: 6, name: "conver_photo_file", kind: "message", oneof: "request", T: () => FileMetadata }
        ]);
    }
    create(value?: PartialMessage<UpdateEmployeeRequest>): UpdateEmployeeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UpdateEmployeeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateEmployeeRequest): UpdateEmployeeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* management.Role role */ 1:
                    message.request = {
                        oneofKind: "role",
                        role: reader.int32()
                    };
                    break;
                case /* string full_name */ 2:
                    message.request = {
                        oneofKind: "fullName",
                        fullName: reader.string()
                    };
                    break;
                case /* string address */ 3:
                    message.request = {
                        oneofKind: "address",
                        address: reader.string()
                    };
                    break;
                case /* string position */ 4:
                    message.request = {
                        oneofKind: "position",
                        position: reader.string()
                    };
                    break;
                case /* storage.FileMetadata avatar_file */ 5:
                    message.request = {
                        oneofKind: "avatarFile",
                        avatarFile: FileMetadata.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).avatarFile)
                    };
                    break;
                case /* storage.FileMetadata conver_photo_file */ 6:
                    message.request = {
                        oneofKind: "converPhotoFile",
                        converPhotoFile: FileMetadata.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).converPhotoFile)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateEmployeeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* management.Role role = 1; */
        if (message.request.oneofKind === "role")
            writer.tag(1, WireType.Varint).int32(message.request.role);
        /* string full_name = 2; */
        if (message.request.oneofKind === "fullName")
            writer.tag(2, WireType.LengthDelimited).string(message.request.fullName);
        /* string address = 3; */
        if (message.request.oneofKind === "address")
            writer.tag(3, WireType.LengthDelimited).string(message.request.address);
        /* string position = 4; */
        if (message.request.oneofKind === "position")
            writer.tag(4, WireType.LengthDelimited).string(message.request.position);
        /* storage.FileMetadata avatar_file = 5; */
        if (message.request.oneofKind === "avatarFile")
            FileMetadata.internalBinaryWrite(message.request.avatarFile, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* storage.FileMetadata conver_photo_file = 6; */
        if (message.request.oneofKind === "converPhotoFile")
            FileMetadata.internalBinaryWrite(message.request.converPhotoFile, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.UpdateEmployeeRequest
 */
export const UpdateEmployeeRequest = new UpdateEmployeeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveEmployeeRequest$Type extends MessageType<RemoveEmployeeRequest> {
    constructor() {
        super("management.RemoveEmployeeRequest", [
            { no: 1, name: "employee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveEmployeeRequest>): RemoveEmployeeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.employeeId = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveEmployeeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveEmployeeRequest): RemoveEmployeeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string employee_id */ 1:
                    message.employeeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveEmployeeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string employee_id = 1; */
        if (message.employeeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.employeeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveEmployeeRequest
 */
export const RemoveEmployeeRequest = new RemoveEmployeeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTeamRequest$Type extends MessageType<CreateTeamRequest> {
    constructor() {
        super("management.CreateTeamRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "leader_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTeamRequest>): CreateTeamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.description = "";
        message.leaderId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateTeamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTeamRequest): CreateTeamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string leader_id */ 3:
                    message.leaderId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTeamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string leader_id = 3; */
        if (message.leaderId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.leaderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.CreateTeamRequest
 */
export const CreateTeamRequest = new CreateTeamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddTeamMemberRequest$Type extends MessageType<AddTeamMemberRequest> {
    constructor() {
        super("management.AddTeamMemberRequest", [
            { no: 1, name: "employee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddTeamMemberRequest>): AddTeamMemberRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.employeeId = "";
        if (value !== undefined)
            reflectionMergePartial<AddTeamMemberRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddTeamMemberRequest): AddTeamMemberRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string employee_id */ 1:
                    message.employeeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddTeamMemberRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string employee_id = 1; */
        if (message.employeeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.employeeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.AddTeamMemberRequest
 */
export const AddTeamMemberRequest = new AddTeamMemberRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveTeamMemberRequest$Type extends MessageType<RemoveTeamMemberRequest> {
    constructor() {
        super("management.RemoveTeamMemberRequest", [
            { no: 1, name: "employee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveTeamMemberRequest>): RemoveTeamMemberRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.employeeId = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveTeamMemberRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveTeamMemberRequest): RemoveTeamMemberRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string employee_id */ 1:
                    message.employeeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveTeamMemberRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string employee_id = 1; */
        if (message.employeeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.employeeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveTeamMemberRequest
 */
export const RemoveTeamMemberRequest = new RemoveTeamMemberRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTeamRequest$Type extends MessageType<GetTeamRequest> {
    constructor() {
        super("management.GetTeamRequest", [
            { no: 1, name: "id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "leader_id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTeamRequest>): GetTeamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetTeamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTeamRequest): GetTeamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.request = {
                        oneofKind: "id",
                        id: reader.string()
                    };
                    break;
                case /* string name */ 2:
                    message.request = {
                        oneofKind: "name",
                        name: reader.string()
                    };
                    break;
                case /* string leader_id */ 3:
                    message.request = {
                        oneofKind: "leaderId",
                        leaderId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTeamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.request.oneofKind === "id")
            writer.tag(1, WireType.LengthDelimited).string(message.request.id);
        /* string name = 2; */
        if (message.request.oneofKind === "name")
            writer.tag(2, WireType.LengthDelimited).string(message.request.name);
        /* string leader_id = 3; */
        if (message.request.oneofKind === "leaderId")
            writer.tag(3, WireType.LengthDelimited).string(message.request.leaderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.GetTeamRequest
 */
export const GetTeamRequest = new GetTeamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTeamRequest$Type extends MessageType<UpdateTeamRequest> {
    constructor() {
        super("management.UpdateTeamRequest", [
            { no: 1, name: "name", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "leader_id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateTeamRequest>): UpdateTeamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UpdateTeamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTeamRequest): UpdateTeamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.request = {
                        oneofKind: "name",
                        name: reader.string()
                    };
                    break;
                case /* string description */ 2:
                    message.request = {
                        oneofKind: "description",
                        description: reader.string()
                    };
                    break;
                case /* string leader_id */ 3:
                    message.request = {
                        oneofKind: "leaderId",
                        leaderId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTeamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.request.oneofKind === "name")
            writer.tag(1, WireType.LengthDelimited).string(message.request.name);
        /* string description = 2; */
        if (message.request.oneofKind === "description")
            writer.tag(2, WireType.LengthDelimited).string(message.request.description);
        /* string leader_id = 3; */
        if (message.request.oneofKind === "leaderId")
            writer.tag(3, WireType.LengthDelimited).string(message.request.leaderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.UpdateTeamRequest
 */
export const UpdateTeamRequest = new UpdateTeamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveTeamRequest$Type extends MessageType<RemoveTeamRequest> {
    constructor() {
        super("management.RemoveTeamRequest", [
            { no: 1, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveTeamRequest>): RemoveTeamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.teamId = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveTeamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveTeamRequest): RemoveTeamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string team_id */ 1:
                    message.teamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveTeamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string team_id = 1; */
        if (message.teamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveTeamRequest
 */
export const RemoveTeamRequest = new RemoveTeamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateBoardRequest$Type extends MessageType<CreateBoardRequest> {
    constructor() {
        super("management.CreateBoardRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateBoardRequest>): CreateBoardRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.teamId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateBoardRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateBoardRequest): CreateBoardRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string team_id */ 2:
                    message.teamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateBoardRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string team_id = 2; */
        if (message.teamId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.CreateBoardRequest
 */
export const CreateBoardRequest = new CreateBoardRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBoardRequest$Type extends MessageType<GetBoardRequest> {
    constructor() {
        super("management.GetBoardRequest", [
            { no: 1, name: "name", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "team_id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetBoardRequest>): GetBoardRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetBoardRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBoardRequest): GetBoardRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.request = {
                        oneofKind: "name",
                        name: reader.string()
                    };
                    break;
                case /* string team_id */ 2:
                    message.request = {
                        oneofKind: "teamId",
                        teamId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBoardRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.request.oneofKind === "name")
            writer.tag(1, WireType.LengthDelimited).string(message.request.name);
        /* string team_id = 2; */
        if (message.request.oneofKind === "teamId")
            writer.tag(2, WireType.LengthDelimited).string(message.request.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.GetBoardRequest
 */
export const GetBoardRequest = new GetBoardRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateBoardRequest$Type extends MessageType<UpdateBoardRequest> {
    constructor() {
        super("management.UpdateBoardRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateBoardRequest>): UpdateBoardRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateBoardRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateBoardRequest): UpdateBoardRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateBoardRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.UpdateBoardRequest
 */
export const UpdateBoardRequest = new UpdateBoardRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveBoardRequest$Type extends MessageType<RemoveBoardRequest> {
    constructor() {
        super("management.RemoveBoardRequest", [
            { no: 1, name: "board_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveBoardRequest>): RemoveBoardRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.boardId = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveBoardRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveBoardRequest): RemoveBoardRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string board_id */ 1:
                    message.boardId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveBoardRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string board_id = 1; */
        if (message.boardId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.boardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveBoardRequest
 */
export const RemoveBoardRequest = new RemoveBoardRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateBoardSectionRequest$Type extends MessageType<CreateBoardSectionRequest> {
    constructor() {
        super("management.CreateBoardSectionRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "task_limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "task_board_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateBoardSectionRequest>): CreateBoardSectionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.color = "";
        message.description = "";
        message.taskLimit = 0;
        message.taskBoardId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateBoardSectionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateBoardSectionRequest): CreateBoardSectionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string color */ 2:
                    message.color = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* int32 task_limit */ 4:
                    message.taskLimit = reader.int32();
                    break;
                case /* string task_board_id */ 5:
                    message.taskBoardId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateBoardSectionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string color = 2; */
        if (message.color !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.color);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* int32 task_limit = 4; */
        if (message.taskLimit !== 0)
            writer.tag(4, WireType.Varint).int32(message.taskLimit);
        /* string task_board_id = 5; */
        if (message.taskBoardId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.taskBoardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.CreateBoardSectionRequest
 */
export const CreateBoardSectionRequest = new CreateBoardSectionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBoardSectionRequest$Type extends MessageType<GetBoardSectionRequest> {
    constructor() {
        super("management.GetBoardSectionRequest", [
            { no: 1, name: "board_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetBoardSectionRequest>): GetBoardSectionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.boardId = "";
        if (value !== undefined)
            reflectionMergePartial<GetBoardSectionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBoardSectionRequest): GetBoardSectionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string board_id */ 1:
                    message.boardId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBoardSectionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string board_id = 1; */
        if (message.boardId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.boardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.GetBoardSectionRequest
 */
export const GetBoardSectionRequest = new GetBoardSectionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateBoardSectionRequest$Type extends MessageType<UpdateBoardSectionRequest> {
    constructor() {
        super("management.UpdateBoardSectionRequest", [
            { no: 1, name: "name", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "color", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "hidden", kind: "scalar", oneof: "request", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "task_limit", kind: "scalar", oneof: "request", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "order", kind: "scalar", oneof: "request", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateBoardSectionRequest>): UpdateBoardSectionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UpdateBoardSectionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateBoardSectionRequest): UpdateBoardSectionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.request = {
                        oneofKind: "name",
                        name: reader.string()
                    };
                    break;
                case /* string color */ 2:
                    message.request = {
                        oneofKind: "color",
                        color: reader.string()
                    };
                    break;
                case /* string description */ 3:
                    message.request = {
                        oneofKind: "description",
                        description: reader.string()
                    };
                    break;
                case /* bool hidden */ 4:
                    message.request = {
                        oneofKind: "hidden",
                        hidden: reader.bool()
                    };
                    break;
                case /* int32 task_limit */ 5:
                    message.request = {
                        oneofKind: "taskLimit",
                        taskLimit: reader.int32()
                    };
                    break;
                case /* int32 order */ 6:
                    message.request = {
                        oneofKind: "order",
                        order: reader.int32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateBoardSectionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.request.oneofKind === "name")
            writer.tag(1, WireType.LengthDelimited).string(message.request.name);
        /* string color = 2; */
        if (message.request.oneofKind === "color")
            writer.tag(2, WireType.LengthDelimited).string(message.request.color);
        /* string description = 3; */
        if (message.request.oneofKind === "description")
            writer.tag(3, WireType.LengthDelimited).string(message.request.description);
        /* bool hidden = 4; */
        if (message.request.oneofKind === "hidden")
            writer.tag(4, WireType.Varint).bool(message.request.hidden);
        /* int32 task_limit = 5; */
        if (message.request.oneofKind === "taskLimit")
            writer.tag(5, WireType.Varint).int32(message.request.taskLimit);
        /* int32 order = 6; */
        if (message.request.oneofKind === "order")
            writer.tag(6, WireType.Varint).int32(message.request.order);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.UpdateBoardSectionRequest
 */
export const UpdateBoardSectionRequest = new UpdateBoardSectionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveBoardSectionRequest$Type extends MessageType<RemoveBoardSectionRequest> {
    constructor() {
        super("management.RemoveBoardSectionRequest", [
            { no: 1, name: "board_section_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveBoardSectionRequest>): RemoveBoardSectionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.boardSectionId = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveBoardSectionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveBoardSectionRequest): RemoveBoardSectionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string board_section_id */ 1:
                    message.boardSectionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveBoardSectionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string board_section_id = 1; */
        if (message.boardSectionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.boardSectionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveBoardSectionRequest
 */
export const RemoveBoardSectionRequest = new RemoveBoardSectionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTaskRequest$Type extends MessageType<CreateTaskRequest> {
    constructor() {
        super("management.CreateTaskRequest", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "board_section_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "issuer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTaskRequest>): CreateTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.description = "";
        message.boardSectionId = "";
        message.issuerId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTaskRequest): CreateTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string board_section_id */ 3:
                    message.boardSectionId = reader.string();
                    break;
                case /* string issuer_id */ 4:
                    message.issuerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string board_section_id = 3; */
        if (message.boardSectionId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.boardSectionId);
        /* string issuer_id = 4; */
        if (message.issuerId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.issuerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.CreateTaskRequest
 */
export const CreateTaskRequest = new CreateTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssignTaskRequest$Type extends MessageType<AssignTaskRequest> {
    constructor() {
        super("management.AssignTaskRequest", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "employee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AssignTaskRequest>): AssignTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = "";
        message.employeeId = "";
        if (value !== undefined)
            reflectionMergePartial<AssignTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssignTaskRequest): AssignTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                case /* string employee_id */ 2:
                    message.employeeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssignTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        /* string employee_id = 2; */
        if (message.employeeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.employeeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.AssignTaskRequest
 */
export const AssignTaskRequest = new AssignTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveAssignTaskRequest$Type extends MessageType<RemoveAssignTaskRequest> {
    constructor() {
        super("management.RemoveAssignTaskRequest", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "employee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveAssignTaskRequest>): RemoveAssignTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = "";
        message.employeeId = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveAssignTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveAssignTaskRequest): RemoveAssignTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                case /* string employee_id */ 2:
                    message.employeeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveAssignTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        /* string employee_id = 2; */
        if (message.employeeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.employeeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveAssignTaskRequest
 */
export const RemoveAssignTaskRequest = new RemoveAssignTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskFromSectionRequest$Type extends MessageType<GetTaskFromSectionRequest> {
    constructor() {
        super("management.GetTaskFromSectionRequest", [
            { no: 1, name: "board_section_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTaskFromSectionRequest>): GetTaskFromSectionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.boardSectionId = "";
        if (value !== undefined)
            reflectionMergePartial<GetTaskFromSectionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskFromSectionRequest): GetTaskFromSectionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string board_section_id */ 1:
                    message.boardSectionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskFromSectionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string board_section_id = 1; */
        if (message.boardSectionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.boardSectionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.GetTaskFromSectionRequest
 */
export const GetTaskFromSectionRequest = new GetTaskFromSectionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskRequest$Type extends MessageType<GetTaskRequest> {
    constructor() {
        super("management.GetTaskRequest", [
            { no: 1, name: "id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "issuer_id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "assignee_id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTaskRequest>): GetTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskRequest): GetTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.request = {
                        oneofKind: "id",
                        id: reader.string()
                    };
                    break;
                case /* string issuer_id */ 2:
                    message.request = {
                        oneofKind: "issuerId",
                        issuerId: reader.string()
                    };
                    break;
                case /* string assignee_id */ 3:
                    message.request = {
                        oneofKind: "assigneeId",
                        assigneeId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.request.oneofKind === "id")
            writer.tag(1, WireType.LengthDelimited).string(message.request.id);
        /* string issuer_id = 2; */
        if (message.request.oneofKind === "issuerId")
            writer.tag(2, WireType.LengthDelimited).string(message.request.issuerId);
        /* string assignee_id = 3; */
        if (message.request.oneofKind === "assigneeId")
            writer.tag(3, WireType.LengthDelimited).string(message.request.assigneeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.GetTaskRequest
 */
export const GetTaskRequest = new GetTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoveTaskToBoardRequest$Type extends MessageType<MoveTaskToBoardRequest> {
    constructor() {
        super("management.MoveTaskToBoardRequest", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "board_section_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MoveTaskToBoardRequest>): MoveTaskToBoardRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = "";
        message.boardSectionId = "";
        if (value !== undefined)
            reflectionMergePartial<MoveTaskToBoardRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoveTaskToBoardRequest): MoveTaskToBoardRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                case /* string board_section_id */ 2:
                    message.boardSectionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoveTaskToBoardRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        /* string board_section_id = 2; */
        if (message.boardSectionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.boardSectionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.MoveTaskToBoardRequest
 */
export const MoveTaskToBoardRequest = new MoveTaskToBoardRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTaskRequest$Type extends MessageType<UpdateTaskRequest> {
    constructor() {
        super("management.UpdateTaskRequest", [
            { no: 1, name: "title", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "board_section_id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "issuer_id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateTaskRequest>): UpdateTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UpdateTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTaskRequest): UpdateTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.request = {
                        oneofKind: "title",
                        title: reader.string()
                    };
                    break;
                case /* string description */ 2:
                    message.request = {
                        oneofKind: "description",
                        description: reader.string()
                    };
                    break;
                case /* string board_section_id */ 3:
                    message.request = {
                        oneofKind: "boardSectionId",
                        boardSectionId: reader.string()
                    };
                    break;
                case /* string issuer_id */ 4:
                    message.request = {
                        oneofKind: "issuerId",
                        issuerId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.request.oneofKind === "title")
            writer.tag(1, WireType.LengthDelimited).string(message.request.title);
        /* string description = 2; */
        if (message.request.oneofKind === "description")
            writer.tag(2, WireType.LengthDelimited).string(message.request.description);
        /* string board_section_id = 3; */
        if (message.request.oneofKind === "boardSectionId")
            writer.tag(3, WireType.LengthDelimited).string(message.request.boardSectionId);
        /* string issuer_id = 4; */
        if (message.request.oneofKind === "issuerId")
            writer.tag(4, WireType.LengthDelimited).string(message.request.issuerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.UpdateTaskRequest
 */
export const UpdateTaskRequest = new UpdateTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveTaskRequest$Type extends MessageType<RemoveTaskRequest> {
    constructor() {
        super("management.RemoveTaskRequest", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveTaskRequest>): RemoveTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveTaskRequest): RemoveTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveTaskRequest
 */
export const RemoveTaskRequest = new RemoveTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTaskLabelRequest$Type extends MessageType<CreateTaskLabelRequest> {
    constructor() {
        super("management.CreateTaskLabelRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTaskLabelRequest>): CreateTaskLabelRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.description = "";
        message.color = "";
        message.teamId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateTaskLabelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTaskLabelRequest): CreateTaskLabelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string color */ 3:
                    message.color = reader.string();
                    break;
                case /* string team_id */ 4:
                    message.teamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTaskLabelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string color = 3; */
        if (message.color !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.color);
        /* string team_id = 4; */
        if (message.teamId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.CreateTaskLabelRequest
 */
export const CreateTaskLabelRequest = new CreateTaskLabelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskLabelRequest$Type extends MessageType<GetTaskLabelRequest> {
    constructor() {
        super("management.GetTaskLabelRequest", [
            { no: 1, name: "id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "task_id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "team_id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTaskLabelRequest>): GetTaskLabelRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetTaskLabelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskLabelRequest): GetTaskLabelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.request = {
                        oneofKind: "id",
                        id: reader.string()
                    };
                    break;
                case /* string task_id */ 2:
                    message.request = {
                        oneofKind: "taskId",
                        taskId: reader.string()
                    };
                    break;
                case /* string team_id */ 3:
                    message.request = {
                        oneofKind: "teamId",
                        teamId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskLabelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.request.oneofKind === "id")
            writer.tag(1, WireType.LengthDelimited).string(message.request.id);
        /* string task_id = 2; */
        if (message.request.oneofKind === "taskId")
            writer.tag(2, WireType.LengthDelimited).string(message.request.taskId);
        /* string team_id = 3; */
        if (message.request.oneofKind === "teamId")
            writer.tag(3, WireType.LengthDelimited).string(message.request.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.GetTaskLabelRequest
 */
export const GetTaskLabelRequest = new GetTaskLabelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTaskLabelRequest$Type extends MessageType<UpdateTaskLabelRequest> {
    constructor() {
        super("management.UpdateTaskLabelRequest", [
            { no: 1, name: "name", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "color", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateTaskLabelRequest>): UpdateTaskLabelRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UpdateTaskLabelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTaskLabelRequest): UpdateTaskLabelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.request = {
                        oneofKind: "name",
                        name: reader.string()
                    };
                    break;
                case /* string description */ 2:
                    message.request = {
                        oneofKind: "description",
                        description: reader.string()
                    };
                    break;
                case /* string color */ 3:
                    message.request = {
                        oneofKind: "color",
                        color: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTaskLabelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.request.oneofKind === "name")
            writer.tag(1, WireType.LengthDelimited).string(message.request.name);
        /* string description = 2; */
        if (message.request.oneofKind === "description")
            writer.tag(2, WireType.LengthDelimited).string(message.request.description);
        /* string color = 3; */
        if (message.request.oneofKind === "color")
            writer.tag(3, WireType.LengthDelimited).string(message.request.color);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.UpdateTaskLabelRequest
 */
export const UpdateTaskLabelRequest = new UpdateTaskLabelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveTaskLabelRequest$Type extends MessageType<RemoveTaskLabelRequest> {
    constructor() {
        super("management.RemoveTaskLabelRequest", [
            { no: 1, name: "task_label_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveTaskLabelRequest>): RemoveTaskLabelRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskLabelId = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveTaskLabelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveTaskLabelRequest): RemoveTaskLabelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_label_id */ 1:
                    message.taskLabelId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveTaskLabelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_label_id = 1; */
        if (message.taskLabelId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskLabelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveTaskLabelRequest
 */
export const RemoveTaskLabelRequest = new RemoveTaskLabelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTaskFieldRequest$Type extends MessageType<CreateTaskFieldRequest> {
    constructor() {
        super("management.CreateTaskFieldRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["management.TaskFieldType", TaskFieldType, "TASK_FIELD_TYPE_"] },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "team_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTaskFieldRequest>): CreateTaskFieldRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.type = 0;
        message.value = "";
        message.teamId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateTaskFieldRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTaskFieldRequest): CreateTaskFieldRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* management.TaskFieldType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                case /* string team_id */ 4:
                    message.teamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTaskFieldRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* management.TaskFieldType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        /* string team_id = 4; */
        if (message.teamId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.CreateTaskFieldRequest
 */
export const CreateTaskFieldRequest = new CreateTaskFieldRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskFieldRequest$Type extends MessageType<GetTaskFieldRequest> {
    constructor() {
        super("management.GetTaskFieldRequest", [
            { no: 1, name: "id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "team_id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "task_id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTaskFieldRequest>): GetTaskFieldRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<GetTaskFieldRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskFieldRequest): GetTaskFieldRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.request = {
                        oneofKind: "id",
                        id: reader.string()
                    };
                    break;
                case /* string team_id */ 2:
                    message.request = {
                        oneofKind: "teamId",
                        teamId: reader.string()
                    };
                    break;
                case /* string task_id */ 3:
                    message.request = {
                        oneofKind: "taskId",
                        taskId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskFieldRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.request.oneofKind === "id")
            writer.tag(1, WireType.LengthDelimited).string(message.request.id);
        /* string team_id = 2; */
        if (message.request.oneofKind === "teamId")
            writer.tag(2, WireType.LengthDelimited).string(message.request.teamId);
        /* string task_id = 3; */
        if (message.request.oneofKind === "taskId")
            writer.tag(3, WireType.LengthDelimited).string(message.request.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.GetTaskFieldRequest
 */
export const GetTaskFieldRequest = new GetTaskFieldRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTaskFieldRequest$Type extends MessageType<UpdateTaskFieldRequest> {
    constructor() {
        super("management.UpdateTaskFieldRequest", [
            { no: 1, name: "name", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", oneof: "request", T: () => ["management.TaskFieldType", TaskFieldType, "TASK_FIELD_TYPE_"] },
            { no: 3, name: "value", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "team_id", kind: "scalar", oneof: "request", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateTaskFieldRequest>): UpdateTaskFieldRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UpdateTaskFieldRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTaskFieldRequest): UpdateTaskFieldRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.request = {
                        oneofKind: "name",
                        name: reader.string()
                    };
                    break;
                case /* management.TaskFieldType type */ 2:
                    message.request = {
                        oneofKind: "type",
                        type: reader.int32()
                    };
                    break;
                case /* string value */ 3:
                    message.request = {
                        oneofKind: "value",
                        value: reader.string()
                    };
                    break;
                case /* string team_id */ 4:
                    message.request = {
                        oneofKind: "teamId",
                        teamId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTaskFieldRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.request.oneofKind === "name")
            writer.tag(1, WireType.LengthDelimited).string(message.request.name);
        /* management.TaskFieldType type = 2; */
        if (message.request.oneofKind === "type")
            writer.tag(2, WireType.Varint).int32(message.request.type);
        /* string value = 3; */
        if (message.request.oneofKind === "value")
            writer.tag(3, WireType.LengthDelimited).string(message.request.value);
        /* string team_id = 4; */
        if (message.request.oneofKind === "teamId")
            writer.tag(4, WireType.LengthDelimited).string(message.request.teamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.UpdateTaskFieldRequest
 */
export const UpdateTaskFieldRequest = new UpdateTaskFieldRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveTaskFieldRequest$Type extends MessageType<RemoveTaskFieldRequest> {
    constructor() {
        super("management.RemoveTaskFieldRequest", [
            { no: 1, name: "task_field_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveTaskFieldRequest>): RemoveTaskFieldRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskFieldId = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveTaskFieldRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveTaskFieldRequest): RemoveTaskFieldRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_field_id */ 1:
                    message.taskFieldId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveTaskFieldRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_field_id = 1; */
        if (message.taskFieldId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskFieldId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveTaskFieldRequest
 */
export const RemoveTaskFieldRequest = new RemoveTaskFieldRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTaskCommentRequest$Type extends MessageType<CreateTaskCommentRequest> {
    constructor() {
        super("management.CreateTaskCommentRequest", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sender_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "attachments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FileMetadata }
        ]);
    }
    create(value?: PartialMessage<CreateTaskCommentRequest>): CreateTaskCommentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        message.senderId = "";
        message.taskId = "";
        message.attachments = [];
        if (value !== undefined)
            reflectionMergePartial<CreateTaskCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTaskCommentRequest): CreateTaskCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                case /* string sender_id */ 2:
                    message.senderId = reader.string();
                    break;
                case /* string task_id */ 3:
                    message.taskId = reader.string();
                    break;
                case /* repeated storage.FileMetadata attachments */ 4:
                    message.attachments.push(FileMetadata.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTaskCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        /* string sender_id = 2; */
        if (message.senderId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.senderId);
        /* string task_id = 3; */
        if (message.taskId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.taskId);
        /* repeated storage.FileMetadata attachments = 4; */
        for (let i = 0; i < message.attachments.length; i++)
            FileMetadata.internalBinaryWrite(message.attachments[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.CreateTaskCommentRequest
 */
export const CreateTaskCommentRequest = new CreateTaskCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskCommentsRequest$Type extends MessageType<GetTaskCommentsRequest> {
    constructor() {
        super("management.GetTaskCommentsRequest", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTaskCommentsRequest>): GetTaskCommentsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = "";
        if (value !== undefined)
            reflectionMergePartial<GetTaskCommentsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskCommentsRequest): GetTaskCommentsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskCommentsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.GetTaskCommentsRequest
 */
export const GetTaskCommentsRequest = new GetTaskCommentsRequest$Type();
/**
 * @generated ServiceType for protobuf service management.EmployeeService
 */
export const EmployeeService = new ServiceType("management.EmployeeService", [
    { name: "CreateEmployee", options: {}, I: CreateEmployeeRequest, O: CreateEmployeeResponse },
    { name: "GetEmployee", serverStreaming: true, options: {}, I: CreateEmployeeRequest, O: Employee },
    { name: "BatchGetEmployees", serverStreaming: true, options: {}, I: BatchGetEmployeesRequest, O: Employee },
    { name: "UpdateEmployee", options: {}, I: UpdateEmployeeRequest, O: Employee },
    { name: "RemoveEmployee", options: {}, I: RemoveEmployeeRequest, O: Empty }
]);
/**
 * @generated ServiceType for protobuf service management.TeamService
 */
export const TeamService = new ServiceType("management.TeamService", [
    { name: "CreateTeam", options: {}, I: CreateTeamRequest, O: Team },
    { name: "AddTeamMember", options: {}, I: AddTeamMemberRequest, O: Team },
    { name: "RemoveTeamMember", options: {}, I: RemoveTeamMemberRequest, O: Team },
    { name: "GetTeam", options: {}, I: GetTeamRequest, O: Team },
    { name: "GetTeams", serverStreaming: true, options: {}, I: Empty, O: Team },
    { name: "UpdateTeam", options: {}, I: UpdateTeamRequest, O: Team },
    { name: "RemoveTeam", options: {}, I: RemoveTeamRequest, O: Empty }
]);
/**
 * @generated ServiceType for protobuf service management.TaskService
 */
export const TaskService = new ServiceType("management.TaskService", [
    { name: "CreateBoard", options: {}, I: CreateBoardRequest, O: Board },
    { name: "GetBoard", options: {}, I: GetBoardRequest, O: Board },
    { name: "GetBoards", serverStreaming: true, options: {}, I: GetBoardRequest, O: Board },
    { name: "UpdateBoard", options: {}, I: UpdateBoardRequest, O: Board },
    { name: "RemoveBoard", options: {}, I: RemoveBoardRequest, O: Empty },
    { name: "CreateBoardSection", options: {}, I: CreateBoardSectionRequest, O: BoardSection },
    { name: "GetBoardSections", serverStreaming: true, options: {}, I: GetBoardSectionRequest, O: BoardSection },
    { name: "UpdateBoardSection", options: {}, I: UpdateBoardSectionRequest, O: BoardSection },
    { name: "RemoveBoardSection", options: {}, I: RemoveBoardSectionRequest, O: Empty },
    { name: "CreateTask", options: {}, I: CreateTaskRequest, O: Task },
    { name: "AssignTask", options: {}, I: AssignTaskRequest, O: Task },
    { name: "RemoveAssignTask", options: {}, I: RemoveAssignTaskRequest, O: Task },
    { name: "GetTasksFromSection", serverStreaming: true, options: {}, I: GetTaskFromSectionRequest, O: Task },
    { name: "GetTask", options: {}, I: GetTaskRequest, O: Task },
    { name: "GetTasks", serverStreaming: true, options: {}, I: GetTaskRequest, O: Task },
    { name: "MoveTaskToBoardSection", options: {}, I: MoveTaskToBoardRequest, O: Empty },
    { name: "UpdateTask", options: {}, I: UpdateTaskRequest, O: Task },
    { name: "RemoveTask", options: {}, I: RemoveTaskRequest, O: Empty },
    { name: "CreateTaskLabel", options: {}, I: CreateTaskLabelRequest, O: TaskLabel },
    { name: "GetTaskLabel", options: {}, I: GetTaskLabelRequest, O: TaskLabel },
    { name: "GetTaskLabels", serverStreaming: true, options: {}, I: GetTaskLabelRequest, O: TaskLabel },
    { name: "UpdateTaskLabel", options: {}, I: UpdateTaskLabelRequest, O: TaskLabel },
    { name: "RemoveTaskLabel", options: {}, I: RemoveTaskLabelRequest, O: Empty },
    { name: "CreateTaskField", options: {}, I: CreateTaskFieldRequest, O: TaskField },
    { name: "GetTaskField", options: {}, I: GetTaskFieldRequest, O: TaskField },
    { name: "GetTaskFields", serverStreaming: true, options: {}, I: GetTaskFieldRequest, O: TaskField },
    { name: "UpdateTaskField", options: {}, I: UpdateTaskFieldRequest, O: TaskField },
    { name: "RemoveTaskField", options: {}, I: RemoveTaskFieldRequest, O: Empty },
    { name: "CreateTaskComment", options: {}, I: CreateTaskCommentRequest, O: TaskComment },
    { name: "GetTaskComments", serverStreaming: true, options: {}, I: GetTaskCommentsRequest, O: TaskComment }
]);
