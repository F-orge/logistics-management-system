// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "management.proto" (package "management", syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FileMetadata } from "./storage";
/**
 * @generated from protobuf message management.Employee
 */
export interface Employee {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: optional storage.FileMetadata avatar_photo = 2;
     */
    avatarPhoto?: FileMetadata;
    /**
     * @generated from protobuf field: optional storage.FileMetadata cover_photo = 3;
     */
    coverPhoto?: FileMetadata;
    /**
     * @generated from protobuf field: string first_name = 4;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string middle_name = 5;
     */
    middleName: string;
    /**
     * @generated from protobuf field: string last_name = 6;
     */
    lastName: string;
    /**
     * @generated from protobuf field: optional string tel_number = 7;
     */
    telNumber?: string;
    /**
     * @generated from protobuf field: optional string mobile_Number = 8;
     */
    mobileNumber?: string;
    /**
     * @generated from protobuf field: string email = 9;
     */
    email: string;
    /**
     * @generated from protobuf field: management.EmployeeRole role = 10;
     */
    role: EmployeeRole;
    /**
     * @generated from protobuf field: management.EmployeeStatus status = 11;
     */
    status: EmployeeStatus;
    /**
     * @generated from protobuf field: management.EmployeeContractType contract_type = 12;
     */
    contractType: EmployeeContractType;
    /**
     * @generated from protobuf field: string phil_nat_id = 13;
     */
    philNatId: string;
    /**
     * @generated from protobuf field: string birth_date = 14;
     */
    birthDate: string;
    /**
     * @generated from protobuf field: repeated string special_interests = 15;
     */
    specialInterests: string[];
    /**
     * @generated from protobuf field: repeated string learning_institutions = 16;
     */
    learningInstitutions: string[];
    /**
     * @generated from protobuf field: string auth_user_id = 17;
     */
    authUserId: string;
    /**
     * @generated from protobuf field: optional string spouse_first_name = 18;
     */
    spouseFirstName?: string;
    /**
     * @generated from protobuf field: optional string spouse_middle_name = 19;
     */
    spouseMiddleName?: string;
    /**
     * @generated from protobuf field: optional string spouse_last_name = 20;
     */
    spouseLastName?: string;
    /**
     * @generated from protobuf field: optional string spouse_employer = 21;
     */
    spouseEmployer?: string;
}
/**
 * @generated from protobuf message management.Department
 */
export interface Department {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: optional string description = 3;
     */
    description?: string;
    /**
     * @generated from protobuf field: repeated string employee_ids = 4;
     */
    employeeIds: string[];
}
/**
 * @generated from protobuf message management.JobInformation
 */
export interface JobInformation {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string employee_id = 3;
     */
    employeeId: string;
    /**
     * @generated from protobuf field: string department_id = 4;
     */
    departmentId: string;
    /**
     * @generated from protobuf field: string supervisor_id = 5;
     */
    supervisorId: string;
    /**
     * @generated from protobuf field: string work_location = 6;
     */
    workLocation: string;
    /**
     * @generated from protobuf field: string start_date = 7;
     */
    startDate: string;
    /**
     * @generated from protobuf field: string salary = 8;
     */
    salary: string;
    /**
     * @generated from protobuf field: string currency = 9;
     */
    currency: string;
}
/**
 * @generated from protobuf message management.EmployeeEmergencyInformation
 */
export interface EmployeeEmergencyInformation {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string employee_id = 2;
     */
    employeeId: string;
    /**
     * @generated from protobuf field: string address = 3;
     */
    address: string;
    /**
     * @generated from protobuf field: optional string tel_number = 4;
     */
    telNumber?: string;
    /**
     * @generated from protobuf field: optional string mobile_number = 5;
     */
    mobileNumber?: string;
    /**
     * @generated from protobuf field: repeated string health_conditions = 6;
     */
    healthConditions: string[];
    /**
     * @generated from protobuf field: string contact_name = 7;
     */
    contactName: string;
}
/**
 * @generated from protobuf message management.PersonnelAction
 */
export interface PersonnelAction {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string employee_id = 2;
     */
    employeeId: string;
    /**
     * @generated from protobuf field: management.EmployeePanActionType action_type = 3;
     */
    actionType: EmployeePanActionType;
    /**
     * @generated from protobuf field: string old_value = 4;
     */
    oldValue: string;
    /**
     * @generated from protobuf field: string new_value = 5;
     */
    newValue: string;
    /**
     * @generated from protobuf field: string effective_date = 6;
     */
    effectiveDate: string;
    /**
     * @generated from protobuf field: management.EmployeePanActionStatus status = 7;
     */
    status: EmployeePanActionStatus;
    /**
     * @generated from protobuf field: string requested_by = 8;
     */
    requestedBy: string;
    /**
     * @generated from protobuf field: string approved_by = 9;
     */
    approvedBy: string;
}
/**
 * @generated from protobuf message management.CreateEmployeeRequest
 */
export interface CreateEmployeeRequest {
    /**
     * @generated from protobuf field: optional storage.FileMetadata avatar_photo = 1;
     */
    avatarPhoto?: FileMetadata;
    /**
     * @generated from protobuf field: optional storage.FileMetadata cover_photo = 2;
     */
    coverPhoto?: FileMetadata;
    /**
     * @generated from protobuf field: string first_name = 3;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string middle_name = 4;
     */
    middleName: string;
    /**
     * @generated from protobuf field: string last_name = 5;
     */
    lastName: string;
    /**
     * @generated from protobuf field: optional string tel_number = 6;
     */
    telNumber?: string;
    /**
     * @generated from protobuf field: optional string mobile_Number = 7;
     */
    mobileNumber?: string;
    /**
     * @generated from protobuf field: string email = 8;
     */
    email: string;
    /**
     * @generated from protobuf field: management.EmployeeStatus status = 9;
     */
    status: EmployeeStatus;
    /**
     * @generated from protobuf field: management.EmployeeContractType contract_type = 10;
     */
    contractType: EmployeeContractType;
    /**
     * @generated from protobuf field: string phil_nat_id = 11;
     */
    philNatId: string;
    /**
     * @generated from protobuf field: string birth_date = 12;
     */
    birthDate: string;
    /**
     * @generated from protobuf field: repeated string special_interests = 13;
     */
    specialInterests: string[];
    /**
     * @generated from protobuf field: repeated string learning_institutions = 14;
     */
    learningInstitutions: string[];
    /**
     * @generated from protobuf field: optional string spouse_first_name = 15;
     */
    spouseFirstName?: string;
    /**
     * @generated from protobuf field: optional string spouse_middle_name = 16;
     */
    spouseMiddleName?: string;
    /**
     * @generated from protobuf field: optional string spouse_last_name = 17;
     */
    spouseLastName?: string;
    /**
     * @generated from protobuf field: optional string spouse_employer = 18;
     */
    spouseEmployer?: string;
}
/**
 * @generated from protobuf message management.GetEmployeeRequest
 */
export interface GetEmployeeRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message management.GetEmployeesByDepartmentRequest
 */
export interface GetEmployeesByDepartmentRequest {
    /**
     * @generated from protobuf field: string department_id = 1;
     */
    departmentId: string;
}
/**
 * @generated from protobuf message management.ChangeEmployeeAvatarRequest
 */
export interface ChangeEmployeeAvatarRequest {
    /**
     * @generated from protobuf field: storage.FileMetadata avatar_photo = 1;
     */
    avatarPhoto?: FileMetadata;
}
/**
 * @generated from protobuf message management.ChangeEmployeeCoverPhotoRequest
 */
export interface ChangeEmployeeCoverPhotoRequest {
    /**
     * @generated from protobuf field: storage.FileMetadata cover_photo = 1;
     */
    coverPhoto?: FileMetadata;
}
/**
 * @generated from protobuf message management.ChangeEmployeeFirstNameRequest
 */
export interface ChangeEmployeeFirstNameRequest {
    /**
     * @generated from protobuf field: string first_name = 1;
     */
    firstName: string;
}
/**
 * @generated from protobuf message management.ChangeEmployeeMiddleNameRequest
 */
export interface ChangeEmployeeMiddleNameRequest {
    /**
     * @generated from protobuf field: string middle_name = 1;
     */
    middleName: string;
}
/**
 * @generated from protobuf message management.ChangeEmployeeLastNameRequest
 */
export interface ChangeEmployeeLastNameRequest {
    /**
     * @generated from protobuf field: string last_name = 1;
     */
    lastName: string;
}
/**
 * @generated from protobuf message management.ChangeEmployeeTelNumberRequest
 */
export interface ChangeEmployeeTelNumberRequest {
    /**
     * @generated from protobuf field: string tel_number = 1;
     */
    telNumber: string;
}
/**
 * @generated from protobuf message management.ChangeEmployeeMobileNumberRequest
 */
export interface ChangeEmployeeMobileNumberRequest {
    /**
     * @generated from protobuf field: string mobile_number = 1;
     */
    mobileNumber: string;
}
/**
 * @generated from protobuf message management.ChangeEmployeeEmailRequest
 */
export interface ChangeEmployeeEmailRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
}
/**
 * @generated from protobuf message management.ChangeEmployeeRoleRequest
 */
export interface ChangeEmployeeRoleRequest {
    /**
     * @generated from protobuf field: management.EmployeeRole role = 1;
     */
    role: EmployeeRole;
}
/**
 * @generated from protobuf message management.ChangeEmployeeStatusRequest
 */
export interface ChangeEmployeeStatusRequest {
    /**
     * @generated from protobuf field: management.EmployeeStatus status = 1;
     */
    status: EmployeeStatus;
}
/**
 * @generated from protobuf message management.ChangeEmployeeContractTypeRequest
 */
export interface ChangeEmployeeContractTypeRequest {
    /**
     * @generated from protobuf field: management.EmployeeContractType contract_type = 1;
     */
    contractType: EmployeeContractType;
}
/**
 * @generated from protobuf message management.ChangePhilNatIDRequest
 */
export interface ChangePhilNatIDRequest {
    /**
     * @generated from protobuf field: string phil_nat_id = 1;
     */
    philNatId: string;
}
/**
 * @generated from protobuf message management.ChangeBirthDateRequest
 */
export interface ChangeBirthDateRequest {
    /**
     * @generated from protobuf field: string birth_date = 1;
     */
    birthDate: string;
}
/**
 * @generated from protobuf message management.AddSpecialInterestRequest
 */
export interface AddSpecialInterestRequest {
    /**
     * @generated from protobuf field: string special_interest = 1;
     */
    specialInterest: string;
}
/**
 * @generated from protobuf message management.RemoveSpecialInterestRequest
 */
export interface RemoveSpecialInterestRequest {
    /**
     * @generated from protobuf field: string special_interest = 1;
     */
    specialInterest: string;
}
/**
 * @generated from protobuf message management.AddLearningInstitutionRequest
 */
export interface AddLearningInstitutionRequest {
    /**
     * @generated from protobuf field: string learning_institution = 1;
     */
    learningInstitution: string;
}
/**
 * @generated from protobuf message management.RemoveLearningInstitutionRequest
 */
export interface RemoveLearningInstitutionRequest {
    /**
     * @generated from protobuf field: string learning_institution = 1;
     */
    learningInstitution: string;
}
/**
 * @generated from protobuf message management.ChangeSpouseFirstNameRequest
 */
export interface ChangeSpouseFirstNameRequest {
    /**
     * @generated from protobuf field: string spouse_first_name = 1;
     */
    spouseFirstName: string;
}
/**
 * @generated from protobuf message management.ChangeSpouseMiddleNameRequest
 */
export interface ChangeSpouseMiddleNameRequest {
    /**
     * @generated from protobuf field: string spouse_middle_name = 1;
     */
    spouseMiddleName: string;
}
/**
 * @generated from protobuf message management.ChangeSpouseLastNameRequest
 */
export interface ChangeSpouseLastNameRequest {
    /**
     * @generated from protobuf field: string spouse_last_name = 1;
     */
    spouseLastName: string;
}
/**
 * @generated from protobuf message management.ChangeSpouseEmployerRequest
 */
export interface ChangeSpouseEmployerRequest {
    /**
     * @generated from protobuf field: string spouse_employer = 1;
     */
    spouseEmployer: string;
}
/**
 * @generated from protobuf message management.RemoveEmployeeRequest
 */
export interface RemoveEmployeeRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message management.CreateDepartmentRequest
 */
export interface CreateDepartmentRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: optional string description = 2;
     */
    description?: string;
}
/**
 * @generated from protobuf message management.AddEmployeeToDepartmentRequest
 */
export interface AddEmployeeToDepartmentRequest {
    /**
     * @generated from protobuf field: string employee_id = 1;
     */
    employeeId: string;
    /**
     * @generated from protobuf field: string department_id = 2;
     */
    departmentId: string;
}
/**
 * @generated from protobuf message management.RemoveEmployeeFromDepartmentRequest
 */
export interface RemoveEmployeeFromDepartmentRequest {
    /**
     * @generated from protobuf field: string employee_id = 1;
     */
    employeeId: string;
    /**
     * @generated from protobuf field: string department_id = 2;
     */
    departmentId: string;
}
/**
 * @generated from protobuf message management.GetDepartmentRequest
 */
export interface GetDepartmentRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message management.UpdateDepartmentNameRequest
 */
export interface UpdateDepartmentNameRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message management.UpdateDepartmentDescriptionRequest
 */
export interface UpdateDepartmentDescriptionRequest {
    /**
     * @generated from protobuf field: string description = 1;
     */
    description: string;
}
/**
 * @generated from protobuf message management.RemoveDepartmentRequest
 */
export interface RemoveDepartmentRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message management.CreateJobInformationRequest
 */
export interface CreateJobInformationRequest {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string employee_id = 2;
     */
    employeeId: string;
    /**
     * @generated from protobuf field: string department_id = 3;
     */
    departmentId: string;
    /**
     * @generated from protobuf field: string supervisor_id = 4;
     */
    supervisorId: string;
    /**
     * @generated from protobuf field: string work_location = 5;
     */
    workLocation: string;
    /**
     * @generated from protobuf field: string start_date = 6;
     */
    startDate: string;
    /**
     * @generated from protobuf field: string salary = 7;
     */
    salary: string;
    /**
     * @generated from protobuf field: string currency = 8;
     */
    currency: string;
}
/**
 * @generated from protobuf message management.GetJobInformationRequest
 */
export interface GetJobInformationRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message management.ChangeJobTitleRequest
 */
export interface ChangeJobTitleRequest {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
}
/**
 * @generated from protobuf message management.ChangeJobDepartmentRequest
 */
export interface ChangeJobDepartmentRequest {
    /**
     * @generated from protobuf field: string department_id = 1;
     */
    departmentId: string;
}
/**
 * @generated from protobuf message management.ChangeJobSupervisorRequest
 */
export interface ChangeJobSupervisorRequest {
    /**
     * @generated from protobuf field: string supervisor_id = 1;
     */
    supervisorId: string;
}
/**
 * @generated from protobuf message management.ChangeJobWorkLocationRequest
 */
export interface ChangeJobWorkLocationRequest {
    /**
     * @generated from protobuf field: string work_location = 1;
     */
    workLocation: string;
}
/**
 * @generated from protobuf message management.ChangeJobStartDateRequest
 */
export interface ChangeJobStartDateRequest {
    /**
     * @generated from protobuf field: string start_date = 1;
     */
    startDate: string;
}
/**
 * @generated from protobuf message management.ChangeJobSalaryRequest
 */
export interface ChangeJobSalaryRequest {
    /**
     * @generated from protobuf field: string salary = 1;
     */
    salary: string;
}
/**
 * @generated from protobuf message management.ChangeJobCurrencyRequest
 */
export interface ChangeJobCurrencyRequest {
    /**
     * @generated from protobuf field: string currency = 1;
     */
    currency: string;
}
/**
 * @generated from protobuf message management.RemoveJobInformationRequest
 */
export interface RemoveJobInformationRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message management.CreateEmergencyInformationRequest
 */
export interface CreateEmergencyInformationRequest {
    /**
     * @generated from protobuf field: string employee_id = 1;
     */
    employeeId: string;
    /**
     * @generated from protobuf field: string address = 2;
     */
    address: string;
    /**
     * @generated from protobuf field: optional string tel_number = 3;
     */
    telNumber?: string;
    /**
     * @generated from protobuf field: optional string mobile_number = 4;
     */
    mobileNumber?: string;
    /**
     * @generated from protobuf field: repeated string health_conditions = 5;
     */
    healthConditions: string[];
    /**
     * @generated from protobuf field: string contact_name = 6;
     */
    contactName: string;
}
/**
 * @generated from protobuf message management.GetEmergencyInformationRequest
 */
export interface GetEmergencyInformationRequest {
    /**
     * @generated from protobuf field: string employee_id = 1;
     */
    employeeId: string;
}
/**
 * @generated from protobuf message management.ChangeEmergencyInformationAddressRequest
 */
export interface ChangeEmergencyInformationAddressRequest {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
}
/**
 * @generated from protobuf message management.ChangeEmergencyInformationTelNumberRequest
 */
export interface ChangeEmergencyInformationTelNumberRequest {
    /**
     * @generated from protobuf field: string tel_number = 1;
     */
    telNumber: string;
}
/**
 * @generated from protobuf message management.ChangeEmergencyInformationMobileNumberRequest
 */
export interface ChangeEmergencyInformationMobileNumberRequest {
    /**
     * @generated from protobuf field: string mobile_number = 1;
     */
    mobileNumber: string;
}
/**
 * @generated from protobuf message management.ChangeEmergencyInformationContactNameRequest
 */
export interface ChangeEmergencyInformationContactNameRequest {
    /**
     * @generated from protobuf field: string contact_name = 1;
     */
    contactName: string;
}
/**
 * @generated from protobuf message management.RemoveEmergencyInformationRequest
 */
export interface RemoveEmergencyInformationRequest {
    /**
     * @generated from protobuf field: string employee_id = 1;
     */
    employeeId: string;
}
/**
 * @generated from protobuf message management.AddEmergencyInformationHealthConditionRequest
 */
export interface AddEmergencyInformationHealthConditionRequest {
    /**
     * @generated from protobuf field: string health_condition = 1;
     */
    healthCondition: string;
}
/**
 * @generated from protobuf message management.RemoveEmergencyInformationHealthConditionRequest
 */
export interface RemoveEmergencyInformationHealthConditionRequest {
    /**
     * @generated from protobuf field: string health_condition = 1;
     */
    healthCondition: string;
}
/**
 * @generated from protobuf message management.CreatePANRequest
 */
export interface CreatePANRequest {
    /**
     * @generated from protobuf field: string employee_id = 1;
     */
    employeeId: string;
    /**
     * @generated from protobuf field: management.EmployeePanActionType action_type = 2;
     */
    actionType: EmployeePanActionType;
    /**
     * @generated from protobuf field: string old_value = 3;
     */
    oldValue: string;
    /**
     * @generated from protobuf field: string new_value = 4;
     */
    newValue: string;
    /**
     * @generated from protobuf field: string effective_date = 5;
     */
    effectiveDate: string;
    /**
     * @generated from protobuf field: management.EmployeePanActionStatus status = 6;
     */
    status: EmployeePanActionStatus;
}
/**
 * @generated from protobuf message management.GetPANInformationRequest
 */
export interface GetPANInformationRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message management.ChangePANActionTypeRequest
 */
export interface ChangePANActionTypeRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: management.EmployeePanActionType action_type = 2;
     */
    actionType: EmployeePanActionType;
}
/**
 * @generated from protobuf message management.ChangePANOldValueRequest
 */
export interface ChangePANOldValueRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string old_value = 2;
     */
    oldValue: string;
}
/**
 * @generated from protobuf message management.ChangePANNewValueRequest
 */
export interface ChangePANNewValueRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string new_value = 2;
     */
    newValue: string;
}
/**
 * @generated from protobuf message management.ChangePANEffectiveDateRequest
 */
export interface ChangePANEffectiveDateRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string effective_date = 2;
     */
    effectiveDate: string;
}
/**
 * @generated from protobuf message management.ApprovePANRequest
 */
export interface ApprovePANRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message management.RejectPANRequest
 */
export interface RejectPANRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message management.RemovePANInformationRequest
 */
export interface RemovePANInformationRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf enum management.EmployeeMaritalStatus
 */
export enum EmployeeMaritalStatus {
    /**
     * @generated from protobuf enum value: MARITAl_STATUS_SINGLE = 0;
     */
    MARITAl_STATUS_SINGLE = 0,
    /**
     * @generated from protobuf enum value: MARITAl_STATUS_MARRIED = 1;
     */
    MARITAl_STATUS_MARRIED = 1,
    /**
     * @generated from protobuf enum value: MARITAl_STATUS_DIVORCED = 2;
     */
    MARITAl_STATUS_DIVORCED = 2,
    /**
     * @generated from protobuf enum value: MARITAl_STATUS_WIDOWED = 3;
     */
    MARITAl_STATUS_WIDOWED = 3,
    /**
     * @generated from protobuf enum value: MARITAl_STATUS_SEPERATED = 4;
     */
    MARITAl_STATUS_SEPERATED = 4
}
/**
 * @generated from protobuf enum management.EmployeeRole
 */
export enum EmployeeRole {
    /**
     * @generated from protobuf enum value: ROLE_SUPER_ADMIN = 0;
     */
    ROLE_SUPER_ADMIN = 0,
    /**
     * @generated from protobuf enum value: ROLE_MANAGER = 1;
     */
    ROLE_MANAGER = 1,
    /**
     * @generated from protobuf enum value: ROLE_EMPLOYEE = 2;
     */
    ROLE_EMPLOYEE = 2
}
/**
 * @generated from protobuf enum management.EmployeePanActionType
 */
export enum EmployeePanActionType {
    /**
     * @generated from protobuf enum value: EMPLOYEE_PAN_ACTION_TYPE_HIRE = 0;
     */
    HIRE = 0,
    /**
     * @generated from protobuf enum value: EMPLOYEE_PAN_ACTION_TYPE_PROMOTION = 1;
     */
    PROMOTION = 1,
    /**
     * @generated from protobuf enum value: EMPLOYEE_PAN_ACTION_TYPE_SALARY_ADJUSTMENT = 2;
     */
    SALARY_ADJUSTMENT = 2,
    /**
     * @generated from protobuf enum value: EMPLOYEE_PAN_ACTION_TYPE_TERMINATION = 3;
     */
    TERMINATION = 3,
    /**
     * @generated from protobuf enum value: EMPLOYEE_PAN_ACTION_TYPE_LEAVE = 4;
     */
    LEAVE = 4,
    /**
     * @generated from protobuf enum value: EMPLOYEE_PAN_ACTION_TYPE_TRANSFER = 5;
     */
    TRANSFER = 5
}
/**
 * @generated from protobuf enum management.EmployeePanActionStatus
 */
export enum EmployeePanActionStatus {
    /**
     * @generated from protobuf enum value: EMPLOYEE_PAN_ACTION_STATUS_PENDING = 0;
     */
    PENDING = 0,
    /**
     * @generated from protobuf enum value: EMPLOYEE_PAN_ACTION_STATUS_APPROVED = 1;
     */
    APPROVED = 1,
    /**
     * @generated from protobuf enum value: EMPLOYEE_PAN_ACTION_STATUS_REJECTED = 2;
     */
    REJECTED = 2
}
/**
 * @generated from protobuf enum management.EmployeeStatus
 */
export enum EmployeeStatus {
    /**
     * @generated from protobuf enum value: EMPLOYEE_STATUS_ACTIVE = 0;
     */
    ACTIVE = 0,
    /**
     * @generated from protobuf enum value: EMPLOYEE_STATUS_INACTIVE = 1;
     */
    INACTIVE = 1
}
/**
 * @generated from protobuf enum management.EmployeeContractType
 */
export enum EmployeeContractType {
    /**
     * @generated from protobuf enum value: CONTRACT_TYPE_FULL_TIME = 0;
     */
    CONTRACT_TYPE_FULL_TIME = 0,
    /**
     * @generated from protobuf enum value: CONTRACT_TYPE_PART_TIME = 1;
     */
    CONTRACT_TYPE_PART_TIME = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Employee$Type extends MessageType<Employee> {
    constructor() {
        super("management.Employee", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "avatar_photo", kind: "message", T: () => FileMetadata },
            { no: 3, name: "cover_photo", kind: "message", T: () => FileMetadata },
            { no: 4, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "middle_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "tel_number", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "mobile_Number", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "role", kind: "enum", T: () => ["management.EmployeeRole", EmployeeRole] },
            { no: 11, name: "status", kind: "enum", T: () => ["management.EmployeeStatus", EmployeeStatus, "EMPLOYEE_STATUS_"] },
            { no: 12, name: "contract_type", kind: "enum", T: () => ["management.EmployeeContractType", EmployeeContractType] },
            { no: 13, name: "phil_nat_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "birth_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "special_interests", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "learning_institutions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "auth_user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "spouse_first_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "spouse_middle_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "spouse_last_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "spouse_employer", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Employee>): Employee {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.firstName = "";
        message.middleName = "";
        message.lastName = "";
        message.email = "";
        message.role = 0;
        message.status = 0;
        message.contractType = 0;
        message.philNatId = "";
        message.birthDate = "";
        message.specialInterests = [];
        message.learningInstitutions = [];
        message.authUserId = "";
        if (value !== undefined)
            reflectionMergePartial<Employee>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Employee): Employee {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* optional storage.FileMetadata avatar_photo */ 2:
                    message.avatarPhoto = FileMetadata.internalBinaryRead(reader, reader.uint32(), options, message.avatarPhoto);
                    break;
                case /* optional storage.FileMetadata cover_photo */ 3:
                    message.coverPhoto = FileMetadata.internalBinaryRead(reader, reader.uint32(), options, message.coverPhoto);
                    break;
                case /* string first_name */ 4:
                    message.firstName = reader.string();
                    break;
                case /* string middle_name */ 5:
                    message.middleName = reader.string();
                    break;
                case /* string last_name */ 6:
                    message.lastName = reader.string();
                    break;
                case /* optional string tel_number */ 7:
                    message.telNumber = reader.string();
                    break;
                case /* optional string mobile_Number */ 8:
                    message.mobileNumber = reader.string();
                    break;
                case /* string email */ 9:
                    message.email = reader.string();
                    break;
                case /* management.EmployeeRole role */ 10:
                    message.role = reader.int32();
                    break;
                case /* management.EmployeeStatus status */ 11:
                    message.status = reader.int32();
                    break;
                case /* management.EmployeeContractType contract_type */ 12:
                    message.contractType = reader.int32();
                    break;
                case /* string phil_nat_id */ 13:
                    message.philNatId = reader.string();
                    break;
                case /* string birth_date */ 14:
                    message.birthDate = reader.string();
                    break;
                case /* repeated string special_interests */ 15:
                    message.specialInterests.push(reader.string());
                    break;
                case /* repeated string learning_institutions */ 16:
                    message.learningInstitutions.push(reader.string());
                    break;
                case /* string auth_user_id */ 17:
                    message.authUserId = reader.string();
                    break;
                case /* optional string spouse_first_name */ 18:
                    message.spouseFirstName = reader.string();
                    break;
                case /* optional string spouse_middle_name */ 19:
                    message.spouseMiddleName = reader.string();
                    break;
                case /* optional string spouse_last_name */ 20:
                    message.spouseLastName = reader.string();
                    break;
                case /* optional string spouse_employer */ 21:
                    message.spouseEmployer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Employee, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* optional storage.FileMetadata avatar_photo = 2; */
        if (message.avatarPhoto)
            FileMetadata.internalBinaryWrite(message.avatarPhoto, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional storage.FileMetadata cover_photo = 3; */
        if (message.coverPhoto)
            FileMetadata.internalBinaryWrite(message.coverPhoto, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string first_name = 4; */
        if (message.firstName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.firstName);
        /* string middle_name = 5; */
        if (message.middleName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.middleName);
        /* string last_name = 6; */
        if (message.lastName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.lastName);
        /* optional string tel_number = 7; */
        if (message.telNumber !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.telNumber);
        /* optional string mobile_Number = 8; */
        if (message.mobileNumber !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.mobileNumber);
        /* string email = 9; */
        if (message.email !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.email);
        /* management.EmployeeRole role = 10; */
        if (message.role !== 0)
            writer.tag(10, WireType.Varint).int32(message.role);
        /* management.EmployeeStatus status = 11; */
        if (message.status !== 0)
            writer.tag(11, WireType.Varint).int32(message.status);
        /* management.EmployeeContractType contract_type = 12; */
        if (message.contractType !== 0)
            writer.tag(12, WireType.Varint).int32(message.contractType);
        /* string phil_nat_id = 13; */
        if (message.philNatId !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.philNatId);
        /* string birth_date = 14; */
        if (message.birthDate !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.birthDate);
        /* repeated string special_interests = 15; */
        for (let i = 0; i < message.specialInterests.length; i++)
            writer.tag(15, WireType.LengthDelimited).string(message.specialInterests[i]);
        /* repeated string learning_institutions = 16; */
        for (let i = 0; i < message.learningInstitutions.length; i++)
            writer.tag(16, WireType.LengthDelimited).string(message.learningInstitutions[i]);
        /* string auth_user_id = 17; */
        if (message.authUserId !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.authUserId);
        /* optional string spouse_first_name = 18; */
        if (message.spouseFirstName !== undefined)
            writer.tag(18, WireType.LengthDelimited).string(message.spouseFirstName);
        /* optional string spouse_middle_name = 19; */
        if (message.spouseMiddleName !== undefined)
            writer.tag(19, WireType.LengthDelimited).string(message.spouseMiddleName);
        /* optional string spouse_last_name = 20; */
        if (message.spouseLastName !== undefined)
            writer.tag(20, WireType.LengthDelimited).string(message.spouseLastName);
        /* optional string spouse_employer = 21; */
        if (message.spouseEmployer !== undefined)
            writer.tag(21, WireType.LengthDelimited).string(message.spouseEmployer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.Employee
 */
export const Employee = new Employee$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Department$Type extends MessageType<Department> {
    constructor() {
        super("management.Department", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "employee_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Department>): Department {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.employeeIds = [];
        if (value !== undefined)
            reflectionMergePartial<Department>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Department): Department {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* optional string description */ 3:
                    message.description = reader.string();
                    break;
                case /* repeated string employee_ids */ 4:
                    message.employeeIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Department, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional string description = 3; */
        if (message.description !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* repeated string employee_ids = 4; */
        for (let i = 0; i < message.employeeIds.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.employeeIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.Department
 */
export const Department = new Department$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobInformation$Type extends MessageType<JobInformation> {
    constructor() {
        super("management.JobInformation", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "employee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "department_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "supervisor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "work_location", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "start_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "salary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JobInformation>): JobInformation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.title = "";
        message.employeeId = "";
        message.departmentId = "";
        message.supervisorId = "";
        message.workLocation = "";
        message.startDate = "";
        message.salary = "";
        message.currency = "";
        if (value !== undefined)
            reflectionMergePartial<JobInformation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobInformation): JobInformation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string employee_id */ 3:
                    message.employeeId = reader.string();
                    break;
                case /* string department_id */ 4:
                    message.departmentId = reader.string();
                    break;
                case /* string supervisor_id */ 5:
                    message.supervisorId = reader.string();
                    break;
                case /* string work_location */ 6:
                    message.workLocation = reader.string();
                    break;
                case /* string start_date */ 7:
                    message.startDate = reader.string();
                    break;
                case /* string salary */ 8:
                    message.salary = reader.string();
                    break;
                case /* string currency */ 9:
                    message.currency = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobInformation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string employee_id = 3; */
        if (message.employeeId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.employeeId);
        /* string department_id = 4; */
        if (message.departmentId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.departmentId);
        /* string supervisor_id = 5; */
        if (message.supervisorId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.supervisorId);
        /* string work_location = 6; */
        if (message.workLocation !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.workLocation);
        /* string start_date = 7; */
        if (message.startDate !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.startDate);
        /* string salary = 8; */
        if (message.salary !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.salary);
        /* string currency = 9; */
        if (message.currency !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.currency);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.JobInformation
 */
export const JobInformation = new JobInformation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmployeeEmergencyInformation$Type extends MessageType<EmployeeEmergencyInformation> {
    constructor() {
        super("management.EmployeeEmergencyInformation", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "employee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "tel_number", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "mobile_number", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "health_conditions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "contact_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EmployeeEmergencyInformation>): EmployeeEmergencyInformation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.employeeId = "";
        message.address = "";
        message.healthConditions = [];
        message.contactName = "";
        if (value !== undefined)
            reflectionMergePartial<EmployeeEmergencyInformation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmployeeEmergencyInformation): EmployeeEmergencyInformation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string employee_id */ 2:
                    message.employeeId = reader.string();
                    break;
                case /* string address */ 3:
                    message.address = reader.string();
                    break;
                case /* optional string tel_number */ 4:
                    message.telNumber = reader.string();
                    break;
                case /* optional string mobile_number */ 5:
                    message.mobileNumber = reader.string();
                    break;
                case /* repeated string health_conditions */ 6:
                    message.healthConditions.push(reader.string());
                    break;
                case /* string contact_name */ 7:
                    message.contactName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmployeeEmergencyInformation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string employee_id = 2; */
        if (message.employeeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.employeeId);
        /* string address = 3; */
        if (message.address !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.address);
        /* optional string tel_number = 4; */
        if (message.telNumber !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.telNumber);
        /* optional string mobile_number = 5; */
        if (message.mobileNumber !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.mobileNumber);
        /* repeated string health_conditions = 6; */
        for (let i = 0; i < message.healthConditions.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.healthConditions[i]);
        /* string contact_name = 7; */
        if (message.contactName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.contactName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.EmployeeEmergencyInformation
 */
export const EmployeeEmergencyInformation = new EmployeeEmergencyInformation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PersonnelAction$Type extends MessageType<PersonnelAction> {
    constructor() {
        super("management.PersonnelAction", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "employee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "action_type", kind: "enum", T: () => ["management.EmployeePanActionType", EmployeePanActionType, "EMPLOYEE_PAN_ACTION_TYPE_"] },
            { no: 4, name: "old_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "new_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "effective_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "status", kind: "enum", T: () => ["management.EmployeePanActionStatus", EmployeePanActionStatus, "EMPLOYEE_PAN_ACTION_STATUS_"] },
            { no: 8, name: "requested_by", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "approved_by", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PersonnelAction>): PersonnelAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.employeeId = "";
        message.actionType = 0;
        message.oldValue = "";
        message.newValue = "";
        message.effectiveDate = "";
        message.status = 0;
        message.requestedBy = "";
        message.approvedBy = "";
        if (value !== undefined)
            reflectionMergePartial<PersonnelAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PersonnelAction): PersonnelAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string employee_id */ 2:
                    message.employeeId = reader.string();
                    break;
                case /* management.EmployeePanActionType action_type */ 3:
                    message.actionType = reader.int32();
                    break;
                case /* string old_value */ 4:
                    message.oldValue = reader.string();
                    break;
                case /* string new_value */ 5:
                    message.newValue = reader.string();
                    break;
                case /* string effective_date */ 6:
                    message.effectiveDate = reader.string();
                    break;
                case /* management.EmployeePanActionStatus status */ 7:
                    message.status = reader.int32();
                    break;
                case /* string requested_by */ 8:
                    message.requestedBy = reader.string();
                    break;
                case /* string approved_by */ 9:
                    message.approvedBy = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PersonnelAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string employee_id = 2; */
        if (message.employeeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.employeeId);
        /* management.EmployeePanActionType action_type = 3; */
        if (message.actionType !== 0)
            writer.tag(3, WireType.Varint).int32(message.actionType);
        /* string old_value = 4; */
        if (message.oldValue !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.oldValue);
        /* string new_value = 5; */
        if (message.newValue !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.newValue);
        /* string effective_date = 6; */
        if (message.effectiveDate !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.effectiveDate);
        /* management.EmployeePanActionStatus status = 7; */
        if (message.status !== 0)
            writer.tag(7, WireType.Varint).int32(message.status);
        /* string requested_by = 8; */
        if (message.requestedBy !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.requestedBy);
        /* string approved_by = 9; */
        if (message.approvedBy !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.approvedBy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.PersonnelAction
 */
export const PersonnelAction = new PersonnelAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateEmployeeRequest$Type extends MessageType<CreateEmployeeRequest> {
    constructor() {
        super("management.CreateEmployeeRequest", [
            { no: 1, name: "avatar_photo", kind: "message", T: () => FileMetadata },
            { no: 2, name: "cover_photo", kind: "message", T: () => FileMetadata },
            { no: 3, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "middle_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "tel_number", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "mobile_Number", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "status", kind: "enum", T: () => ["management.EmployeeStatus", EmployeeStatus, "EMPLOYEE_STATUS_"] },
            { no: 10, name: "contract_type", kind: "enum", T: () => ["management.EmployeeContractType", EmployeeContractType] },
            { no: 11, name: "phil_nat_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "birth_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "special_interests", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "learning_institutions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "spouse_first_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "spouse_middle_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "spouse_last_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "spouse_employer", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateEmployeeRequest>): CreateEmployeeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.firstName = "";
        message.middleName = "";
        message.lastName = "";
        message.email = "";
        message.status = 0;
        message.contractType = 0;
        message.philNatId = "";
        message.birthDate = "";
        message.specialInterests = [];
        message.learningInstitutions = [];
        if (value !== undefined)
            reflectionMergePartial<CreateEmployeeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateEmployeeRequest): CreateEmployeeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional storage.FileMetadata avatar_photo */ 1:
                    message.avatarPhoto = FileMetadata.internalBinaryRead(reader, reader.uint32(), options, message.avatarPhoto);
                    break;
                case /* optional storage.FileMetadata cover_photo */ 2:
                    message.coverPhoto = FileMetadata.internalBinaryRead(reader, reader.uint32(), options, message.coverPhoto);
                    break;
                case /* string first_name */ 3:
                    message.firstName = reader.string();
                    break;
                case /* string middle_name */ 4:
                    message.middleName = reader.string();
                    break;
                case /* string last_name */ 5:
                    message.lastName = reader.string();
                    break;
                case /* optional string tel_number */ 6:
                    message.telNumber = reader.string();
                    break;
                case /* optional string mobile_Number */ 7:
                    message.mobileNumber = reader.string();
                    break;
                case /* string email */ 8:
                    message.email = reader.string();
                    break;
                case /* management.EmployeeStatus status */ 9:
                    message.status = reader.int32();
                    break;
                case /* management.EmployeeContractType contract_type */ 10:
                    message.contractType = reader.int32();
                    break;
                case /* string phil_nat_id */ 11:
                    message.philNatId = reader.string();
                    break;
                case /* string birth_date */ 12:
                    message.birthDate = reader.string();
                    break;
                case /* repeated string special_interests */ 13:
                    message.specialInterests.push(reader.string());
                    break;
                case /* repeated string learning_institutions */ 14:
                    message.learningInstitutions.push(reader.string());
                    break;
                case /* optional string spouse_first_name */ 15:
                    message.spouseFirstName = reader.string();
                    break;
                case /* optional string spouse_middle_name */ 16:
                    message.spouseMiddleName = reader.string();
                    break;
                case /* optional string spouse_last_name */ 17:
                    message.spouseLastName = reader.string();
                    break;
                case /* optional string spouse_employer */ 18:
                    message.spouseEmployer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateEmployeeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional storage.FileMetadata avatar_photo = 1; */
        if (message.avatarPhoto)
            FileMetadata.internalBinaryWrite(message.avatarPhoto, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional storage.FileMetadata cover_photo = 2; */
        if (message.coverPhoto)
            FileMetadata.internalBinaryWrite(message.coverPhoto, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string first_name = 3; */
        if (message.firstName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.firstName);
        /* string middle_name = 4; */
        if (message.middleName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.middleName);
        /* string last_name = 5; */
        if (message.lastName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.lastName);
        /* optional string tel_number = 6; */
        if (message.telNumber !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.telNumber);
        /* optional string mobile_Number = 7; */
        if (message.mobileNumber !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.mobileNumber);
        /* string email = 8; */
        if (message.email !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.email);
        /* management.EmployeeStatus status = 9; */
        if (message.status !== 0)
            writer.tag(9, WireType.Varint).int32(message.status);
        /* management.EmployeeContractType contract_type = 10; */
        if (message.contractType !== 0)
            writer.tag(10, WireType.Varint).int32(message.contractType);
        /* string phil_nat_id = 11; */
        if (message.philNatId !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.philNatId);
        /* string birth_date = 12; */
        if (message.birthDate !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.birthDate);
        /* repeated string special_interests = 13; */
        for (let i = 0; i < message.specialInterests.length; i++)
            writer.tag(13, WireType.LengthDelimited).string(message.specialInterests[i]);
        /* repeated string learning_institutions = 14; */
        for (let i = 0; i < message.learningInstitutions.length; i++)
            writer.tag(14, WireType.LengthDelimited).string(message.learningInstitutions[i]);
        /* optional string spouse_first_name = 15; */
        if (message.spouseFirstName !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.spouseFirstName);
        /* optional string spouse_middle_name = 16; */
        if (message.spouseMiddleName !== undefined)
            writer.tag(16, WireType.LengthDelimited).string(message.spouseMiddleName);
        /* optional string spouse_last_name = 17; */
        if (message.spouseLastName !== undefined)
            writer.tag(17, WireType.LengthDelimited).string(message.spouseLastName);
        /* optional string spouse_employer = 18; */
        if (message.spouseEmployer !== undefined)
            writer.tag(18, WireType.LengthDelimited).string(message.spouseEmployer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.CreateEmployeeRequest
 */
export const CreateEmployeeRequest = new CreateEmployeeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetEmployeeRequest$Type extends MessageType<GetEmployeeRequest> {
    constructor() {
        super("management.GetEmployeeRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetEmployeeRequest>): GetEmployeeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetEmployeeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetEmployeeRequest): GetEmployeeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetEmployeeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.GetEmployeeRequest
 */
export const GetEmployeeRequest = new GetEmployeeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetEmployeesByDepartmentRequest$Type extends MessageType<GetEmployeesByDepartmentRequest> {
    constructor() {
        super("management.GetEmployeesByDepartmentRequest", [
            { no: 1, name: "department_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetEmployeesByDepartmentRequest>): GetEmployeesByDepartmentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.departmentId = "";
        if (value !== undefined)
            reflectionMergePartial<GetEmployeesByDepartmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetEmployeesByDepartmentRequest): GetEmployeesByDepartmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string department_id */ 1:
                    message.departmentId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetEmployeesByDepartmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string department_id = 1; */
        if (message.departmentId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.departmentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.GetEmployeesByDepartmentRequest
 */
export const GetEmployeesByDepartmentRequest = new GetEmployeesByDepartmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeEmployeeAvatarRequest$Type extends MessageType<ChangeEmployeeAvatarRequest> {
    constructor() {
        super("management.ChangeEmployeeAvatarRequest", [
            { no: 1, name: "avatar_photo", kind: "message", T: () => FileMetadata }
        ]);
    }
    create(value?: PartialMessage<ChangeEmployeeAvatarRequest>): ChangeEmployeeAvatarRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ChangeEmployeeAvatarRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeEmployeeAvatarRequest): ChangeEmployeeAvatarRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* storage.FileMetadata avatar_photo */ 1:
                    message.avatarPhoto = FileMetadata.internalBinaryRead(reader, reader.uint32(), options, message.avatarPhoto);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeEmployeeAvatarRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* storage.FileMetadata avatar_photo = 1; */
        if (message.avatarPhoto)
            FileMetadata.internalBinaryWrite(message.avatarPhoto, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeEmployeeAvatarRequest
 */
export const ChangeEmployeeAvatarRequest = new ChangeEmployeeAvatarRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeEmployeeCoverPhotoRequest$Type extends MessageType<ChangeEmployeeCoverPhotoRequest> {
    constructor() {
        super("management.ChangeEmployeeCoverPhotoRequest", [
            { no: 1, name: "cover_photo", kind: "message", T: () => FileMetadata }
        ]);
    }
    create(value?: PartialMessage<ChangeEmployeeCoverPhotoRequest>): ChangeEmployeeCoverPhotoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ChangeEmployeeCoverPhotoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeEmployeeCoverPhotoRequest): ChangeEmployeeCoverPhotoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* storage.FileMetadata cover_photo */ 1:
                    message.coverPhoto = FileMetadata.internalBinaryRead(reader, reader.uint32(), options, message.coverPhoto);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeEmployeeCoverPhotoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* storage.FileMetadata cover_photo = 1; */
        if (message.coverPhoto)
            FileMetadata.internalBinaryWrite(message.coverPhoto, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeEmployeeCoverPhotoRequest
 */
export const ChangeEmployeeCoverPhotoRequest = new ChangeEmployeeCoverPhotoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeEmployeeFirstNameRequest$Type extends MessageType<ChangeEmployeeFirstNameRequest> {
    constructor() {
        super("management.ChangeEmployeeFirstNameRequest", [
            { no: 1, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeEmployeeFirstNameRequest>): ChangeEmployeeFirstNameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.firstName = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeEmployeeFirstNameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeEmployeeFirstNameRequest): ChangeEmployeeFirstNameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string first_name */ 1:
                    message.firstName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeEmployeeFirstNameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string first_name = 1; */
        if (message.firstName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.firstName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeEmployeeFirstNameRequest
 */
export const ChangeEmployeeFirstNameRequest = new ChangeEmployeeFirstNameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeEmployeeMiddleNameRequest$Type extends MessageType<ChangeEmployeeMiddleNameRequest> {
    constructor() {
        super("management.ChangeEmployeeMiddleNameRequest", [
            { no: 1, name: "middle_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeEmployeeMiddleNameRequest>): ChangeEmployeeMiddleNameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.middleName = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeEmployeeMiddleNameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeEmployeeMiddleNameRequest): ChangeEmployeeMiddleNameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string middle_name */ 1:
                    message.middleName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeEmployeeMiddleNameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string middle_name = 1; */
        if (message.middleName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.middleName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeEmployeeMiddleNameRequest
 */
export const ChangeEmployeeMiddleNameRequest = new ChangeEmployeeMiddleNameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeEmployeeLastNameRequest$Type extends MessageType<ChangeEmployeeLastNameRequest> {
    constructor() {
        super("management.ChangeEmployeeLastNameRequest", [
            { no: 1, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeEmployeeLastNameRequest>): ChangeEmployeeLastNameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lastName = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeEmployeeLastNameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeEmployeeLastNameRequest): ChangeEmployeeLastNameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string last_name */ 1:
                    message.lastName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeEmployeeLastNameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string last_name = 1; */
        if (message.lastName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.lastName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeEmployeeLastNameRequest
 */
export const ChangeEmployeeLastNameRequest = new ChangeEmployeeLastNameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeEmployeeTelNumberRequest$Type extends MessageType<ChangeEmployeeTelNumberRequest> {
    constructor() {
        super("management.ChangeEmployeeTelNumberRequest", [
            { no: 1, name: "tel_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeEmployeeTelNumberRequest>): ChangeEmployeeTelNumberRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.telNumber = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeEmployeeTelNumberRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeEmployeeTelNumberRequest): ChangeEmployeeTelNumberRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tel_number */ 1:
                    message.telNumber = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeEmployeeTelNumberRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tel_number = 1; */
        if (message.telNumber !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.telNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeEmployeeTelNumberRequest
 */
export const ChangeEmployeeTelNumberRequest = new ChangeEmployeeTelNumberRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeEmployeeMobileNumberRequest$Type extends MessageType<ChangeEmployeeMobileNumberRequest> {
    constructor() {
        super("management.ChangeEmployeeMobileNumberRequest", [
            { no: 1, name: "mobile_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeEmployeeMobileNumberRequest>): ChangeEmployeeMobileNumberRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mobileNumber = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeEmployeeMobileNumberRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeEmployeeMobileNumberRequest): ChangeEmployeeMobileNumberRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string mobile_number */ 1:
                    message.mobileNumber = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeEmployeeMobileNumberRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string mobile_number = 1; */
        if (message.mobileNumber !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.mobileNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeEmployeeMobileNumberRequest
 */
export const ChangeEmployeeMobileNumberRequest = new ChangeEmployeeMobileNumberRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeEmployeeEmailRequest$Type extends MessageType<ChangeEmployeeEmailRequest> {
    constructor() {
        super("management.ChangeEmployeeEmailRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeEmployeeEmailRequest>): ChangeEmployeeEmailRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeEmployeeEmailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeEmployeeEmailRequest): ChangeEmployeeEmailRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeEmployeeEmailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeEmployeeEmailRequest
 */
export const ChangeEmployeeEmailRequest = new ChangeEmployeeEmailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeEmployeeRoleRequest$Type extends MessageType<ChangeEmployeeRoleRequest> {
    constructor() {
        super("management.ChangeEmployeeRoleRequest", [
            { no: 1, name: "role", kind: "enum", T: () => ["management.EmployeeRole", EmployeeRole] }
        ]);
    }
    create(value?: PartialMessage<ChangeEmployeeRoleRequest>): ChangeEmployeeRoleRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.role = 0;
        if (value !== undefined)
            reflectionMergePartial<ChangeEmployeeRoleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeEmployeeRoleRequest): ChangeEmployeeRoleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* management.EmployeeRole role */ 1:
                    message.role = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeEmployeeRoleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* management.EmployeeRole role = 1; */
        if (message.role !== 0)
            writer.tag(1, WireType.Varint).int32(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeEmployeeRoleRequest
 */
export const ChangeEmployeeRoleRequest = new ChangeEmployeeRoleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeEmployeeStatusRequest$Type extends MessageType<ChangeEmployeeStatusRequest> {
    constructor() {
        super("management.ChangeEmployeeStatusRequest", [
            { no: 1, name: "status", kind: "enum", T: () => ["management.EmployeeStatus", EmployeeStatus, "EMPLOYEE_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<ChangeEmployeeStatusRequest>): ChangeEmployeeStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ChangeEmployeeStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeEmployeeStatusRequest): ChangeEmployeeStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* management.EmployeeStatus status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeEmployeeStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* management.EmployeeStatus status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeEmployeeStatusRequest
 */
export const ChangeEmployeeStatusRequest = new ChangeEmployeeStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeEmployeeContractTypeRequest$Type extends MessageType<ChangeEmployeeContractTypeRequest> {
    constructor() {
        super("management.ChangeEmployeeContractTypeRequest", [
            { no: 1, name: "contract_type", kind: "enum", T: () => ["management.EmployeeContractType", EmployeeContractType] }
        ]);
    }
    create(value?: PartialMessage<ChangeEmployeeContractTypeRequest>): ChangeEmployeeContractTypeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.contractType = 0;
        if (value !== undefined)
            reflectionMergePartial<ChangeEmployeeContractTypeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeEmployeeContractTypeRequest): ChangeEmployeeContractTypeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* management.EmployeeContractType contract_type */ 1:
                    message.contractType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeEmployeeContractTypeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* management.EmployeeContractType contract_type = 1; */
        if (message.contractType !== 0)
            writer.tag(1, WireType.Varint).int32(message.contractType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeEmployeeContractTypeRequest
 */
export const ChangeEmployeeContractTypeRequest = new ChangeEmployeeContractTypeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangePhilNatIDRequest$Type extends MessageType<ChangePhilNatIDRequest> {
    constructor() {
        super("management.ChangePhilNatIDRequest", [
            { no: 1, name: "phil_nat_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangePhilNatIDRequest>): ChangePhilNatIDRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.philNatId = "";
        if (value !== undefined)
            reflectionMergePartial<ChangePhilNatIDRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangePhilNatIDRequest): ChangePhilNatIDRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string phil_nat_id */ 1:
                    message.philNatId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangePhilNatIDRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string phil_nat_id = 1; */
        if (message.philNatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.philNatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangePhilNatIDRequest
 */
export const ChangePhilNatIDRequest = new ChangePhilNatIDRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeBirthDateRequest$Type extends MessageType<ChangeBirthDateRequest> {
    constructor() {
        super("management.ChangeBirthDateRequest", [
            { no: 1, name: "birth_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeBirthDateRequest>): ChangeBirthDateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.birthDate = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeBirthDateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeBirthDateRequest): ChangeBirthDateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string birth_date */ 1:
                    message.birthDate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeBirthDateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string birth_date = 1; */
        if (message.birthDate !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.birthDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeBirthDateRequest
 */
export const ChangeBirthDateRequest = new ChangeBirthDateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddSpecialInterestRequest$Type extends MessageType<AddSpecialInterestRequest> {
    constructor() {
        super("management.AddSpecialInterestRequest", [
            { no: 1, name: "special_interest", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddSpecialInterestRequest>): AddSpecialInterestRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.specialInterest = "";
        if (value !== undefined)
            reflectionMergePartial<AddSpecialInterestRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddSpecialInterestRequest): AddSpecialInterestRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string special_interest */ 1:
                    message.specialInterest = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddSpecialInterestRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string special_interest = 1; */
        if (message.specialInterest !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.specialInterest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.AddSpecialInterestRequest
 */
export const AddSpecialInterestRequest = new AddSpecialInterestRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveSpecialInterestRequest$Type extends MessageType<RemoveSpecialInterestRequest> {
    constructor() {
        super("management.RemoveSpecialInterestRequest", [
            { no: 1, name: "special_interest", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveSpecialInterestRequest>): RemoveSpecialInterestRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.specialInterest = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveSpecialInterestRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveSpecialInterestRequest): RemoveSpecialInterestRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string special_interest */ 1:
                    message.specialInterest = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveSpecialInterestRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string special_interest = 1; */
        if (message.specialInterest !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.specialInterest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveSpecialInterestRequest
 */
export const RemoveSpecialInterestRequest = new RemoveSpecialInterestRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddLearningInstitutionRequest$Type extends MessageType<AddLearningInstitutionRequest> {
    constructor() {
        super("management.AddLearningInstitutionRequest", [
            { no: 1, name: "learning_institution", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddLearningInstitutionRequest>): AddLearningInstitutionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.learningInstitution = "";
        if (value !== undefined)
            reflectionMergePartial<AddLearningInstitutionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddLearningInstitutionRequest): AddLearningInstitutionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string learning_institution */ 1:
                    message.learningInstitution = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddLearningInstitutionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string learning_institution = 1; */
        if (message.learningInstitution !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.learningInstitution);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.AddLearningInstitutionRequest
 */
export const AddLearningInstitutionRequest = new AddLearningInstitutionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveLearningInstitutionRequest$Type extends MessageType<RemoveLearningInstitutionRequest> {
    constructor() {
        super("management.RemoveLearningInstitutionRequest", [
            { no: 1, name: "learning_institution", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveLearningInstitutionRequest>): RemoveLearningInstitutionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.learningInstitution = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveLearningInstitutionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveLearningInstitutionRequest): RemoveLearningInstitutionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string learning_institution */ 1:
                    message.learningInstitution = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveLearningInstitutionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string learning_institution = 1; */
        if (message.learningInstitution !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.learningInstitution);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveLearningInstitutionRequest
 */
export const RemoveLearningInstitutionRequest = new RemoveLearningInstitutionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeSpouseFirstNameRequest$Type extends MessageType<ChangeSpouseFirstNameRequest> {
    constructor() {
        super("management.ChangeSpouseFirstNameRequest", [
            { no: 1, name: "spouse_first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeSpouseFirstNameRequest>): ChangeSpouseFirstNameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.spouseFirstName = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeSpouseFirstNameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeSpouseFirstNameRequest): ChangeSpouseFirstNameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string spouse_first_name */ 1:
                    message.spouseFirstName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeSpouseFirstNameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string spouse_first_name = 1; */
        if (message.spouseFirstName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.spouseFirstName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeSpouseFirstNameRequest
 */
export const ChangeSpouseFirstNameRequest = new ChangeSpouseFirstNameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeSpouseMiddleNameRequest$Type extends MessageType<ChangeSpouseMiddleNameRequest> {
    constructor() {
        super("management.ChangeSpouseMiddleNameRequest", [
            { no: 1, name: "spouse_middle_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeSpouseMiddleNameRequest>): ChangeSpouseMiddleNameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.spouseMiddleName = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeSpouseMiddleNameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeSpouseMiddleNameRequest): ChangeSpouseMiddleNameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string spouse_middle_name */ 1:
                    message.spouseMiddleName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeSpouseMiddleNameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string spouse_middle_name = 1; */
        if (message.spouseMiddleName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.spouseMiddleName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeSpouseMiddleNameRequest
 */
export const ChangeSpouseMiddleNameRequest = new ChangeSpouseMiddleNameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeSpouseLastNameRequest$Type extends MessageType<ChangeSpouseLastNameRequest> {
    constructor() {
        super("management.ChangeSpouseLastNameRequest", [
            { no: 1, name: "spouse_last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeSpouseLastNameRequest>): ChangeSpouseLastNameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.spouseLastName = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeSpouseLastNameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeSpouseLastNameRequest): ChangeSpouseLastNameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string spouse_last_name */ 1:
                    message.spouseLastName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeSpouseLastNameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string spouse_last_name = 1; */
        if (message.spouseLastName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.spouseLastName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeSpouseLastNameRequest
 */
export const ChangeSpouseLastNameRequest = new ChangeSpouseLastNameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeSpouseEmployerRequest$Type extends MessageType<ChangeSpouseEmployerRequest> {
    constructor() {
        super("management.ChangeSpouseEmployerRequest", [
            { no: 1, name: "spouse_employer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeSpouseEmployerRequest>): ChangeSpouseEmployerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.spouseEmployer = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeSpouseEmployerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeSpouseEmployerRequest): ChangeSpouseEmployerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string spouse_employer */ 1:
                    message.spouseEmployer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeSpouseEmployerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string spouse_employer = 1; */
        if (message.spouseEmployer !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.spouseEmployer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeSpouseEmployerRequest
 */
export const ChangeSpouseEmployerRequest = new ChangeSpouseEmployerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveEmployeeRequest$Type extends MessageType<RemoveEmployeeRequest> {
    constructor() {
        super("management.RemoveEmployeeRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveEmployeeRequest>): RemoveEmployeeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveEmployeeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveEmployeeRequest): RemoveEmployeeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveEmployeeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveEmployeeRequest
 */
export const RemoveEmployeeRequest = new RemoveEmployeeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDepartmentRequest$Type extends MessageType<CreateDepartmentRequest> {
    constructor() {
        super("management.CreateDepartmentRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateDepartmentRequest>): CreateDepartmentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CreateDepartmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDepartmentRequest): CreateDepartmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional string description */ 2:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDepartmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional string description = 2; */
        if (message.description !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.CreateDepartmentRequest
 */
export const CreateDepartmentRequest = new CreateDepartmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddEmployeeToDepartmentRequest$Type extends MessageType<AddEmployeeToDepartmentRequest> {
    constructor() {
        super("management.AddEmployeeToDepartmentRequest", [
            { no: 1, name: "employee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "department_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddEmployeeToDepartmentRequest>): AddEmployeeToDepartmentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.employeeId = "";
        message.departmentId = "";
        if (value !== undefined)
            reflectionMergePartial<AddEmployeeToDepartmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddEmployeeToDepartmentRequest): AddEmployeeToDepartmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string employee_id */ 1:
                    message.employeeId = reader.string();
                    break;
                case /* string department_id */ 2:
                    message.departmentId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddEmployeeToDepartmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string employee_id = 1; */
        if (message.employeeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.employeeId);
        /* string department_id = 2; */
        if (message.departmentId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.departmentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.AddEmployeeToDepartmentRequest
 */
export const AddEmployeeToDepartmentRequest = new AddEmployeeToDepartmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveEmployeeFromDepartmentRequest$Type extends MessageType<RemoveEmployeeFromDepartmentRequest> {
    constructor() {
        super("management.RemoveEmployeeFromDepartmentRequest", [
            { no: 1, name: "employee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "department_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveEmployeeFromDepartmentRequest>): RemoveEmployeeFromDepartmentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.employeeId = "";
        message.departmentId = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveEmployeeFromDepartmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveEmployeeFromDepartmentRequest): RemoveEmployeeFromDepartmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string employee_id */ 1:
                    message.employeeId = reader.string();
                    break;
                case /* string department_id */ 2:
                    message.departmentId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveEmployeeFromDepartmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string employee_id = 1; */
        if (message.employeeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.employeeId);
        /* string department_id = 2; */
        if (message.departmentId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.departmentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveEmployeeFromDepartmentRequest
 */
export const RemoveEmployeeFromDepartmentRequest = new RemoveEmployeeFromDepartmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDepartmentRequest$Type extends MessageType<GetDepartmentRequest> {
    constructor() {
        super("management.GetDepartmentRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetDepartmentRequest>): GetDepartmentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetDepartmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDepartmentRequest): GetDepartmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDepartmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.GetDepartmentRequest
 */
export const GetDepartmentRequest = new GetDepartmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDepartmentNameRequest$Type extends MessageType<UpdateDepartmentNameRequest> {
    constructor() {
        super("management.UpdateDepartmentNameRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateDepartmentNameRequest>): UpdateDepartmentNameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateDepartmentNameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDepartmentNameRequest): UpdateDepartmentNameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDepartmentNameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.UpdateDepartmentNameRequest
 */
export const UpdateDepartmentNameRequest = new UpdateDepartmentNameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDepartmentDescriptionRequest$Type extends MessageType<UpdateDepartmentDescriptionRequest> {
    constructor() {
        super("management.UpdateDepartmentDescriptionRequest", [
            { no: 1, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateDepartmentDescriptionRequest>): UpdateDepartmentDescriptionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateDepartmentDescriptionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDepartmentDescriptionRequest): UpdateDepartmentDescriptionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string description */ 1:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDepartmentDescriptionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string description = 1; */
        if (message.description !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.UpdateDepartmentDescriptionRequest
 */
export const UpdateDepartmentDescriptionRequest = new UpdateDepartmentDescriptionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveDepartmentRequest$Type extends MessageType<RemoveDepartmentRequest> {
    constructor() {
        super("management.RemoveDepartmentRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveDepartmentRequest>): RemoveDepartmentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveDepartmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveDepartmentRequest): RemoveDepartmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveDepartmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveDepartmentRequest
 */
export const RemoveDepartmentRequest = new RemoveDepartmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateJobInformationRequest$Type extends MessageType<CreateJobInformationRequest> {
    constructor() {
        super("management.CreateJobInformationRequest", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "employee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "department_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "supervisor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "work_location", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "start_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "salary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateJobInformationRequest>): CreateJobInformationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.employeeId = "";
        message.departmentId = "";
        message.supervisorId = "";
        message.workLocation = "";
        message.startDate = "";
        message.salary = "";
        message.currency = "";
        if (value !== undefined)
            reflectionMergePartial<CreateJobInformationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateJobInformationRequest): CreateJobInformationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string employee_id */ 2:
                    message.employeeId = reader.string();
                    break;
                case /* string department_id */ 3:
                    message.departmentId = reader.string();
                    break;
                case /* string supervisor_id */ 4:
                    message.supervisorId = reader.string();
                    break;
                case /* string work_location */ 5:
                    message.workLocation = reader.string();
                    break;
                case /* string start_date */ 6:
                    message.startDate = reader.string();
                    break;
                case /* string salary */ 7:
                    message.salary = reader.string();
                    break;
                case /* string currency */ 8:
                    message.currency = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateJobInformationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string employee_id = 2; */
        if (message.employeeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.employeeId);
        /* string department_id = 3; */
        if (message.departmentId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.departmentId);
        /* string supervisor_id = 4; */
        if (message.supervisorId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.supervisorId);
        /* string work_location = 5; */
        if (message.workLocation !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.workLocation);
        /* string start_date = 6; */
        if (message.startDate !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.startDate);
        /* string salary = 7; */
        if (message.salary !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.salary);
        /* string currency = 8; */
        if (message.currency !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.currency);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.CreateJobInformationRequest
 */
export const CreateJobInformationRequest = new CreateJobInformationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetJobInformationRequest$Type extends MessageType<GetJobInformationRequest> {
    constructor() {
        super("management.GetJobInformationRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetJobInformationRequest>): GetJobInformationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetJobInformationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetJobInformationRequest): GetJobInformationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetJobInformationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.GetJobInformationRequest
 */
export const GetJobInformationRequest = new GetJobInformationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeJobTitleRequest$Type extends MessageType<ChangeJobTitleRequest> {
    constructor() {
        super("management.ChangeJobTitleRequest", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeJobTitleRequest>): ChangeJobTitleRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeJobTitleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeJobTitleRequest): ChangeJobTitleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeJobTitleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeJobTitleRequest
 */
export const ChangeJobTitleRequest = new ChangeJobTitleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeJobDepartmentRequest$Type extends MessageType<ChangeJobDepartmentRequest> {
    constructor() {
        super("management.ChangeJobDepartmentRequest", [
            { no: 1, name: "department_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeJobDepartmentRequest>): ChangeJobDepartmentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.departmentId = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeJobDepartmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeJobDepartmentRequest): ChangeJobDepartmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string department_id */ 1:
                    message.departmentId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeJobDepartmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string department_id = 1; */
        if (message.departmentId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.departmentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeJobDepartmentRequest
 */
export const ChangeJobDepartmentRequest = new ChangeJobDepartmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeJobSupervisorRequest$Type extends MessageType<ChangeJobSupervisorRequest> {
    constructor() {
        super("management.ChangeJobSupervisorRequest", [
            { no: 1, name: "supervisor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeJobSupervisorRequest>): ChangeJobSupervisorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.supervisorId = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeJobSupervisorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeJobSupervisorRequest): ChangeJobSupervisorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string supervisor_id */ 1:
                    message.supervisorId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeJobSupervisorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string supervisor_id = 1; */
        if (message.supervisorId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.supervisorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeJobSupervisorRequest
 */
export const ChangeJobSupervisorRequest = new ChangeJobSupervisorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeJobWorkLocationRequest$Type extends MessageType<ChangeJobWorkLocationRequest> {
    constructor() {
        super("management.ChangeJobWorkLocationRequest", [
            { no: 1, name: "work_location", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeJobWorkLocationRequest>): ChangeJobWorkLocationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.workLocation = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeJobWorkLocationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeJobWorkLocationRequest): ChangeJobWorkLocationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string work_location */ 1:
                    message.workLocation = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeJobWorkLocationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string work_location = 1; */
        if (message.workLocation !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.workLocation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeJobWorkLocationRequest
 */
export const ChangeJobWorkLocationRequest = new ChangeJobWorkLocationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeJobStartDateRequest$Type extends MessageType<ChangeJobStartDateRequest> {
    constructor() {
        super("management.ChangeJobStartDateRequest", [
            { no: 1, name: "start_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeJobStartDateRequest>): ChangeJobStartDateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.startDate = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeJobStartDateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeJobStartDateRequest): ChangeJobStartDateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string start_date */ 1:
                    message.startDate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeJobStartDateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string start_date = 1; */
        if (message.startDate !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.startDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeJobStartDateRequest
 */
export const ChangeJobStartDateRequest = new ChangeJobStartDateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeJobSalaryRequest$Type extends MessageType<ChangeJobSalaryRequest> {
    constructor() {
        super("management.ChangeJobSalaryRequest", [
            { no: 1, name: "salary", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeJobSalaryRequest>): ChangeJobSalaryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.salary = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeJobSalaryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeJobSalaryRequest): ChangeJobSalaryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string salary */ 1:
                    message.salary = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeJobSalaryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string salary = 1; */
        if (message.salary !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.salary);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeJobSalaryRequest
 */
export const ChangeJobSalaryRequest = new ChangeJobSalaryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeJobCurrencyRequest$Type extends MessageType<ChangeJobCurrencyRequest> {
    constructor() {
        super("management.ChangeJobCurrencyRequest", [
            { no: 1, name: "currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeJobCurrencyRequest>): ChangeJobCurrencyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.currency = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeJobCurrencyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeJobCurrencyRequest): ChangeJobCurrencyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string currency */ 1:
                    message.currency = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeJobCurrencyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string currency = 1; */
        if (message.currency !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.currency);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeJobCurrencyRequest
 */
export const ChangeJobCurrencyRequest = new ChangeJobCurrencyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveJobInformationRequest$Type extends MessageType<RemoveJobInformationRequest> {
    constructor() {
        super("management.RemoveJobInformationRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveJobInformationRequest>): RemoveJobInformationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveJobInformationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveJobInformationRequest): RemoveJobInformationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveJobInformationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveJobInformationRequest
 */
export const RemoveJobInformationRequest = new RemoveJobInformationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateEmergencyInformationRequest$Type extends MessageType<CreateEmergencyInformationRequest> {
    constructor() {
        super("management.CreateEmergencyInformationRequest", [
            { no: 1, name: "employee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "tel_number", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "mobile_number", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "health_conditions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "contact_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateEmergencyInformationRequest>): CreateEmergencyInformationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.employeeId = "";
        message.address = "";
        message.healthConditions = [];
        message.contactName = "";
        if (value !== undefined)
            reflectionMergePartial<CreateEmergencyInformationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateEmergencyInformationRequest): CreateEmergencyInformationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string employee_id */ 1:
                    message.employeeId = reader.string();
                    break;
                case /* string address */ 2:
                    message.address = reader.string();
                    break;
                case /* optional string tel_number */ 3:
                    message.telNumber = reader.string();
                    break;
                case /* optional string mobile_number */ 4:
                    message.mobileNumber = reader.string();
                    break;
                case /* repeated string health_conditions */ 5:
                    message.healthConditions.push(reader.string());
                    break;
                case /* string contact_name */ 6:
                    message.contactName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateEmergencyInformationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string employee_id = 1; */
        if (message.employeeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.employeeId);
        /* string address = 2; */
        if (message.address !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.address);
        /* optional string tel_number = 3; */
        if (message.telNumber !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.telNumber);
        /* optional string mobile_number = 4; */
        if (message.mobileNumber !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.mobileNumber);
        /* repeated string health_conditions = 5; */
        for (let i = 0; i < message.healthConditions.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.healthConditions[i]);
        /* string contact_name = 6; */
        if (message.contactName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.contactName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.CreateEmergencyInformationRequest
 */
export const CreateEmergencyInformationRequest = new CreateEmergencyInformationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetEmergencyInformationRequest$Type extends MessageType<GetEmergencyInformationRequest> {
    constructor() {
        super("management.GetEmergencyInformationRequest", [
            { no: 1, name: "employee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetEmergencyInformationRequest>): GetEmergencyInformationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.employeeId = "";
        if (value !== undefined)
            reflectionMergePartial<GetEmergencyInformationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetEmergencyInformationRequest): GetEmergencyInformationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string employee_id */ 1:
                    message.employeeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetEmergencyInformationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string employee_id = 1; */
        if (message.employeeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.employeeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.GetEmergencyInformationRequest
 */
export const GetEmergencyInformationRequest = new GetEmergencyInformationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeEmergencyInformationAddressRequest$Type extends MessageType<ChangeEmergencyInformationAddressRequest> {
    constructor() {
        super("management.ChangeEmergencyInformationAddressRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeEmergencyInformationAddressRequest>): ChangeEmergencyInformationAddressRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeEmergencyInformationAddressRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeEmergencyInformationAddressRequest): ChangeEmergencyInformationAddressRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeEmergencyInformationAddressRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeEmergencyInformationAddressRequest
 */
export const ChangeEmergencyInformationAddressRequest = new ChangeEmergencyInformationAddressRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeEmergencyInformationTelNumberRequest$Type extends MessageType<ChangeEmergencyInformationTelNumberRequest> {
    constructor() {
        super("management.ChangeEmergencyInformationTelNumberRequest", [
            { no: 1, name: "tel_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeEmergencyInformationTelNumberRequest>): ChangeEmergencyInformationTelNumberRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.telNumber = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeEmergencyInformationTelNumberRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeEmergencyInformationTelNumberRequest): ChangeEmergencyInformationTelNumberRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tel_number */ 1:
                    message.telNumber = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeEmergencyInformationTelNumberRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tel_number = 1; */
        if (message.telNumber !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.telNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeEmergencyInformationTelNumberRequest
 */
export const ChangeEmergencyInformationTelNumberRequest = new ChangeEmergencyInformationTelNumberRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeEmergencyInformationMobileNumberRequest$Type extends MessageType<ChangeEmergencyInformationMobileNumberRequest> {
    constructor() {
        super("management.ChangeEmergencyInformationMobileNumberRequest", [
            { no: 1, name: "mobile_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeEmergencyInformationMobileNumberRequest>): ChangeEmergencyInformationMobileNumberRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mobileNumber = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeEmergencyInformationMobileNumberRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeEmergencyInformationMobileNumberRequest): ChangeEmergencyInformationMobileNumberRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string mobile_number */ 1:
                    message.mobileNumber = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeEmergencyInformationMobileNumberRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string mobile_number = 1; */
        if (message.mobileNumber !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.mobileNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeEmergencyInformationMobileNumberRequest
 */
export const ChangeEmergencyInformationMobileNumberRequest = new ChangeEmergencyInformationMobileNumberRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeEmergencyInformationContactNameRequest$Type extends MessageType<ChangeEmergencyInformationContactNameRequest> {
    constructor() {
        super("management.ChangeEmergencyInformationContactNameRequest", [
            { no: 1, name: "contact_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeEmergencyInformationContactNameRequest>): ChangeEmergencyInformationContactNameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.contactName = "";
        if (value !== undefined)
            reflectionMergePartial<ChangeEmergencyInformationContactNameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeEmergencyInformationContactNameRequest): ChangeEmergencyInformationContactNameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string contact_name */ 1:
                    message.contactName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeEmergencyInformationContactNameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string contact_name = 1; */
        if (message.contactName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contactName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangeEmergencyInformationContactNameRequest
 */
export const ChangeEmergencyInformationContactNameRequest = new ChangeEmergencyInformationContactNameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveEmergencyInformationRequest$Type extends MessageType<RemoveEmergencyInformationRequest> {
    constructor() {
        super("management.RemoveEmergencyInformationRequest", [
            { no: 1, name: "employee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveEmergencyInformationRequest>): RemoveEmergencyInformationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.employeeId = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveEmergencyInformationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveEmergencyInformationRequest): RemoveEmergencyInformationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string employee_id */ 1:
                    message.employeeId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveEmergencyInformationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string employee_id = 1; */
        if (message.employeeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.employeeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveEmergencyInformationRequest
 */
export const RemoveEmergencyInformationRequest = new RemoveEmergencyInformationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddEmergencyInformationHealthConditionRequest$Type extends MessageType<AddEmergencyInformationHealthConditionRequest> {
    constructor() {
        super("management.AddEmergencyInformationHealthConditionRequest", [
            { no: 1, name: "health_condition", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddEmergencyInformationHealthConditionRequest>): AddEmergencyInformationHealthConditionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.healthCondition = "";
        if (value !== undefined)
            reflectionMergePartial<AddEmergencyInformationHealthConditionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddEmergencyInformationHealthConditionRequest): AddEmergencyInformationHealthConditionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string health_condition */ 1:
                    message.healthCondition = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddEmergencyInformationHealthConditionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string health_condition = 1; */
        if (message.healthCondition !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.healthCondition);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.AddEmergencyInformationHealthConditionRequest
 */
export const AddEmergencyInformationHealthConditionRequest = new AddEmergencyInformationHealthConditionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveEmergencyInformationHealthConditionRequest$Type extends MessageType<RemoveEmergencyInformationHealthConditionRequest> {
    constructor() {
        super("management.RemoveEmergencyInformationHealthConditionRequest", [
            { no: 1, name: "health_condition", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveEmergencyInformationHealthConditionRequest>): RemoveEmergencyInformationHealthConditionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.healthCondition = "";
        if (value !== undefined)
            reflectionMergePartial<RemoveEmergencyInformationHealthConditionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveEmergencyInformationHealthConditionRequest): RemoveEmergencyInformationHealthConditionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string health_condition */ 1:
                    message.healthCondition = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveEmergencyInformationHealthConditionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string health_condition = 1; */
        if (message.healthCondition !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.healthCondition);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemoveEmergencyInformationHealthConditionRequest
 */
export const RemoveEmergencyInformationHealthConditionRequest = new RemoveEmergencyInformationHealthConditionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePANRequest$Type extends MessageType<CreatePANRequest> {
    constructor() {
        super("management.CreatePANRequest", [
            { no: 1, name: "employee_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "action_type", kind: "enum", T: () => ["management.EmployeePanActionType", EmployeePanActionType, "EMPLOYEE_PAN_ACTION_TYPE_"] },
            { no: 3, name: "old_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "new_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "effective_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "status", kind: "enum", T: () => ["management.EmployeePanActionStatus", EmployeePanActionStatus, "EMPLOYEE_PAN_ACTION_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<CreatePANRequest>): CreatePANRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.employeeId = "";
        message.actionType = 0;
        message.oldValue = "";
        message.newValue = "";
        message.effectiveDate = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<CreatePANRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePANRequest): CreatePANRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string employee_id */ 1:
                    message.employeeId = reader.string();
                    break;
                case /* management.EmployeePanActionType action_type */ 2:
                    message.actionType = reader.int32();
                    break;
                case /* string old_value */ 3:
                    message.oldValue = reader.string();
                    break;
                case /* string new_value */ 4:
                    message.newValue = reader.string();
                    break;
                case /* string effective_date */ 5:
                    message.effectiveDate = reader.string();
                    break;
                case /* management.EmployeePanActionStatus status */ 6:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePANRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string employee_id = 1; */
        if (message.employeeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.employeeId);
        /* management.EmployeePanActionType action_type = 2; */
        if (message.actionType !== 0)
            writer.tag(2, WireType.Varint).int32(message.actionType);
        /* string old_value = 3; */
        if (message.oldValue !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.oldValue);
        /* string new_value = 4; */
        if (message.newValue !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.newValue);
        /* string effective_date = 5; */
        if (message.effectiveDate !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.effectiveDate);
        /* management.EmployeePanActionStatus status = 6; */
        if (message.status !== 0)
            writer.tag(6, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.CreatePANRequest
 */
export const CreatePANRequest = new CreatePANRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPANInformationRequest$Type extends MessageType<GetPANInformationRequest> {
    constructor() {
        super("management.GetPANInformationRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPANInformationRequest>): GetPANInformationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetPANInformationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPANInformationRequest): GetPANInformationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPANInformationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.GetPANInformationRequest
 */
export const GetPANInformationRequest = new GetPANInformationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangePANActionTypeRequest$Type extends MessageType<ChangePANActionTypeRequest> {
    constructor() {
        super("management.ChangePANActionTypeRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "action_type", kind: "enum", T: () => ["management.EmployeePanActionType", EmployeePanActionType, "EMPLOYEE_PAN_ACTION_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<ChangePANActionTypeRequest>): ChangePANActionTypeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.actionType = 0;
        if (value !== undefined)
            reflectionMergePartial<ChangePANActionTypeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangePANActionTypeRequest): ChangePANActionTypeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* management.EmployeePanActionType action_type */ 2:
                    message.actionType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangePANActionTypeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* management.EmployeePanActionType action_type = 2; */
        if (message.actionType !== 0)
            writer.tag(2, WireType.Varint).int32(message.actionType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangePANActionTypeRequest
 */
export const ChangePANActionTypeRequest = new ChangePANActionTypeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangePANOldValueRequest$Type extends MessageType<ChangePANOldValueRequest> {
    constructor() {
        super("management.ChangePANOldValueRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "old_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangePANOldValueRequest>): ChangePANOldValueRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.oldValue = "";
        if (value !== undefined)
            reflectionMergePartial<ChangePANOldValueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangePANOldValueRequest): ChangePANOldValueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string old_value */ 2:
                    message.oldValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangePANOldValueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string old_value = 2; */
        if (message.oldValue !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.oldValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangePANOldValueRequest
 */
export const ChangePANOldValueRequest = new ChangePANOldValueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangePANNewValueRequest$Type extends MessageType<ChangePANNewValueRequest> {
    constructor() {
        super("management.ChangePANNewValueRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "new_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangePANNewValueRequest>): ChangePANNewValueRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.newValue = "";
        if (value !== undefined)
            reflectionMergePartial<ChangePANNewValueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangePANNewValueRequest): ChangePANNewValueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string new_value */ 2:
                    message.newValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangePANNewValueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string new_value = 2; */
        if (message.newValue !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.newValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangePANNewValueRequest
 */
export const ChangePANNewValueRequest = new ChangePANNewValueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangePANEffectiveDateRequest$Type extends MessageType<ChangePANEffectiveDateRequest> {
    constructor() {
        super("management.ChangePANEffectiveDateRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "effective_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangePANEffectiveDateRequest>): ChangePANEffectiveDateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.effectiveDate = "";
        if (value !== undefined)
            reflectionMergePartial<ChangePANEffectiveDateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangePANEffectiveDateRequest): ChangePANEffectiveDateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string effective_date */ 2:
                    message.effectiveDate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangePANEffectiveDateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string effective_date = 2; */
        if (message.effectiveDate !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.effectiveDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ChangePANEffectiveDateRequest
 */
export const ChangePANEffectiveDateRequest = new ChangePANEffectiveDateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApprovePANRequest$Type extends MessageType<ApprovePANRequest> {
    constructor() {
        super("management.ApprovePANRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ApprovePANRequest>): ApprovePANRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<ApprovePANRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApprovePANRequest): ApprovePANRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApprovePANRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.ApprovePANRequest
 */
export const ApprovePANRequest = new ApprovePANRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RejectPANRequest$Type extends MessageType<RejectPANRequest> {
    constructor() {
        super("management.RejectPANRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RejectPANRequest>): RejectPANRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<RejectPANRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RejectPANRequest): RejectPANRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RejectPANRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RejectPANRequest
 */
export const RejectPANRequest = new RejectPANRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemovePANInformationRequest$Type extends MessageType<RemovePANInformationRequest> {
    constructor() {
        super("management.RemovePANInformationRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemovePANInformationRequest>): RemovePANInformationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<RemovePANInformationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemovePANInformationRequest): RemovePANInformationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemovePANInformationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message management.RemovePANInformationRequest
 */
export const RemovePANInformationRequest = new RemovePANInformationRequest$Type();
/**
 * @generated ServiceType for protobuf service management.HumanResourceService
 */
export const HumanResourceService = new ServiceType("management.HumanResourceService", [
    { name: "CreateEmployee", options: {}, I: CreateEmployeeRequest, O: Empty },
    { name: "CreateManager", options: {}, I: CreateEmployeeRequest, O: Empty },
    { name: "CreateAdmin", options: {}, I: CreateEmployeeRequest, O: Empty },
    { name: "AddSpecialInterest", options: {}, I: AddSpecialInterestRequest, O: Empty },
    { name: "AddLearningInstitution", options: {}, I: AddLearningInstitutionRequest, O: Empty },
    { name: "GetEmployee", options: {}, I: GetEmployeeRequest, O: Employee },
    { name: "GetEmployeesByDepartment", serverStreaming: true, options: {}, I: GetEmployeesByDepartmentRequest, O: Employee },
    { name: "ChangeEmployeeAvatar", options: {}, I: ChangeEmployeeAvatarRequest, O: Empty },
    { name: "ChangeEmployeeCoverPhoto", options: {}, I: ChangeEmployeeCoverPhotoRequest, O: Empty },
    { name: "ChangeEmployeeFirstName", options: {}, I: ChangeEmployeeFirstNameRequest, O: Empty },
    { name: "ChangeEmployeeMiddleName", options: {}, I: ChangeEmployeeMiddleNameRequest, O: Empty },
    { name: "ChangeEmployeeLastName", options: {}, I: ChangeEmployeeLastNameRequest, O: Empty },
    { name: "ChangeEmployeeTelNumber", options: {}, I: ChangeEmployeeTelNumberRequest, O: Empty },
    { name: "ChangeEmployeeMobileNumber", options: {}, I: ChangeEmployeeMobileNumberRequest, O: Empty },
    { name: "ChangeEmployeeEmail", options: {}, I: ChangeEmployeeEmailRequest, O: Empty },
    { name: "ChangeEmployeeRole", options: {}, I: ChangeEmployeeRoleRequest, O: Empty },
    { name: "ChangeEmployeeStatus", options: {}, I: ChangeEmployeeStatusRequest, O: Empty },
    { name: "ChangeEmployeeContractType", options: {}, I: ChangeEmployeeContractTypeRequest, O: Empty },
    { name: "ChangePhilNatID", options: {}, I: ChangePhilNatIDRequest, O: Empty },
    { name: "ChangeBirthDate", options: {}, I: ChangeBirthDateRequest, O: Empty },
    { name: "ChangeSpouseFirstName", options: {}, I: ChangeSpouseFirstNameRequest, O: Empty },
    { name: "ChangeSpouseMiddleName", options: {}, I: ChangeSpouseMiddleNameRequest, O: Empty },
    { name: "ChangeSpouseLastName", options: {}, I: ChangeSpouseLastNameRequest, O: Empty },
    { name: "ChangeSpouseEmployer", options: {}, I: ChangeSpouseEmployerRequest, O: Empty },
    { name: "RemoveEmployee", options: {}, I: RemoveEmployeeRequest, O: Empty },
    { name: "RemoveSpecialInterest", options: {}, I: RemoveSpecialInterestRequest, O: Empty },
    { name: "RemoveLearningInstitition", options: {}, I: RemoveLearningInstitutionRequest, O: Empty },
    { name: "CreateDepartment", options: {}, I: CreateDepartmentRequest, O: Empty },
    { name: "AddEmployeeToDepartment", options: {}, I: AddEmployeeToDepartmentRequest, O: Empty },
    { name: "GetDepartment", options: {}, I: GetDepartmentRequest, O: Department },
    { name: "UpdateDepartmentName", options: {}, I: UpdateDepartmentNameRequest, O: Empty },
    { name: "UpdateDepartmentDescription", options: {}, I: UpdateDepartmentDescriptionRequest, O: Empty },
    { name: "RemoveDepartment", options: {}, I: RemoveDepartmentRequest, O: Empty },
    { name: "RemoveEmployeeToDepartment", options: {}, I: RemoveEmployeeFromDepartmentRequest, O: Empty },
    { name: "CreateJobInformation", options: {}, I: CreateJobInformationRequest, O: Empty },
    { name: "GetJobInformation", options: {}, I: GetJobInformationRequest, O: JobInformation },
    { name: "ChangeJobTitle", options: {}, I: ChangeJobTitleRequest, O: Empty },
    { name: "ChangeJobDepartment", options: {}, I: ChangeJobDepartmentRequest, O: Empty },
    { name: "ChangeJobSupervisor", options: {}, I: ChangeJobSupervisorRequest, O: Empty },
    { name: "ChangeJobWorkLocation", options: {}, I: ChangeJobWorkLocationRequest, O: Empty },
    { name: "ChangeJobStartDate", options: {}, I: ChangeJobStartDateRequest, O: Empty },
    { name: "ChangeJobSalary", options: {}, I: ChangeJobSalaryRequest, O: Empty },
    { name: "ChangeJobCurrency", options: {}, I: ChangeJobCurrencyRequest, O: Empty },
    { name: "RemoveJobInformation", options: {}, I: RemoveJobInformationRequest, O: Empty },
    { name: "CreateEmergencyInformation", options: {}, I: CreateEmergencyInformationRequest, O: Empty },
    { name: "AddEmergencyInformationHealthCondition", options: {}, I: AddEmergencyInformationHealthConditionRequest, O: Empty },
    { name: "GetEmergencyInformation", options: {}, I: GetEmergencyInformationRequest, O: EmployeeEmergencyInformation },
    { name: "ChangeEmergencyInformationAddress", options: {}, I: ChangeEmergencyInformationAddressRequest, O: Empty },
    { name: "ChangeEmergencyInformationTelNumber", options: {}, I: ChangeEmergencyInformationTelNumberRequest, O: Empty },
    { name: "ChangeEmergencyInformationMobileNumber", options: {}, I: ChangeEmergencyInformationMobileNumberRequest, O: Empty },
    { name: "ChangeEmergencyInformationContactName", options: {}, I: ChangeEmergencyInformationContactNameRequest, O: Empty },
    { name: "RemoveEmergencyInformation", options: {}, I: RemoveEmergencyInformationRequest, O: Empty },
    { name: "RemoveEmergencyInformationHealthCondition", options: {}, I: RemoveEmergencyInformationHealthConditionRequest, O: Empty },
    { name: "CreatePANEmployeeRequest", options: {}, I: CreatePANRequest, O: Empty },
    { name: "GetPANInformation", options: {}, I: GetPANInformationRequest, O: PersonnelAction },
    { name: "ChangePANActionType", options: {}, I: ChangePANActionTypeRequest, O: Empty },
    { name: "ChangePANOldValue", options: {}, I: ChangePANOldValueRequest, O: Empty },
    { name: "ChangePANNewValue", options: {}, I: ChangePANNewValueRequest, O: Empty },
    { name: "ChangePANEffectiveDate", options: {}, I: ChangePANEffectiveDateRequest, O: Empty },
    { name: "ApprovePAN", options: {}, I: ApprovePANRequest, O: Empty },
    { name: "RejectPAN", options: {}, I: RejectPANRequest, O: Empty },
    { name: "RemovePANInformation", options: {}, I: RemovePANInformationRequest, O: Empty }
]);
