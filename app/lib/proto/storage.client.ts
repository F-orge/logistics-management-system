// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "storage.proto" (package "storage", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { StorageService } from "./storage";
import type { DeleteFileRequest } from "./storage";
import type { ShareFileRequest } from "./storage";
import type { FileMetadataRequest } from "./storage";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { FileChunk } from "./storage";
import type { DownloadFileRequest } from "./storage";
import type { Empty } from "./google/protobuf/empty";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { FileMetadata } from "./storage";
import type { CreateFileRequest } from "./storage";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service storage.StorageService
 */
export interface IStorageServiceClient {
    /**
     * @generated from protobuf rpc: CreateFile(stream storage.CreateFileRequest) returns (storage.FileMetadata);
     */
    createFile(options?: RpcOptions): ClientStreamingCall<CreateFileRequest, FileMetadata>;
    /**
     * @generated from protobuf rpc: ListOwnedFiles(google.protobuf.Empty) returns (stream storage.FileMetadata);
     */
    listOwnedFiles(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, FileMetadata>;
    /**
     * @generated from protobuf rpc: ListSharedFiles(google.protobuf.Empty) returns (stream storage.FileMetadata);
     */
    listSharedFiles(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, FileMetadata>;
    /**
     * @generated from protobuf rpc: DownloadFile(storage.DownloadFileRequest) returns (stream storage.FileChunk);
     */
    downloadFile(input: DownloadFileRequest, options?: RpcOptions): ServerStreamingCall<DownloadFileRequest, FileChunk>;
    /**
     * @generated from protobuf rpc: GetFileMetadata(storage.FileMetadataRequest) returns (storage.FileMetadata);
     */
    getFileMetadata(input: FileMetadataRequest, options?: RpcOptions): UnaryCall<FileMetadataRequest, FileMetadata>;
    /**
     * @generated from protobuf rpc: ShareFile(storage.ShareFileRequest) returns (google.protobuf.Empty);
     */
    shareFile(input: ShareFileRequest, options?: RpcOptions): UnaryCall<ShareFileRequest, Empty>;
    /**
     * @generated from protobuf rpc: DeleteFile(storage.DeleteFileRequest) returns (google.protobuf.Empty);
     */
    deleteFile(input: DeleteFileRequest, options?: RpcOptions): UnaryCall<DeleteFileRequest, Empty>;
}
/**
 * @generated from protobuf service storage.StorageService
 */
export class StorageServiceClient implements IStorageServiceClient, ServiceInfo {
    typeName = StorageService.typeName;
    methods = StorageService.methods;
    options = StorageService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateFile(stream storage.CreateFileRequest) returns (storage.FileMetadata);
     */
    createFile(options?: RpcOptions): ClientStreamingCall<CreateFileRequest, FileMetadata> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateFileRequest, FileMetadata>("clientStreaming", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: ListOwnedFiles(google.protobuf.Empty) returns (stream storage.FileMetadata);
     */
    listOwnedFiles(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, FileMetadata> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, FileMetadata>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListSharedFiles(google.protobuf.Empty) returns (stream storage.FileMetadata);
     */
    listSharedFiles(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, FileMetadata> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, FileMetadata>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DownloadFile(storage.DownloadFileRequest) returns (stream storage.FileChunk);
     */
    downloadFile(input: DownloadFileRequest, options?: RpcOptions): ServerStreamingCall<DownloadFileRequest, FileChunk> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DownloadFileRequest, FileChunk>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetFileMetadata(storage.FileMetadataRequest) returns (storage.FileMetadata);
     */
    getFileMetadata(input: FileMetadataRequest, options?: RpcOptions): UnaryCall<FileMetadataRequest, FileMetadata> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<FileMetadataRequest, FileMetadata>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ShareFile(storage.ShareFileRequest) returns (google.protobuf.Empty);
     */
    shareFile(input: ShareFileRequest, options?: RpcOptions): UnaryCall<ShareFileRequest, Empty> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ShareFileRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteFile(storage.DeleteFileRequest) returns (google.protobuf.Empty);
     */
    deleteFile(input: DeleteFileRequest, options?: RpcOptions): UnaryCall<DeleteFileRequest, Empty> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteFileRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
