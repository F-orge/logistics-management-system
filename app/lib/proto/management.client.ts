// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "management.proto" (package "management", syntax proto3)
// tslint:disable
import { TaskService } from "./management";
import type { GetTaskCommentsRequest } from "./management";
import type { TaskComment } from "./management";
import type { CreateTaskCommentRequest } from "./management";
import type { RemoveTaskFieldRequest } from "./management";
import type { UpdateTaskFieldRequest } from "./management";
import type { GetTaskFieldRequest } from "./management";
import type { TaskField } from "./management";
import type { CreateTaskFieldRequest } from "./management";
import type { RemoveTaskLabelRequest } from "./management";
import type { UpdateTaskLabelRequest } from "./management";
import type { GetTaskLabelRequest } from "./management";
import type { TaskLabel } from "./management";
import type { CreateTaskLabelRequest } from "./management";
import type { RemoveTaskRequest } from "./management";
import type { UpdateTaskRequest } from "./management";
import type { MoveTaskToBoardRequest } from "./management";
import type { GetTaskRequest } from "./management";
import type { GetTaskFromSectionRequest } from "./management";
import type { RemoveAssignTaskRequest } from "./management";
import type { AssignTaskRequest } from "./management";
import type { Task } from "./management";
import type { CreateTaskRequest } from "./management";
import type { RemoveBoardSectionRequest } from "./management";
import type { UpdateBoardSectionRequest } from "./management";
import type { GetBoardSectionRequest } from "./management";
import type { BoardSection } from "./management";
import type { CreateBoardSectionRequest } from "./management";
import type { RemoveBoardRequest } from "./management";
import type { UpdateBoardRequest } from "./management";
import type { GetBoardRequest } from "./management";
import type { Board } from "./management";
import type { CreateBoardRequest } from "./management";
import { TeamService } from "./management";
import type { RemoveTeamRequest } from "./management";
import type { UpdateTeamRequest } from "./management";
import type { GetTeamRequest } from "./management";
import type { RemoveTeamMemberRequest } from "./management";
import type { AddTeamMemberRequest } from "./management";
import type { Team } from "./management";
import type { CreateTeamRequest } from "./management";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EmployeeService } from "./management";
import type { Empty } from "./google/protobuf/empty";
import type { RemoveEmployeeRequest } from "./management";
import type { UpdateEmployeeRequest } from "./management";
import type { BatchGetEmployeesRequest } from "./management";
import type { Employee } from "./management";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateEmployeeResponse } from "./management";
import type { CreateEmployeeRequest } from "./management";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service management.EmployeeService
 */
export interface IEmployeeServiceClient {
    /**
     * @generated from protobuf rpc: CreateEmployee(management.CreateEmployeeRequest) returns (management.CreateEmployeeResponse);
     */
    createEmployee(input: CreateEmployeeRequest, options?: RpcOptions): UnaryCall<CreateEmployeeRequest, CreateEmployeeResponse>;
    /**
     * @generated from protobuf rpc: GetEmployee(management.CreateEmployeeRequest) returns (stream management.Employee);
     */
    getEmployee(input: CreateEmployeeRequest, options?: RpcOptions): ServerStreamingCall<CreateEmployeeRequest, Employee>;
    /**
     * @generated from protobuf rpc: BatchGetEmployees(management.BatchGetEmployeesRequest) returns (stream management.Employee);
     */
    batchGetEmployees(input: BatchGetEmployeesRequest, options?: RpcOptions): ServerStreamingCall<BatchGetEmployeesRequest, Employee>;
    /**
     * @generated from protobuf rpc: UpdateEmployee(management.UpdateEmployeeRequest) returns (management.Employee);
     */
    updateEmployee(input: UpdateEmployeeRequest, options?: RpcOptions): UnaryCall<UpdateEmployeeRequest, Employee>;
    /**
     * @generated from protobuf rpc: RemoveEmployee(management.RemoveEmployeeRequest) returns (google.protobuf.Empty);
     */
    removeEmployee(input: RemoveEmployeeRequest, options?: RpcOptions): UnaryCall<RemoveEmployeeRequest, Empty>;
}
/**
 * @generated from protobuf service management.EmployeeService
 */
export class EmployeeServiceClient implements IEmployeeServiceClient, ServiceInfo {
    typeName = EmployeeService.typeName;
    methods = EmployeeService.methods;
    options = EmployeeService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateEmployee(management.CreateEmployeeRequest) returns (management.CreateEmployeeResponse);
     */
    createEmployee(input: CreateEmployeeRequest, options?: RpcOptions): UnaryCall<CreateEmployeeRequest, CreateEmployeeResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateEmployeeRequest, CreateEmployeeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetEmployee(management.CreateEmployeeRequest) returns (stream management.Employee);
     */
    getEmployee(input: CreateEmployeeRequest, options?: RpcOptions): ServerStreamingCall<CreateEmployeeRequest, Employee> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateEmployeeRequest, Employee>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BatchGetEmployees(management.BatchGetEmployeesRequest) returns (stream management.Employee);
     */
    batchGetEmployees(input: BatchGetEmployeesRequest, options?: RpcOptions): ServerStreamingCall<BatchGetEmployeesRequest, Employee> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<BatchGetEmployeesRequest, Employee>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateEmployee(management.UpdateEmployeeRequest) returns (management.Employee);
     */
    updateEmployee(input: UpdateEmployeeRequest, options?: RpcOptions): UnaryCall<UpdateEmployeeRequest, Employee> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateEmployeeRequest, Employee>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveEmployee(management.RemoveEmployeeRequest) returns (google.protobuf.Empty);
     */
    removeEmployee(input: RemoveEmployeeRequest, options?: RpcOptions): UnaryCall<RemoveEmployeeRequest, Empty> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveEmployeeRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service management.TeamService
 */
export interface ITeamServiceClient {
    /**
     * @generated from protobuf rpc: CreateTeam(management.CreateTeamRequest) returns (management.Team);
     */
    createTeam(input: CreateTeamRequest, options?: RpcOptions): UnaryCall<CreateTeamRequest, Team>;
    /**
     * @generated from protobuf rpc: AddTeamMember(management.AddTeamMemberRequest) returns (management.Team);
     */
    addTeamMember(input: AddTeamMemberRequest, options?: RpcOptions): UnaryCall<AddTeamMemberRequest, Team>;
    /**
     * @generated from protobuf rpc: RemoveTeamMember(management.RemoveTeamMemberRequest) returns (management.Team);
     */
    removeTeamMember(input: RemoveTeamMemberRequest, options?: RpcOptions): UnaryCall<RemoveTeamMemberRequest, Team>;
    /**
     * @generated from protobuf rpc: GetTeam(management.GetTeamRequest) returns (management.Team);
     */
    getTeam(input: GetTeamRequest, options?: RpcOptions): UnaryCall<GetTeamRequest, Team>;
    /**
     * NOTE: this will get all teams depending on the policies set in the
     * database. `authorization` token will be used here.
     *
     * @generated from protobuf rpc: GetTeams(google.protobuf.Empty) returns (stream management.Team);
     */
    getTeams(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, Team>;
    /**
     * @generated from protobuf rpc: UpdateTeam(management.UpdateTeamRequest) returns (management.Team);
     */
    updateTeam(input: UpdateTeamRequest, options?: RpcOptions): UnaryCall<UpdateTeamRequest, Team>;
    /**
     * @generated from protobuf rpc: RemoveTeam(management.RemoveTeamRequest) returns (google.protobuf.Empty);
     */
    removeTeam(input: RemoveTeamRequest, options?: RpcOptions): UnaryCall<RemoveTeamRequest, Empty>;
}
/**
 * @generated from protobuf service management.TeamService
 */
export class TeamServiceClient implements ITeamServiceClient, ServiceInfo {
    typeName = TeamService.typeName;
    methods = TeamService.methods;
    options = TeamService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateTeam(management.CreateTeamRequest) returns (management.Team);
     */
    createTeam(input: CreateTeamRequest, options?: RpcOptions): UnaryCall<CreateTeamRequest, Team> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateTeamRequest, Team>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddTeamMember(management.AddTeamMemberRequest) returns (management.Team);
     */
    addTeamMember(input: AddTeamMemberRequest, options?: RpcOptions): UnaryCall<AddTeamMemberRequest, Team> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddTeamMemberRequest, Team>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveTeamMember(management.RemoveTeamMemberRequest) returns (management.Team);
     */
    removeTeamMember(input: RemoveTeamMemberRequest, options?: RpcOptions): UnaryCall<RemoveTeamMemberRequest, Team> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveTeamMemberRequest, Team>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTeam(management.GetTeamRequest) returns (management.Team);
     */
    getTeam(input: GetTeamRequest, options?: RpcOptions): UnaryCall<GetTeamRequest, Team> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTeamRequest, Team>("unary", this._transport, method, opt, input);
    }
    /**
     * NOTE: this will get all teams depending on the policies set in the
     * database. `authorization` token will be used here.
     *
     * @generated from protobuf rpc: GetTeams(google.protobuf.Empty) returns (stream management.Team);
     */
    getTeams(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, Team> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Team>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateTeam(management.UpdateTeamRequest) returns (management.Team);
     */
    updateTeam(input: UpdateTeamRequest, options?: RpcOptions): UnaryCall<UpdateTeamRequest, Team> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTeamRequest, Team>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveTeam(management.RemoveTeamRequest) returns (google.protobuf.Empty);
     */
    removeTeam(input: RemoveTeamRequest, options?: RpcOptions): UnaryCall<RemoveTeamRequest, Empty> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveTeamRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service management.TaskService
 */
export interface ITaskServiceClient {
    /**
     * board
     *
     * @generated from protobuf rpc: CreateBoard(management.CreateBoardRequest) returns (management.Board);
     */
    createBoard(input: CreateBoardRequest, options?: RpcOptions): UnaryCall<CreateBoardRequest, Board>;
    /**
     * @generated from protobuf rpc: GetBoard(management.GetBoardRequest) returns (management.Board);
     */
    getBoard(input: GetBoardRequest, options?: RpcOptions): UnaryCall<GetBoardRequest, Board>;
    /**
     * @generated from protobuf rpc: GetBoards(management.GetBoardRequest) returns (stream management.Board);
     */
    getBoards(input: GetBoardRequest, options?: RpcOptions): ServerStreamingCall<GetBoardRequest, Board>;
    /**
     * @generated from protobuf rpc: UpdateBoard(management.UpdateBoardRequest) returns (management.Board);
     */
    updateBoard(input: UpdateBoardRequest, options?: RpcOptions): UnaryCall<UpdateBoardRequest, Board>;
    /**
     * @generated from protobuf rpc: RemoveBoard(management.RemoveBoardRequest) returns (google.protobuf.Empty);
     */
    removeBoard(input: RemoveBoardRequest, options?: RpcOptions): UnaryCall<RemoveBoardRequest, Empty>;
    /**
     * board section
     *
     * @generated from protobuf rpc: CreateBoardSection(management.CreateBoardSectionRequest) returns (management.BoardSection);
     */
    createBoardSection(input: CreateBoardSectionRequest, options?: RpcOptions): UnaryCall<CreateBoardSectionRequest, BoardSection>;
    /**
     * @generated from protobuf rpc: GetBoardSections(management.GetBoardSectionRequest) returns (stream management.BoardSection);
     */
    getBoardSections(input: GetBoardSectionRequest, options?: RpcOptions): ServerStreamingCall<GetBoardSectionRequest, BoardSection>;
    /**
     * @generated from protobuf rpc: UpdateBoardSection(management.UpdateBoardSectionRequest) returns (management.BoardSection);
     */
    updateBoardSection(input: UpdateBoardSectionRequest, options?: RpcOptions): UnaryCall<UpdateBoardSectionRequest, BoardSection>;
    /**
     * @generated from protobuf rpc: RemoveBoardSection(management.RemoveBoardSectionRequest) returns (google.protobuf.Empty);
     */
    removeBoardSection(input: RemoveBoardSectionRequest, options?: RpcOptions): UnaryCall<RemoveBoardSectionRequest, Empty>;
    /**
     * task
     *
     * @generated from protobuf rpc: CreateTask(management.CreateTaskRequest) returns (management.Task);
     */
    createTask(input: CreateTaskRequest, options?: RpcOptions): UnaryCall<CreateTaskRequest, Task>;
    /**
     * @generated from protobuf rpc: AssignTask(management.AssignTaskRequest) returns (management.Task);
     */
    assignTask(input: AssignTaskRequest, options?: RpcOptions): UnaryCall<AssignTaskRequest, Task>;
    /**
     * @generated from protobuf rpc: RemoveAssignTask(management.RemoveAssignTaskRequest) returns (management.Task);
     */
    removeAssignTask(input: RemoveAssignTaskRequest, options?: RpcOptions): UnaryCall<RemoveAssignTaskRequest, Task>;
    /**
     * @generated from protobuf rpc: GetTasksFromSection(management.GetTaskFromSectionRequest) returns (stream management.Task);
     */
    getTasksFromSection(input: GetTaskFromSectionRequest, options?: RpcOptions): ServerStreamingCall<GetTaskFromSectionRequest, Task>;
    /**
     * @generated from protobuf rpc: GetTask(management.GetTaskRequest) returns (management.Task);
     */
    getTask(input: GetTaskRequest, options?: RpcOptions): UnaryCall<GetTaskRequest, Task>;
    /**
     * @generated from protobuf rpc: GetTasks(management.GetTaskRequest) returns (stream management.Task);
     */
    getTasks(input: GetTaskRequest, options?: RpcOptions): ServerStreamingCall<GetTaskRequest, Task>;
    /**
     * @generated from protobuf rpc: MoveTaskToBoardSection(management.MoveTaskToBoardRequest) returns (google.protobuf.Empty);
     */
    moveTaskToBoardSection(input: MoveTaskToBoardRequest, options?: RpcOptions): UnaryCall<MoveTaskToBoardRequest, Empty>;
    /**
     * @generated from protobuf rpc: UpdateTask(management.UpdateTaskRequest) returns (management.Task);
     */
    updateTask(input: UpdateTaskRequest, options?: RpcOptions): UnaryCall<UpdateTaskRequest, Task>;
    /**
     * @generated from protobuf rpc: RemoveTask(management.RemoveTaskRequest) returns (google.protobuf.Empty);
     */
    removeTask(input: RemoveTaskRequest, options?: RpcOptions): UnaryCall<RemoveTaskRequest, Empty>;
    /**
     * task label
     *
     * @generated from protobuf rpc: CreateTaskLabel(management.CreateTaskLabelRequest) returns (management.TaskLabel);
     */
    createTaskLabel(input: CreateTaskLabelRequest, options?: RpcOptions): UnaryCall<CreateTaskLabelRequest, TaskLabel>;
    /**
     * @generated from protobuf rpc: GetTaskLabel(management.GetTaskLabelRequest) returns (management.TaskLabel);
     */
    getTaskLabel(input: GetTaskLabelRequest, options?: RpcOptions): UnaryCall<GetTaskLabelRequest, TaskLabel>;
    /**
     * @generated from protobuf rpc: GetTaskLabels(management.GetTaskLabelRequest) returns (stream management.TaskLabel);
     */
    getTaskLabels(input: GetTaskLabelRequest, options?: RpcOptions): ServerStreamingCall<GetTaskLabelRequest, TaskLabel>;
    /**
     * @generated from protobuf rpc: UpdateTaskLabel(management.UpdateTaskLabelRequest) returns (management.TaskLabel);
     */
    updateTaskLabel(input: UpdateTaskLabelRequest, options?: RpcOptions): UnaryCall<UpdateTaskLabelRequest, TaskLabel>;
    /**
     * @generated from protobuf rpc: RemoveTaskLabel(management.RemoveTaskLabelRequest) returns (google.protobuf.Empty);
     */
    removeTaskLabel(input: RemoveTaskLabelRequest, options?: RpcOptions): UnaryCall<RemoveTaskLabelRequest, Empty>;
    /**
     * task field
     *
     * @generated from protobuf rpc: CreateTaskField(management.CreateTaskFieldRequest) returns (management.TaskField);
     */
    createTaskField(input: CreateTaskFieldRequest, options?: RpcOptions): UnaryCall<CreateTaskFieldRequest, TaskField>;
    /**
     * @generated from protobuf rpc: GetTaskField(management.GetTaskFieldRequest) returns (management.TaskField);
     */
    getTaskField(input: GetTaskFieldRequest, options?: RpcOptions): UnaryCall<GetTaskFieldRequest, TaskField>;
    /**
     * @generated from protobuf rpc: GetTaskFields(management.GetTaskFieldRequest) returns (stream management.TaskField);
     */
    getTaskFields(input: GetTaskFieldRequest, options?: RpcOptions): ServerStreamingCall<GetTaskFieldRequest, TaskField>;
    /**
     * @generated from protobuf rpc: UpdateTaskField(management.UpdateTaskFieldRequest) returns (management.TaskField);
     */
    updateTaskField(input: UpdateTaskFieldRequest, options?: RpcOptions): UnaryCall<UpdateTaskFieldRequest, TaskField>;
    /**
     * @generated from protobuf rpc: RemoveTaskField(management.RemoveTaskFieldRequest) returns (google.protobuf.Empty);
     */
    removeTaskField(input: RemoveTaskFieldRequest, options?: RpcOptions): UnaryCall<RemoveTaskFieldRequest, Empty>;
    /**
     * task comment
     *
     * @generated from protobuf rpc: CreateTaskComment(management.CreateTaskCommentRequest) returns (management.TaskComment);
     */
    createTaskComment(input: CreateTaskCommentRequest, options?: RpcOptions): UnaryCall<CreateTaskCommentRequest, TaskComment>;
    /**
     * @generated from protobuf rpc: GetTaskComments(management.GetTaskCommentsRequest) returns (stream management.TaskComment);
     */
    getTaskComments(input: GetTaskCommentsRequest, options?: RpcOptions): ServerStreamingCall<GetTaskCommentsRequest, TaskComment>;
}
/**
 * @generated from protobuf service management.TaskService
 */
export class TaskServiceClient implements ITaskServiceClient, ServiceInfo {
    typeName = TaskService.typeName;
    methods = TaskService.methods;
    options = TaskService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * board
     *
     * @generated from protobuf rpc: CreateBoard(management.CreateBoardRequest) returns (management.Board);
     */
    createBoard(input: CreateBoardRequest, options?: RpcOptions): UnaryCall<CreateBoardRequest, Board> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateBoardRequest, Board>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBoard(management.GetBoardRequest) returns (management.Board);
     */
    getBoard(input: GetBoardRequest, options?: RpcOptions): UnaryCall<GetBoardRequest, Board> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBoardRequest, Board>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBoards(management.GetBoardRequest) returns (stream management.Board);
     */
    getBoards(input: GetBoardRequest, options?: RpcOptions): ServerStreamingCall<GetBoardRequest, Board> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBoardRequest, Board>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateBoard(management.UpdateBoardRequest) returns (management.Board);
     */
    updateBoard(input: UpdateBoardRequest, options?: RpcOptions): UnaryCall<UpdateBoardRequest, Board> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateBoardRequest, Board>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveBoard(management.RemoveBoardRequest) returns (google.protobuf.Empty);
     */
    removeBoard(input: RemoveBoardRequest, options?: RpcOptions): UnaryCall<RemoveBoardRequest, Empty> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveBoardRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * board section
     *
     * @generated from protobuf rpc: CreateBoardSection(management.CreateBoardSectionRequest) returns (management.BoardSection);
     */
    createBoardSection(input: CreateBoardSectionRequest, options?: RpcOptions): UnaryCall<CreateBoardSectionRequest, BoardSection> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateBoardSectionRequest, BoardSection>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBoardSections(management.GetBoardSectionRequest) returns (stream management.BoardSection);
     */
    getBoardSections(input: GetBoardSectionRequest, options?: RpcOptions): ServerStreamingCall<GetBoardSectionRequest, BoardSection> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBoardSectionRequest, BoardSection>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateBoardSection(management.UpdateBoardSectionRequest) returns (management.BoardSection);
     */
    updateBoardSection(input: UpdateBoardSectionRequest, options?: RpcOptions): UnaryCall<UpdateBoardSectionRequest, BoardSection> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateBoardSectionRequest, BoardSection>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveBoardSection(management.RemoveBoardSectionRequest) returns (google.protobuf.Empty);
     */
    removeBoardSection(input: RemoveBoardSectionRequest, options?: RpcOptions): UnaryCall<RemoveBoardSectionRequest, Empty> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveBoardSectionRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * task
     *
     * @generated from protobuf rpc: CreateTask(management.CreateTaskRequest) returns (management.Task);
     */
    createTask(input: CreateTaskRequest, options?: RpcOptions): UnaryCall<CreateTaskRequest, Task> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateTaskRequest, Task>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AssignTask(management.AssignTaskRequest) returns (management.Task);
     */
    assignTask(input: AssignTaskRequest, options?: RpcOptions): UnaryCall<AssignTaskRequest, Task> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<AssignTaskRequest, Task>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveAssignTask(management.RemoveAssignTaskRequest) returns (management.Task);
     */
    removeAssignTask(input: RemoveAssignTaskRequest, options?: RpcOptions): UnaryCall<RemoveAssignTaskRequest, Task> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveAssignTaskRequest, Task>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTasksFromSection(management.GetTaskFromSectionRequest) returns (stream management.Task);
     */
    getTasksFromSection(input: GetTaskFromSectionRequest, options?: RpcOptions): ServerStreamingCall<GetTaskFromSectionRequest, Task> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTaskFromSectionRequest, Task>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTask(management.GetTaskRequest) returns (management.Task);
     */
    getTask(input: GetTaskRequest, options?: RpcOptions): UnaryCall<GetTaskRequest, Task> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTaskRequest, Task>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTasks(management.GetTaskRequest) returns (stream management.Task);
     */
    getTasks(input: GetTaskRequest, options?: RpcOptions): ServerStreamingCall<GetTaskRequest, Task> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTaskRequest, Task>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: MoveTaskToBoardSection(management.MoveTaskToBoardRequest) returns (google.protobuf.Empty);
     */
    moveTaskToBoardSection(input: MoveTaskToBoardRequest, options?: RpcOptions): UnaryCall<MoveTaskToBoardRequest, Empty> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<MoveTaskToBoardRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateTask(management.UpdateTaskRequest) returns (management.Task);
     */
    updateTask(input: UpdateTaskRequest, options?: RpcOptions): UnaryCall<UpdateTaskRequest, Task> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTaskRequest, Task>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveTask(management.RemoveTaskRequest) returns (google.protobuf.Empty);
     */
    removeTask(input: RemoveTaskRequest, options?: RpcOptions): UnaryCall<RemoveTaskRequest, Empty> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveTaskRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * task label
     *
     * @generated from protobuf rpc: CreateTaskLabel(management.CreateTaskLabelRequest) returns (management.TaskLabel);
     */
    createTaskLabel(input: CreateTaskLabelRequest, options?: RpcOptions): UnaryCall<CreateTaskLabelRequest, TaskLabel> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateTaskLabelRequest, TaskLabel>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTaskLabel(management.GetTaskLabelRequest) returns (management.TaskLabel);
     */
    getTaskLabel(input: GetTaskLabelRequest, options?: RpcOptions): UnaryCall<GetTaskLabelRequest, TaskLabel> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTaskLabelRequest, TaskLabel>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTaskLabels(management.GetTaskLabelRequest) returns (stream management.TaskLabel);
     */
    getTaskLabels(input: GetTaskLabelRequest, options?: RpcOptions): ServerStreamingCall<GetTaskLabelRequest, TaskLabel> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTaskLabelRequest, TaskLabel>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateTaskLabel(management.UpdateTaskLabelRequest) returns (management.TaskLabel);
     */
    updateTaskLabel(input: UpdateTaskLabelRequest, options?: RpcOptions): UnaryCall<UpdateTaskLabelRequest, TaskLabel> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTaskLabelRequest, TaskLabel>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveTaskLabel(management.RemoveTaskLabelRequest) returns (google.protobuf.Empty);
     */
    removeTaskLabel(input: RemoveTaskLabelRequest, options?: RpcOptions): UnaryCall<RemoveTaskLabelRequest, Empty> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveTaskLabelRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * task field
     *
     * @generated from protobuf rpc: CreateTaskField(management.CreateTaskFieldRequest) returns (management.TaskField);
     */
    createTaskField(input: CreateTaskFieldRequest, options?: RpcOptions): UnaryCall<CreateTaskFieldRequest, TaskField> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateTaskFieldRequest, TaskField>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTaskField(management.GetTaskFieldRequest) returns (management.TaskField);
     */
    getTaskField(input: GetTaskFieldRequest, options?: RpcOptions): UnaryCall<GetTaskFieldRequest, TaskField> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTaskFieldRequest, TaskField>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTaskFields(management.GetTaskFieldRequest) returns (stream management.TaskField);
     */
    getTaskFields(input: GetTaskFieldRequest, options?: RpcOptions): ServerStreamingCall<GetTaskFieldRequest, TaskField> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTaskFieldRequest, TaskField>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateTaskField(management.UpdateTaskFieldRequest) returns (management.TaskField);
     */
    updateTaskField(input: UpdateTaskFieldRequest, options?: RpcOptions): UnaryCall<UpdateTaskFieldRequest, TaskField> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTaskFieldRequest, TaskField>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveTaskField(management.RemoveTaskFieldRequest) returns (google.protobuf.Empty);
     */
    removeTaskField(input: RemoveTaskFieldRequest, options?: RpcOptions): UnaryCall<RemoveTaskFieldRequest, Empty> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveTaskFieldRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * task comment
     *
     * @generated from protobuf rpc: CreateTaskComment(management.CreateTaskCommentRequest) returns (management.TaskComment);
     */
    createTaskComment(input: CreateTaskCommentRequest, options?: RpcOptions): UnaryCall<CreateTaskCommentRequest, TaskComment> {
        const method = this.methods[28], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateTaskCommentRequest, TaskComment>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTaskComments(management.GetTaskCommentsRequest) returns (stream management.TaskComment);
     */
    getTaskComments(input: GetTaskCommentsRequest, options?: RpcOptions): ServerStreamingCall<GetTaskCommentsRequest, TaskComment> {
        const method = this.methods[29], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTaskCommentsRequest, TaskComment>("serverStreaming", this._transport, method, opt, input);
    }
}
