// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package auth

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/F-orge/logistics-management-system/web/layouts"
	"github.com/F-orge/logistics-management-system/web/proto/auth"
	"github.com/F-orge/logistics-management-system/web/utils"
	"github.com/go-playground/validator/v10"
	"github.com/labstack/echo/v4"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"net/http"
)

type AuthHandler struct {
	GrpcClient auth.AuthServiceClient
}

func New() *AuthHandler {
	return &AuthHandler{}
}

func (a *AuthHandler) Build(conn grpc.ClientConnInterface, group echo.Group) {
	a.GrpcClient = auth.NewAuthServiceClient(conn)
	group.GET("/login", a.Show)
	group.POST("/login", a.Action)
}

func (a *AuthHandler) Show(c echo.Context) error {
	return utils.Render(c, 200, loginPage())
}

type LoginDTO struct {
	Email    string `form:"email" validate:"required,email"`
	Password string `form:"password" validate:"required,gte=8"`
}

func (a *AuthHandler) Action(c echo.Context) error {

	// get payload
	payload := new(LoginDTO)

	if err := c.Bind(payload); err != nil {
		return c.String(http.StatusBadRequest, "Email or Password required")
	}

	// validate payload
	validate := validator.New(validator.WithRequiredStructEnabled())

	if err := validate.Struct(payload); err != nil {
		return c.String(http.StatusBadRequest, "Invalid email or password format")
	}

	// perform action
	result, err := a.GrpcClient.BasicLogin(c.Request().Context(), &auth.AuthBasicLoginRequest{
		Email:    payload.Email,
		Password: payload.Password,
	})

	a.GrpcClient.BasicRegister(c.Request().Context(), &auth.AuthBasicRegisterRequest{})

	if err != nil {
		if status.Code(err) == codes.InvalidArgument {
			a.GrpcClient.BasicRegister(c.Request().Context(), &auth.AuthBasicRegisterRequest{
				Email:    payload.Email,
				Password: payload.Password,
			})
			return c.String(200, "hello")
		}
	}

	fmt.Println(result)

	return c.String(200, "hello")
}

func loginMetadata() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<title>Login page</title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func loginPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var3 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<form action=\"/auth/login\" hx-post=\"/auth/login\"><input type=\"email\" name=\"email\" required> <input type=\"password\" name=\"password\" required minlength=\"8\"> <button type=\"submit\">Login</button></form>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = layouts.BaseHTML(layouts.BaseHTMLProps{
			Head: loginMetadata(),
		}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var3), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
