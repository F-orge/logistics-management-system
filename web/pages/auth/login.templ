package auth

import (
	"fmt"
	"github.com/F-orge/logistics-management-system/web/layouts"
	"github.com/F-orge/logistics-management-system/web/proto/auth"
	"github.com/F-orge/logistics-management-system/web/utils"
	"github.com/go-playground/validator/v10"
	"github.com/labstack/echo/v4"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"net/http"
	"time"
)

func (a *AuthHandler) ShowLogin(c echo.Context) error {
	return utils.Render(c, 200, loginPage())
}

type LoginDTO struct {
	Email    string `form:"email" validate:"required,email"`
	Password string `form:"password" validate:"required,gte=8"`
}

func (a *AuthHandler) LoginAction(c echo.Context) error {

	// get payload
	payload := new(LoginDTO)

	if err := c.Bind(payload); err != nil {
		return c.String(http.StatusBadRequest, "Email or Password required")
	}

	// validate payload
	validate := validator.New(validator.WithRequiredStructEnabled())

	if err := validate.Struct(payload); err != nil {
		return c.String(http.StatusBadRequest, "Invalid email or password format")
	}

	// perform action
	result, err := a.GrpcClient.BasicLogin(c.Request().Context(), &auth.AuthBasicLoginRequest{
		Email:    payload.Email,
		Password: payload.Password,
	})

	if err != nil {
		fmt.Println(status.Code(err))
		if status.Code(err) == codes.InvalidArgument {
			a.GrpcClient.BasicRegister(c.Request().Context(), &auth.AuthBasicRegisterRequest{
				Email:    payload.Email,
				Password: payload.Password,
			})
			return c.String(200, "hello")
		}
		return c.String(400, "Bad request")
	}

	fmt.Println(result)

	cookie := new(http.Cookie)

	cookie.Name = "Authorization"
	// TODO: create a jwt token and embed the token of rust server as a subject field
	cookie.Value = fmt.Sprintf("%s %s", result.TokenType, result.AccessToken)
	cookie.Path = "/"
	cookie.Expires = time.Now().Add(time.Duration(result.ExpiresIn) * time.Second)

	c.SetCookie(cookie)

	// redirect the user to /dashboard
	c.Response().Header().Add("HX-Redirect", "/dashboard")

	return c.String(200, "ok")
}

templ loginMetadata() {
	<title>Login page</title>
}

templ loginPage() {
	@layouts.AuthLayout(layouts.AuthLayoutProps{
		Head: loginMetadata(),
	}) {
		<article class="h-full flex flex-col justify-center items-center">
			<div class="w-1/2 space-y-5">
				<section class="space-y-1.5">
					<h1 class="text-2xl font-bold">Log in to your account</h1>
					<span class="text-neutral-500">Enter your credentials</span>
				</section>
				<form x-data="{isSubmitting:false}" class="w-full space-y-5" action="/auth/login" hx-post="/auth/login">
					<div class="">
						<label for="input-form-email" class="block text-sm font-medium mb-2">Email</label>
						<input type="email" name="email" required id="input-form-email" class="py-3 px-4 block w-full border border-neutral-200 rounded-lg text-sm focus:border-orange-500 focus:ring-orange-500 disabled:opacity-50 disabled:pointer-events-none " placeholder="abc@email.com"/>
					</div>
					<div class="">
						<div class="flex justify-between items-center">
							<label for="input-form-password" class="block text-sm font-medium mb-2 ">Password</label>
							<span class="block mb-2 text-sm text-neutral-500 hover:underline cursor-pointer">I forgot my password</span>
						</div>
						<input type="password" name="password" required minlength="8" id="input-form-password" class="py-3 px-4 block w-full border border-neutral-200 rounded-lg text-sm focus:border-orange-500 focus:ring-orange-500 disabled:opacity-50 disabled:pointer-events-none" placeholder="*********"/>
						<p class="mt-2 text-sm text-neutral-500" id="hs-input-helper-text">We'll never share your details.</p>
					</div>
					<button
						x-on:submit="isSubmitting = true"
						type="submit"
						class="w-full py-3 px-4 flex items-center justify-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-orange-600 text-white hover:bg-orange-700 focus:outline-none focus:bg-orange-700 disabled:opacity-50 disabled:pointer-events-none"
					>
						<span x-show="!isSubmitting">
							Sign In
						</span>
						<svg x-show="isSubmitting" class="spinner animate-spin" id="spinner" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12a9 9 0 1 1-6.219-8.56"></path></svg>
					</button>
				</form>
			</div>
		</article>
	}
}
